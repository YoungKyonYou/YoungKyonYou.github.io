I"^C<p><br /><br /></p>

<p><em><strong>오늘보다 발전된 내일의 나를 위해…</strong></em></p>

<p><br /></p>

<p><br /><br /></p>

<style>
.containercoffee {
  width: 300px;
  height: 280px;
  position: relative;
  top: calc(50% - 140px);
  left: calc(50% - 150px);
}
.coffee-header {
  width: 100%;
  height: 80px;
  position: absolute;
  top: 0;
  left: 0;
  background-color: #ddcfcc;
  border-radius: 10px;
}
.coffee-header__buttons {
  width: 25px;
  height: 25px;
  position: absolute;
  top: 25px;
  background-color: #282323;
  border-radius: 50%;
}
.coffee-header__buttons::after {
  content: "";
  width: 8px;
  height: 8px;
  position: absolute;
  bottom: -8px;
  left: calc(50% - 4px);
  background-color: #615e5e;
}
.coffee-header__button-one {
  left: 15px;
}
.coffee-header__button-two {
  left: 50px;
}
.coffee-header__display {
  width: 50px;
  height: 50px;
  position: absolute;
  top: calc(50% - 25px);
  left: calc(50% - 25px);
  border-radius: 50%;
  background-color: #9acfc5;
  border: 5px solid #43beae;
  box-sizing: border-box;
}
.coffee-header__details {
  width: 8px;
  height: 20px;
  position: absolute;
  top: 10px;
  right: 10px;
  background-color: #9b9091;
  box-shadow: -12px 0 0 #9b9091, -24px 0 0 #9b9091;
}
.coffee-medium {
  width: 90%;
  height: 160px;
  position: absolute;
  top: 80px;
  left: calc(50% - 45%);
  background-color: #bcb0af;
}
.coffee-medium:before {
  content: "";
  width: 90%;
  height: 100px;
  background-color: #776f6e;
  position: absolute;
  bottom: 0;
  left: calc(50% - 45%);
  border-radius: 20px 20px 0 0;
}
.coffe-medium__exit {
  width: 60px;
  height: 20px;
  position: absolute;
  top: 0;
  left: calc(50% - 30px);
  background-color: #231f20;
}
.coffe-medium__exit::before {
  content: "";
  width: 50px;
  height: 20px;
  border-radius: 0 0 50% 50%;
  position: absolute;
  bottom: -20px;
  left: calc(50% - 25px);
  background-color: #231f20;
}
.coffe-medium__exit::after {
  content: "";
  width: 10px;
  height: 10px;
  position: absolute;
  bottom: -30px;
  left: calc(50% - 5px);
  background-color: #231f20;
}
.coffee-medium__arm {
  width: 70px;
  height: 20px;
  position: absolute;
  top: 15px;
  right: 25px;
  background-color: #231f20;
}
.coffee-medium__arm::before {
  content: "";
  width: 15px;
  height: 5px;
  position: absolute;
  top: 7px;
  left: -15px;
  background-color: #9e9495;
}
.coffee-medium__cup {
  width: 80px;
  height: 47px;
  position: absolute;
  bottom: 0;
  left: calc(50% - 40px);
  background-color: #FFF;
  border-radius: 0 0 70px 70px / 0 0 110px 110px;
}
.coffee-medium__cup::after {
  content: "";
  width: 20px;
  height: 20px;
  position: absolute;
  top: 6px;
  right: -13px;
  border: 5px solid #FFF;
  border-radius: 50%;
}
@keyframes liquid {
  0% {
    height: 0px;  
    opacity: 1;
  }
  5% {
    height: 0px;  
    opacity: 1;
  }
  20% {
    height: 62px;  
    opacity: 1;
  }
  95% {
    height: 62px;
    opacity: 1;
  }
  100% {
    height: 62px;
    opacity: 0;
  }
}
.coffee-medium__liquid {
  width: 6px;
  height: 63px;
  opacity: 0;
  position: absolute;
  top: 50px;
  left: calc(50% - 3px);
  background-color: #74372b;
  animation: liquid 4s 4s linear infinite;
}
.coffee-medium__smoke {
  width: 8px;
  height: 20px;
  position: absolute;  
  border-radius: 5px;
  background-color: #b3aeae;
}
@keyframes smokeOne {
  0% {
    bottom: 20px;
    opacity: 0;
  }
  40% {
    bottom: 50px;
    opacity: .5;
  }
  80% {
    bottom: 80px;
    opacity: .3;
  }
  100% {
    bottom: 80px;
    opacity: 0;
  }
}
@keyframes smokeTwo {
  0% {
    bottom: 40px;
    opacity: 0;
  }
  40% {
    bottom: 70px;
    opacity: .5;
  }
  80% {
    bottom: 80px;
    opacity: .3;
  }
  100% {
    bottom: 80px;
    opacity: 0;
  }
}
.coffee-medium__smoke-one {
  opacity: 0;
  bottom: 50px;
  left: 102px;
  animation: smokeOne 3s 4s linear infinite;
}
.coffee-medium__smoke-two {
  opacity: 0;
  bottom: 70px;
  left: 118px;
  animation: smokeTwo 3s 5s linear infinite;
}
.coffee-medium__smoke-three {
  opacity: 0;
  bottom: 65px;
  right: 118px;
  animation: smokeTwo 3s 6s linear infinite;
}
.coffee-medium__smoke-for {
  opacity: 0;
  bottom: 50px;
  right: 102px;
  animation: smokeOne 3s 5s linear infinite;
}
.coffee-footer {
  width: 95%;
  height: 15px;
  position: absolute;
  bottom: 25px;
  left: calc(50% - 47.5%);
  background-color: #41bdad;
  border-radius: 10px;
}
.coffee-footer::after {
  content: "";
  width: 106%;
  height: 26px;
  position: absolute;
  bottom: -25px;
  left: -8px;
  background-color: #000;
}
</style>

<div class="containercoffee">
    <div class="coffee-header">
      <div class="coffee-header__buttons coffee-header__button-one"></div>
      <div class="coffee-header__buttons coffee-header__button-two"></div>
      <div class="coffee-header__display"></div>
      <div class="coffee-header__details"></div>
    </div>
    <div class="coffee-medium">
      <div class="coffe-medium__exit"></div>
      <div class="coffee-medium__arm"></div>
      <div class="coffee-medium__liquid"></div>
      <div class="coffee-medium__smoke coffee-medium__smoke-one"></div>
      <div class="coffee-medium__smoke coffee-medium__smoke-two"></div>
      <div class="coffee-medium__smoke coffee-medium__smoke-three"></div>
      <div class="coffee-medium__smoke coffee-medium__smoke-for"></div>
      <div class="coffee-medium__cup"></div>
    </div>
    <div class="coffee-footer"></div>
</div>

<p><br /><br /><br /><br /><br /><br /><br /><br /></p>

<h1 id="design-pattern-wrapper-pattern"><center>Design Pattern-Wrapper Pattern</center></h1>

<p><br /></p>

<p><em>해당 내용은 POCU 아카데미 COMP_2500에서 배운 내용을 공부하기 위해 작성된 글입니다</em></p>

<p><br /></p>

<h3 id="proxy-pattern">Proxy Pattern</h3>

<p><br /></p>

<p>책임 연쇄라는 말은 다소 추상적으로 들린다. 위키에서 책임 연쇄 패턴에 대해 찾아보면 아래와 같은 코드를 볼 수 있다.</p>

<p><br /></p>

<p><img src="/images/Interview/post5/2021-12-16-14-22-01.png?style=centerme" alt="" /></p>

<p><br /></p>

<p>하지만 이는 복잡하면서도 잘못된 책임 연쇄 패턴이다. 위키에 나온 예를 이해하기 쉽도록 구성해보자.</p>

<p><br /></p>

<p><strong>Logger Class</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Logger</span><span class="o">{</span>
  <span class="kd">private</span> <span class="nc">EnmSet</span><span class="o">&lt;</span><span class="nc">LogLevel</span><span class="o">&gt;</span> <span class="n">logLevels</span><span class="o">;</span>
  <span class="kd">private</span> <span class="nc">Logger</span> <span class="n">next</span><span class="o">;</span>

  <span class="kd">public</span> <span class="nf">Logger</span><span class="o">(</span><span class="nc">LogLevel</span><span class="o">[]</span> <span class="n">levels</span><span class="o">){</span>
    <span class="k">this</span><span class="o">.</span><span class="na">logLevels</span><span class="o">=</span><span class="nc">EnumSet</span><span class="o">.</span><span class="na">coptOf</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">levels</span><span class="o">));</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="nc">Logger</span> <span class="nf">setNext</span><span class="o">(</span><span class="nc">Logger</span> <span class="n">next</span><span class="o">){</span>
    <span class="k">this</span><span class="o">.</span><span class="na">next</span><span class="o">=</span><span class="n">next</span><span class="o">;</span>
    <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
  <span class="o">}</span>
  
  <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">message</span><span class="o">(</span><span class="nc">String</span> <span class="n">msg</span><span class="o">,</span> <span class="nc">LogLevel</span> <span class="n">severity</span><span class="o">){</span>
    <span class="k">if</span><span class="o">(</span><span class="n">logLevels</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">severity</span><span class="o">)){</span>
      <span class="n">log</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="k">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">next</span><span class="o">!=</span><span class="kc">null</span><span class="o">){</span>
      <span class="k">this</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">message</span><span class="o">(</span><span class="n">msg</span><span class="o">,</span> <span class="n">severity</span><span class="o">);</span>
    <span class="o">}</span>
  <span class="o">}</span>
  <span class="kd">protected</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">log</span><span class="o">(</span><span class="nc">String</span> <span class="n">msg</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p>위 코드를 살펴보면 멤버 변수로 next를 가지고 있는데 이는 자기 자신을 참조하기 위함이다. message 메서드에서의 if문은 만약 내가 severity 즉, 로그 레벨을 처리할 수 있다면(Enum<Set>에 안에 있음) msg를 로그 처리한다.</Set></p>

<p><br /></p>

<p><strong>ConsoleLogger Class</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConsoleLogger</span> <span class="kd">extends</span> <span class="nc">Logger</span><span class="o">{</span>
  <span class="kd">public</span> <span class="nf">ConsoleLogger</span><span class="o">(</span><span class="nc">LogLevel</span><span class="o">[]</span> <span class="n">levels</span><span class="o">){</span>
    <span class="kd">super</span><span class="o">(</span><span class="n">levels</span><span class="o">);</span>
  <span class="o">}</span>

  <span class="nd">@Override</span>
  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">log</span><span class="o">(</span><span class="nc">String</span> <span class="n">msg</span><span class="o">){</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Writing to console: "</span> <span class="o">+</span><span class="n">msg</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p><strong>EmailLogger Class</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EmailLogger</span> <span class="kd">extends</span> <span class="nc">Logger</span><span class="o">{</span>
  <span class="kd">public</span> <span class="nf">EmailLogger</span><span class="o">(</span><span class="nc">LogLevel</span><span class="o">[]</span> <span class="n">levels</span><span class="o">){</span>
    <span class="kd">super</span><span class="o">(</span><span class="n">levels</span><span class="o">);</span>
  <span class="o">}</span>

  <span class="nd">@Override</span>
  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">log</span><span class="o">(</span><span class="nc">String</span> <span class="n">msg</span><span class="o">){</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Sending via email: "</span><span class="o">+</span><span class="n">msg</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p><strong>FileLogger Class</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FileLogger</span> <span class="kd">extends</span> <span class="nc">Logger</span><span class="o">{</span>
  <span class="kd">public</span> <span class="nf">FileLogger</span><span class="o">(</span><span class="nc">LogLevel</span><span class="o">[]</span> <span class="n">levels</span><span class="o">){</span>
    <span class="kd">super</span><span class="o">(</span><span class="n">levels</span><span class="o">);</span>
  <span class="o">}</span>
  <span class="nd">@Override</span>
  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">log</span><span class="o">(</span><span class="nc">String</span> <span class="n">msg</span><span class="o">){</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Writing to log file: "</span><span class="o">+</span><span class="n">msg</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p><strong>Enum LogLevel</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">enum</span> <span class="nc">LogLevel</span><span class="o">{</span>
  <span class="no">INFO</span><span class="o">,</span>
  <span class="no">DEBUG</span><span class="o">,</span>
  <span class="no">WARNING</span><span class="o">,</span>
  <span class="no">ERROR</span><span class="o">,</span>
  <span class="no">FUNCTIONAL_MESSAGE</span><span class="o">,</span>
  <span class="no">FUNCTIONAL_ERROR</span><span class="o">;</span>

  <span class="kd">public</span> <span class="kd">static</span> <span class="nc">LogLevel</span><span class="o">[]</span> <span class="nf">all</span><span class="o">(){</span>
    <span class="k">return</span> <span class="nf">values</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p>이제 실제로 로거를 써보자</p>

<p><strong>Main Class</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Logger</span> <span class="n">logger</span><span class="o">=</span><span class="k">new</span> <span class="nc">ConsoleLogger</span><span class="o">(</span><span class="nc">LogLevel</span><span class="o">.</span><span class="na">all</span><span class="o">());</span>
<span class="n">logger</span><span class="o">.</span><span class="na">setNext</span><span class="o">(</span><span class="k">new</span> <span class="nc">EmailLogger</span><span class="o">(</span><span class="k">new</span> <span class="nc">LogLevel</span><span class="o">[]{</span><span class="nc">LogLevel</span><span class="o">.</span><span class="na">FUNCTIONAL_MESSAGE</span><span class="o">,</span> <span class="nc">LogLevel</span><span class="o">.</span><span class="na">FUNCTIONAL_ERROR</span><span class="o">})).</span><span class="na">setNext</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileLogger</span><span class="o">(</span><span class="k">new</span> <span class="nc">LogLevel</span><span class="o">[]{</span><span class="nc">LogLevel</span><span class="o">.</span><span class="na">WARNING</span><span class="o">,</span> <span class="nc">LogLevel</span><span class="o">.</span><span class="na">ERROR</span><span class="o">}));</span>

<span class="c1">// consoleLogger에서 처리 (consoleLogger는 모든 로그 레벨을 처리)</span>
<span class="n">logger</span><span class="o">.</span><span class="na">message</span><span class="o">(</span><span class="s">"Entering function ProcessOrder()."</span><span class="o">,</span> <span class="nc">LogLevel</span><span class="o">.</span><span class="na">DEBUG</span><span class="o">);</span>
<span class="n">logger</span><span class="o">.</span><span class="na">message</span><span class="o">(</span><span class="s">"Order record retrieved."</span><span class="o">,</span> <span class="nc">LogLevel</span><span class="o">.</span><span class="na">INFO</span><span class="o">);</span>

<span class="c1">//consoleLogger와 emailLogger에서 처리한다</span>
<span class="c1">//(emailLogger는 Functional_Error과 Functional_Message 로그 레벨을 처리)</span>
<span class="n">logger</span><span class="o">.</span><span class="na">message</span><span class="o">(</span><span class="s">"Unable to Process Order ORD1 Dated D1 For Customer C1."</span><span class="o">);</span>
</code></pre></div></div>
:ET