I"($<p><span style="color:orange; font-weight:bold"><em>해당 내용은 책 ‘스프링 부트와 AWS로 혼자 구현하는 웹 서비스’에 나오는 내용이며 이는 개인적으로 공부하기 위해 기록함을 알려드립니다</em></span></p>

<p><br /><br /></p>

<h1 id="인텔리제이로-스프링부트-시작하기"><center>인텔리제이로 스프링부트 시작하기</center></h1>

<p><br /></p>

<p>프로젝트를 생성하는 것부터 시작한다.</p>

<p><br /></p>

<p><img src="/images/SpringBoot/ImplementingWebServiceWithSpringBootAndAWS-1/2021-08-13-16-00-00.png" alt="" /></p>

<p><br /></p>

<p><img src="/images/SpringBoot/ImplementingWebServiceWithSpringBootAndAWS-1/2021-08-13-16-01-54.png" alt="" /></p>

<p><br /></p>

<p><img src="/images/SpringBoot/ImplementingWebServiceWithSpringBootAndAWS-1/2021-08-13-16-03-15.png" alt="" /></p>

<p><br /></p>

<p><img src="/images/SpringBoot/ImplementingWebServiceWithSpringBootAndAWS-1/2021-08-13-16-03-32.png" alt="" /></p>

<p><br /></p>

<p>위와 같은 작업이 모두 끝나면 그레이들 기반의 자바 프로젝트가 생성된다.</p>

<p><br /></p>

<p>그리고 위의 사진을 보면 Dependencies로 5가지를 추가하는 것을 볼 수 있는데 이는 책에 없는 내용이고 내가 임의로 한 것이다. 차후에 있을 게시물에서 저런 것들을 쓸 것이다.</p>

<p><br /></p>

<link rel="stylesheet" href="https: //www.webnots.com/resources/font-awesome/css/font-awesome.min.css" />

<link rel="stylesheet" href="/assets/css/webnots.css" />

<div class="webnots-information webnots-notification-box">참고로 책에서는 Thymeleaf 대신 Mustache를 사용한다.</div>

<p><br /></p>

<p>이제 <span style="color:orange; font-weight:bold">build.gradle</span>를 열고 수정을 해야 한다. 우리는 일단 책에서 나온 대로 JUnit4를 쓰고 repository를 <span style="color:orange; font-weight:bold">mavenCentral</span>와 <span style="color:orange; font-weight:bold">jcenter</span>를 사용한다.</p>

<p><br /></p>

<link href="http://fonts.googleapis.com/earlyaccess/hanna.css" rel="stylesheet" />

<div style="background: #eee;
  box-shadow: 0 8px 8px -4px lightblue; font-family: 'Hanna', sans-serif;; padding: 40px;">

이전부터 mavenCentral을 많이 사용해 왔지만 본인이 만든 라이브러리를 업로드하기 위해서는 정말 많은 과정과 설정이 필요하다. 그러다 보니 개발자들이 직접 만든 라이브러리를 업로드하는 것이 힘들어 점점 공유가 안 되는 상황이 발생했다. 최근에 나온 jcenter는 이런 문제점을 개선하여 라이브러리 업로드를 간단하게 하였다. 또한 여기서 한 걸음 더 나아가 jcenter에 라이브러리를 업로드하면 mavenCentral에도 업로드될 수 있도록 자동화를 할 수 있다. 그러다 보니 개발자들의 라이브러리가 점점 jcenter로 이동하고 있다. 여기서는 mavenCentral, jcenter 둘 다 등록해서 사용한다. </div>

<p>라고 나와있으나.. jcenter는 현재 <span style="color:#85144b; font-weight:bold">deprecated</span>라고 나온다. 책에서는 둘 다 쓰지만 여기서는 <span style="color:orange; font-weight:bold">mavenCentral</span>만 쓰겠다.</p>

<p><br /></p>

<p>완성 된 <strong>build.gradle</strong>를 보자.</p>

<p><strong>build.gradle</strong></p>
<div class="language-gradle highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plugins</span> <span class="o">{</span>
    <span class="n">id</span> <span class="s1">'org.springframework.boot'</span> <span class="n">version</span> <span class="s1">'2.5.3'</span>
    <span class="n">id</span> <span class="s1">'io.spring.dependency-management'</span> <span class="n">version</span> <span class="s1">'1.0.11.RELEASE'</span>
    <span class="n">id</span> <span class="s1">'java'</span>
    <span class="n">id</span> <span class="s1">'war'</span>
<span class="o">}</span>

<span class="n">group</span> <span class="o">=</span> <span class="s1">'com.yyk.app'</span>
<span class="n">version</span> <span class="o">=</span> <span class="s1">'0.0.1-SNAPSHOT'</span>
<span class="n">sourceCompatibility</span> <span class="o">=</span> <span class="s1">'11'</span>

<span class="n">configurations</span> <span class="o">{</span>
    <span class="n">compileOnly</span> <span class="o">{</span>
        <span class="n">extendsFrom</span> <span class="n">annotationProcessor</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="k">repositories</span> <span class="o">{</span>
    <span class="n">mavenCentral</span><span class="o">()</span>
    <span class="n">jcenter</span><span class="o">()</span>
<span class="o">}</span>

<span class="k">dependencies</span> <span class="o">{</span>
    <span class="n">implementation</span> <span class="s1">'org.springframework.boot:spring-boot-starter-data-jpa'</span>
    <span class="n">implementation</span> <span class="s1">'org.springframework.boot:spring-boot-starter-security'</span>
    <span class="n">implementation</span> <span class="s1">'org.springframework.boot:spring-boot-starter-thymeleaf'</span>
    <span class="n">implementation</span> <span class="s1">'org.springframework.boot:spring-boot-starter-web'</span>
    <span class="n">implementation</span> <span class="s1">'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'</span>
    <span class="n">compileOnly</span> <span class="s1">'org.projectlombok:lombok'</span>
    <span class="n">developmentOnly</span> <span class="s1">'org.springframework.boot:spring-boot-devtools'</span>
    <span class="n">annotationProcessor</span> <span class="s1">'org.projectlombok:lombok'</span>
    <span class="n">providedRuntime</span> <span class="s1">'org.springframework.boot:spring-boot-starter-tomcat'</span>
    <span class="n">testImplementation</span><span class="o">(</span><span class="s1">'org.springframework.boot:spring-boot-starter-test'</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">exclude</span> <span class="nl">group:</span> <span class="s1">'org.junit.vintage'</span><span class="o">,</span> <span class="nl">module:</span> <span class="s1">'junit-vintage-engine'</span>
    <span class="o">}</span>
    <span class="n">testImplementation</span> <span class="s1">'org.springframework.security:spring-security-test'</span>
<span class="o">}</span>

<span class="n">test</span> <span class="o">{</span>
    <span class="n">useJUnitPlatform</span><span class="o">{</span>
        <span class="n">includeEngines</span> <span class="s1">'junit-vintage'</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p><br /></p>

<p>원래는</p>

<div class="language-gradle highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">test</span><span class="o">{</span>
    <span class="n">useJUnitPlatform</span><span class="o">()</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p>이라고 되어 있지만 우리는 JUnit4를 쓸것이기 때문에</p>

<div class="language-gradle highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">test</span> <span class="o">{</span>
    <span class="n">useJUnitPlatform</span><span class="o">{</span>
        <span class="n">includeEngines</span> <span class="s1">'junit-vintage'</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p>이렇게 변경해준다.</p>

<p>그리고 깃허브랑 연동을 하기 위해서 윈도우일 경우 <span style="color:#7EDBFF; font-weight:bold">[Ctrl+shift+A]</span> 맥일 경우 <span style="color:#7EDBFF; font-weight:bold">[Command+Shift+A]</span>를 사용해 Action 검색창을 열어 <span style="color:orange; font-weight:bold">share project on github</span>을 검색한다.</p>

<p><br /></p>

<p><img src="/images/SpringBoot/ImplementingWebServiceWithSpringBootAndAWS-1/2021-08-13-16-22-49.png" alt="" /></p>

<p><br /></p>

<p><img src="/images/SpringBoot/ImplementingWebServiceWithSpringBootAndAWS-1/2021-08-13-16-24-13.png" alt="" /></p>

<p><br /></p>

<p><img src="/images/SpringBoot/ImplementingWebServiceWithSpringBootAndAWS-1/2021-08-13-16-24-37.png" alt="" /></p>

<p><br /></p>

<p>위 사진에서 <strong>Add</strong>를 클릭한다.</p>

<p><br /></p>

<p>자 이제 불필요한 파일이 올라가는 것을 방지하기 위해서 <strong>.gitignore</strong>를 구성해야 한다.</p>

<p><br /></p>

<p><strong>.gitignore</strong></p>

<pre><code class="language-github">HELP.md
.gradle
build/
!gradle/wrapper/gradle-wrapper.jar
!**/src/main/**/build/
!**/src/test/**/build/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache
bin/
!**/src/main/**/bin/
!**/src/test/**/bin/

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr
out/
!**/src/main/**/out/
!**/src/test/**/out/

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/

### VS Code ###
.vscode/

</code></pre>

<p><br /></p>

<p>위는 그냥 디폴트로 작성이 되어 있는 그대로 나둔다. 중요한 것은</p>

<ul>
  <li>.gradle</li>
</ul>

:ET