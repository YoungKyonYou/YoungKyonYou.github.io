I"25<p><br /><br /></p>

<p><em><strong>오늘의 나보다 성장한 내일의 나를 위해…</strong></em></p>

<p><br /></p>

<p><br /><br /></p>

<style>
.containercoffee {
  width: 300px;
  height: 280px;
  position: relative;
  top: calc(50% - 140px);
  left: calc(50% - 150px);
}
.coffee-header {
  width: 100%;
  height: 80px;
  position: absolute;
  top: 0;
  left: 0;
  background-color: #ddcfcc;
  border-radius: 10px;
}
.coffee-header__buttons {
  width: 25px;
  height: 25px;
  position: absolute;
  top: 25px;
  background-color: #282323;
  border-radius: 50%;
}
.coffee-header__buttons::after {
  content: "";
  width: 8px;
  height: 8px;
  position: absolute;
  bottom: -8px;
  left: calc(50% - 4px);
  background-color: #615e5e;
}
.coffee-header__button-one {
  left: 15px;
}
.coffee-header__button-two {
  left: 50px;
}
.coffee-header__display {
  width: 50px;
  height: 50px;
  position: absolute;
  top: calc(50% - 25px);
  left: calc(50% - 25px);
  border-radius: 50%;
  background-color: #9acfc5;
  border: 5px solid #43beae;
  box-sizing: border-box;
}
.coffee-header__details {
  width: 8px;
  height: 20px;
  position: absolute;
  top: 10px;
  right: 10px;
  background-color: #9b9091;
  box-shadow: -12px 0 0 #9b9091, -24px 0 0 #9b9091;
}
.coffee-medium {
  width: 90%;
  height: 160px;
  position: absolute;
  top: 80px;
  left: calc(50% - 45%);
  background-color: #bcb0af;
}
.coffee-medium:before {
  content: "";
  width: 90%;
  height: 100px;
  background-color: #776f6e;
  position: absolute;
  bottom: 0;
  left: calc(50% - 45%);
  border-radius: 20px 20px 0 0;
}
.coffe-medium__exit {
  width: 60px;
  height: 20px;
  position: absolute;
  top: 0;
  left: calc(50% - 30px);
  background-color: #231f20;
}
.coffe-medium__exit::before {
  content: "";
  width: 50px;
  height: 20px;
  border-radius: 0 0 50% 50%;
  position: absolute;
  bottom: -20px;
  left: calc(50% - 25px);
  background-color: #231f20;
}
.coffe-medium__exit::after {
  content: "";
  width: 10px;
  height: 10px;
  position: absolute;
  bottom: -30px;
  left: calc(50% - 5px);
  background-color: #231f20;
}
.coffee-medium__arm {
  width: 70px;
  height: 20px;
  position: absolute;
  top: 15px;
  right: 25px;
  background-color: #231f20;
}
.coffee-medium__arm::before {
  content: "";
  width: 15px;
  height: 5px;
  position: absolute;
  top: 7px;
  left: -15px;
  background-color: #9e9495;
}
.coffee-medium__cup {
  width: 80px;
  height: 47px;
  position: absolute;
  bottom: 0;
  left: calc(50% - 40px);
  background-color: #FFF;
  border-radius: 0 0 70px 70px / 0 0 110px 110px;
}
.coffee-medium__cup::after {
  content: "";
  width: 20px;
  height: 20px;
  position: absolute;
  top: 6px;
  right: -13px;
  border: 5px solid #FFF;
  border-radius: 50%;
}
@keyframes liquid {
  0% {
    height: 0px;  
    opacity: 1;
  }
  5% {
    height: 0px;  
    opacity: 1;
  }
  20% {
    height: 62px;  
    opacity: 1;
  }
  95% {
    height: 62px;
    opacity: 1;
  }
  100% {
    height: 62px;
    opacity: 0;
  }
}
.coffee-medium__liquid {
  width: 6px;
  height: 63px;
  opacity: 0;
  position: absolute;
  top: 50px;
  left: calc(50% - 3px);
  background-color: #74372b;
  animation: liquid 4s 4s linear infinite;
}
.coffee-medium__smoke {
  width: 8px;
  height: 20px;
  position: absolute;  
  border-radius: 5px;
  background-color: #b3aeae;
}
@keyframes smokeOne {
  0% {
    bottom: 20px;
    opacity: 0;
  }
  40% {
    bottom: 50px;
    opacity: .5;
  }
  80% {
    bottom: 80px;
    opacity: .3;
  }
  100% {
    bottom: 80px;
    opacity: 0;
  }
}
@keyframes smokeTwo {
  0% {
    bottom: 40px;
    opacity: 0;
  }
  40% {
    bottom: 70px;
    opacity: .5;
  }
  80% {
    bottom: 80px;
    opacity: .3;
  }
  100% {
    bottom: 80px;
    opacity: 0;
  }
}
.coffee-medium__smoke-one {
  opacity: 0;
  bottom: 50px;
  left: 102px;
  animation: smokeOne 3s 4s linear infinite;
}
.coffee-medium__smoke-two {
  opacity: 0;
  bottom: 70px;
  left: 118px;
  animation: smokeTwo 3s 5s linear infinite;
}
.coffee-medium__smoke-three {
  opacity: 0;
  bottom: 65px;
  right: 118px;
  animation: smokeTwo 3s 6s linear infinite;
}
.coffee-medium__smoke-for {
  opacity: 0;
  bottom: 50px;
  right: 102px;
  animation: smokeOne 3s 5s linear infinite;
}
.coffee-footer {
  width: 95%;
  height: 15px;
  position: absolute;
  bottom: 25px;
  left: calc(50% - 47.5%);
  background-color: #41bdad;
  border-radius: 10px;
}
.coffee-footer::after {
  content: "";
  width: 106%;
  height: 26px;
  position: absolute;
  bottom: -25px;
  left: -8px;
  background-color: #000;
}
</style>

<div class="containercoffee">
    <div class="coffee-header">
      <div class="coffee-header__buttons coffee-header__button-one"></div>
      <div class="coffee-header__buttons coffee-header__button-two"></div>
      <div class="coffee-header__display"></div>
      <div class="coffee-header__details"></div>
    </div>
    <div class="coffee-medium">
      <div class="coffe-medium__exit"></div>
      <div class="coffee-medium__arm"></div>
      <div class="coffee-medium__liquid"></div>
      <div class="coffee-medium__smoke coffee-medium__smoke-one"></div>
      <div class="coffee-medium__smoke coffee-medium__smoke-two"></div>
      <div class="coffee-medium__smoke coffee-medium__smoke-three"></div>
      <div class="coffee-medium__smoke coffee-medium__smoke-for"></div>
      <div class="coffee-medium__cup"></div>
    </div>
    <div class="coffee-footer"></div>
</div>

<p><br /><br /><br /><br /><br /><br /><br /><br /></p>

<p><br /></p>

<h3 style="color:#107896;  font-weight:bold">
<img class="emoji" title=":pushpin:" alt=":pushpin:" src="https://github.githubassets.com/images/icons/emoji/unicode/1f4cc.png" height="30" width="30" /> Static Pages와 Dynamic Pages
</h3>

<p><br /></p>

<p><img src="/images/Interview/post16/2022-01-13-11-50-46.png?style=centerme" alt="" /></p>

<p><br /></p>

<h4 style="color:#43ABC9;  font-weight:bold">
<img class="emoji" title=":pushpin:" alt=":pushpin:" src="https://github.githubassets.com/images/icons/emoji/unicode/1f50e.png" height="20" width="20" /> Static Pages
</h4>

<ul>
  <li>Web Server는 파일 경로 이름을 받아 경로와 일치하는 <strong>file contents</strong>를 반환한다.</li>
  <li>항상 <strong>동일한 페이지</strong>를 반환한다.</li>
  <li>서버에 <strong>미리 저장된 파일</strong>이 그대로 전달되는 웹 페이지</li>
  <li>Ex) <strong>image, html,css, javascript 파일</strong>과 같이 컴퓨터에 저장되어 있는 파일들</li>
</ul>

<p><br /></p>

<h4 style="color:#43ABC9;  font-weight:bold">
<img class="emoji" title=":pushpin:" alt=":pushpin:" src="https://github.githubassets.com/images/icons/emoji/unicode/1f50e.png" height="20" width="20" /> Dynamic Pages
</h4>

<ul>
  <li>인자의 내용에 맞게 <strong>동적인 contents를 반환</strong>한다.</li>
  <li>요청에 대해서 <strong>각각 다른 내용</strong>을 보여준다.</li>
  <li>개발자는 <strong>Servlet에 doGet()</strong>을 구현한다.</li>
  <li>연결된 데이터베이스의 정보에 액세스하여 <strong>사용자의 요구에 응답</strong>하고 관련 정보를 제공한다.</li>
  <li>Ex) <strong>Servlet, JSP, ASP, PHP</strong> 등</li>
</ul>

<p><br /></p>

<h3 style="color:#107896;  font-weight:bold">
<img class="emoji" title=":pushpin:" alt=":pushpin:" src="https://github.githubassets.com/images/icons/emoji/unicode/1f4cc.png" height="30" width="30" /> Web Server
</h3>

<p><br /></p>

<p><img src="/images/Interview/post16/2022-01-13-11-50-59.png?style=centerme" alt="" /></p>

<p><br /></p>

<h4 style="color:#43ABC9;  font-weight:bold">
<img class="emoji" title=":pushpin:" alt=":pushpin:" src="https://github.githubassets.com/images/icons/emoji/unicode/1f50e.png" height="20" width="20" /> Web Server의 개념
</h4>

<p>소프트웨어와 하드웨어로 구분한다.</p>

<ul>
  <li><strong>1) 하드웨어</strong>
    <ul>
      <li>Web 서버가 설치되어 있는 컴퓨터</li>
    </ul>
  </li>
  <li><strong>2) 소프트웨어</strong>
    <ul>
      <li>웹 브라우저 클라이언트로부터 HTTP 요청을 받아 <strong>정적인 컨텐츠(.html .jpeg .css 등)</strong>를 제공하는 컴퓨터 프로그램</li>
    </ul>
  </li>
</ul>

<h3 style="color:#107896;  font-weight:bold">
<img class="emoji" title=":pushpin:" alt=":pushpin:" src="https://github.githubassets.com/images/icons/emoji/unicode/1f4cc.png" height="30" width="30" /> Web Server의 기능
</h3>

<p><br /></p>

<ul>
  <li><strong>HTTP 프로토콜을 기반으로 하여 클라이언트(웹 브라우저 또는 웹 크롤러)의 요청을 서비스 하는 기능</strong>을 담당한다.</li>
  <li>요청에 따라 아래의 두 가지 기능 중 적절하게 선택하여 수행한다.</li>
</ul>

<p><br /></p>

<h4 style="color:#43ABC9;  font-weight:bold">
<img class="emoji" title=":pushpin:" alt=":pushpin:" src="https://github.githubassets.com/images/icons/emoji/unicode/1f50e.png" height="20" width="20" /> 기능 1)
</h4>

<ul>
  <li>정적인 컨텐츠 제공</li>
  <li>WAS를 거치지 않고 바로 자원을 제공한다.</li>
</ul>

<p><br /></p>

<h4 style="color:#43ABC9;  font-weight:bold">
<img class="emoji" title=":pushpin:" alt=":pushpin:" src="https://github.githubassets.com/images/icons/emoji/unicode/1f50e.png" height="20" width="20" /> 기능 2)
</h4>

<ul>
  <li>동적인 컨텐츠 제공을 위한 요청 전달</li>
  <li>클라이언트의 요청(Request)을 WAS에 보내고, WAS가 처리한 결과를 클라이언트에게 전달(응답, Response)한다.</li>
  <li>클라이언트는 일반적으로 웹 브라우저를 의미한다.</li>
</ul>

<p><br /></p>

<h4 style="color:#43ABC9;  font-weight:bold">
<img class="emoji" title=":pushpin:" alt=":pushpin:" src="https://github.githubassets.com/images/icons/emoji/unicode/1f50e.png" height="20" width="20" /> Web Server의 예
</h4>

<ul>
  <li>Ex) <strong>Apache Server, Nginx, IIS(Windows 전용 Web 서버) 등</strong></li>
</ul>

<p><br /></p>

<h3 style="color:#107896;  font-weight:bold">
<img class="emoji" title=":pushpin:" alt=":pushpin:" src="https://github.githubassets.com/images/icons/emoji/unicode/1f4cc.png" height="30" width="30" /> WAS(Web Application Server)
</h3>

<p><br /></p>

<h4 style="color:#43ABC9;  font-weight:bold">
<img class="emoji" title=":pushpin:" alt=":pushpin:" src="https://github.githubassets.com/images/icons/emoji/unicode/1f50e.png" height="20" width="20" /> WAS의 개념
</h4>

<ul>
  <li><strong>DB 조회나 다양한 로직 처리를 요구하는 동적인 컨텐츠를 제공</strong>하기 위해 만들어진 Application Server</li>
  <li>HTTP를 통해 컴퓨터나 장치에 애플리케이션을 수행해주는 미들웨어(소프트웨어 엔진)이다.</li>
  <li><strong>“웹 컨테이너(Web Container)”</strong> 혹은 <strong>“서블릿 컨테이너(Servlet Container)”</strong>라고도 불린다.
    <ul>
      <li>Container란 JSP, Servlet을 실행시킬 수 있는 소프트웨어를 말한다.</li>
      <li>즉, WAS는 JSP, Servlet 구동 환경을 제공한다.</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h4 style="color:#43ABC9;  font-weight:bold">
<img class="emoji" title=":pushpin:" alt=":pushpin:" src="https://github.githubassets.com/images/icons/emoji/unicode/1f50e.png" height="20" width="20" /> WAS의 역할
</h4>

<ul>
  <li><strong>WAS = Web Server + Web Container</strong></li>
  <li>Web Server 기능들을 구조적으로 분리하여 처리하고자 하는 목적으로 제시되었다.
    <ul>
      <li><strong>분산 트랜잭션, 보안, 메시징, 쓰레드 처리</strong> 등의 기능을 처리하는 분산 환경에서 사용된다.</li>
      <li>주로 <strong>DB 서버</strong>*와 같이 수행된다.</li>
    </ul>
  </li>
  <li>현재는 WAS가 가지고 있는 <strong>Web Server</strong>도 정적인 컨텐츠를 처리하는 데 있어서 <strong>성능상 큰 차이가 없다</strong></li>
</ul>

<p><br /></p>

<h3 style="color:#107896;  font-weight:bold">
<img class="emoji" title=":pushpin:" alt=":pushpin:" src="https://github.githubassets.com/images/icons/emoji/unicode/1f4cc.png" height="30" width="30" /> WAS의 주요 기능
</h3>

<p><br /></p>

<p><strong>1)</strong> 프로그램 실행 환경과 DB 접속 기능 제공
<strong>2)</strong> 여러 개의 트랜잭션(논리적인 작업 단위) 관리 기능
<strong>3)</strong> 업무를 처리하는 비즈니스 로직 수행</p>

<p><br /></p>

<h3 style="color:#107896;  font-weight:bold">
<img class="emoji" title=":pushpin:" alt=":pushpin:" src="https://github.githubassets.com/images/icons/emoji/unicode/1f4cc.png" height="30" width="30" /> WAS의 예
</h3>

<p><br /></p>

<ul>
  <li>Ex) <strong>Tomcat, JBoss, Jeus, Web Sphere 등</strong></li>
</ul>

<p><br /></p>

<h3 style="color:#107896;  font-weight:bold">
<img class="emoji" title=":pushpin:" alt=":pushpin:" src="https://github.githubassets.com/images/icons/emoji/unicode/1f4cc.png" height="30" width="30" /> Web Server와 WAS를 구분하는 이유
</h3>

<p><br /></p>

<p><img src="/images/Interview/post16/2022-01-13-11-57-13.png?style=centerme" alt="" /></p>

<p><br /></p>

<h4 style="color:#43ABC9;  font-weight:bold">
<img class="emoji" title=":pushpin:" alt=":pushpin:" src="https://github.githubassets.com/images/icons/emoji/unicode/1f50e.png" height="20" width="20" /> Web Server가 필요한 이유?
</h4>

<ul>
  <li>클라이언트(웹 브라우저)에 **이미지 파일(정적 컨텐츠)을 보내는 과정을 생각해보자.</li>
</ul>
:ET