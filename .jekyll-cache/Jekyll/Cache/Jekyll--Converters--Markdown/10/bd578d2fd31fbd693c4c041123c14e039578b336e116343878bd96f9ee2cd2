I"IZ<p><br /><br /></p>

<p><em><strong>오늘의 나보다 성장한 내일의 나를 위해…</strong></em></p>

<p><br /></p>

<p><br /><br /></p>

<style>
.containercoffee {
  width: 300px;
  height: 280px;
  position: relative;
  top: calc(50% - 140px);
  left: calc(50% - 150px);
}
.coffee-header {
  width: 100%;
  height: 80px;
  position: absolute;
  top: 0;
  left: 0;
  background-color: #ddcfcc;
  border-radius: 10px;
}
.coffee-header__buttons {
  width: 25px;
  height: 25px;
  position: absolute;
  top: 25px;
  background-color: #282323;
  border-radius: 50%;
}
.coffee-header__buttons::after {
  content: "";
  width: 8px;
  height: 8px;
  position: absolute;
  bottom: -8px;
  left: calc(50% - 4px);
  background-color: #615e5e;
}
.coffee-header__button-one {
  left: 15px;
}
.coffee-header__button-two {
  left: 50px;
}
.coffee-header__display {
  width: 50px;
  height: 50px;
  position: absolute;
  top: calc(50% - 25px);
  left: calc(50% - 25px);
  border-radius: 50%;
  background-color: #9acfc5;
  border: 5px solid #43beae;
  box-sizing: border-box;
}
.coffee-header__details {
  width: 8px;
  height: 20px;
  position: absolute;
  top: 10px;
  right: 10px;
  background-color: #9b9091;
  box-shadow: -12px 0 0 #9b9091, -24px 0 0 #9b9091;
}
.coffee-medium {
  width: 90%;
  height: 160px;
  position: absolute;
  top: 80px;
  left: calc(50% - 45%);
  background-color: #bcb0af;
}
.coffee-medium:before {
  content: "";
  width: 90%;
  height: 100px;
  background-color: #776f6e;
  position: absolute;
  bottom: 0;
  left: calc(50% - 45%);
  border-radius: 20px 20px 0 0;
}
.coffe-medium__exit {
  width: 60px;
  height: 20px;
  position: absolute;
  top: 0;
  left: calc(50% - 30px);
  background-color: #231f20;
}
.coffe-medium__exit::before {
  content: "";
  width: 50px;
  height: 20px;
  border-radius: 0 0 50% 50%;
  position: absolute;
  bottom: -20px;
  left: calc(50% - 25px);
  background-color: #231f20;
}
.coffe-medium__exit::after {
  content: "";
  width: 10px;
  height: 10px;
  position: absolute;
  bottom: -30px;
  left: calc(50% - 5px);
  background-color: #231f20;
}
.coffee-medium__arm {
  width: 70px;
  height: 20px;
  position: absolute;
  top: 15px;
  right: 25px;
  background-color: #231f20;
}
.coffee-medium__arm::before {
  content: "";
  width: 15px;
  height: 5px;
  position: absolute;
  top: 7px;
  left: -15px;
  background-color: #9e9495;
}
.coffee-medium__cup {
  width: 80px;
  height: 47px;
  position: absolute;
  bottom: 0;
  left: calc(50% - 40px);
  background-color: #FFF;
  border-radius: 0 0 70px 70px / 0 0 110px 110px;
}
.coffee-medium__cup::after {
  content: "";
  width: 20px;
  height: 20px;
  position: absolute;
  top: 6px;
  right: -13px;
  border: 5px solid #FFF;
  border-radius: 50%;
}
@keyframes liquid {
  0% {
    height: 0px;  
    opacity: 1;
  }
  5% {
    height: 0px;  
    opacity: 1;
  }
  20% {
    height: 62px;  
    opacity: 1;
  }
  95% {
    height: 62px;
    opacity: 1;
  }
  100% {
    height: 62px;
    opacity: 0;
  }
}
.coffee-medium__liquid {
  width: 6px;
  height: 63px;
  opacity: 0;
  position: absolute;
  top: 50px;
  left: calc(50% - 3px);
  background-color: #74372b;
  animation: liquid 4s 4s linear infinite;
}
.coffee-medium__smoke {
  width: 8px;
  height: 20px;
  position: absolute;  
  border-radius: 5px;
  background-color: #b3aeae;
}
@keyframes smokeOne {
  0% {
    bottom: 20px;
    opacity: 0;
  }
  40% {
    bottom: 50px;
    opacity: .5;
  }
  80% {
    bottom: 80px;
    opacity: .3;
  }
  100% {
    bottom: 80px;
    opacity: 0;
  }
}
@keyframes smokeTwo {
  0% {
    bottom: 40px;
    opacity: 0;
  }
  40% {
    bottom: 70px;
    opacity: .5;
  }
  80% {
    bottom: 80px;
    opacity: .3;
  }
  100% {
    bottom: 80px;
    opacity: 0;
  }
}
.coffee-medium__smoke-one {
  opacity: 0;
  bottom: 50px;
  left: 102px;
  animation: smokeOne 3s 4s linear infinite;
}
.coffee-medium__smoke-two {
  opacity: 0;
  bottom: 70px;
  left: 118px;
  animation: smokeTwo 3s 5s linear infinite;
}
.coffee-medium__smoke-three {
  opacity: 0;
  bottom: 65px;
  right: 118px;
  animation: smokeTwo 3s 6s linear infinite;
}
.coffee-medium__smoke-for {
  opacity: 0;
  bottom: 50px;
  right: 102px;
  animation: smokeOne 3s 5s linear infinite;
}
.coffee-footer {
  width: 95%;
  height: 15px;
  position: absolute;
  bottom: 25px;
  left: calc(50% - 47.5%);
  background-color: #41bdad;
  border-radius: 10px;
}
.coffee-footer::after {
  content: "";
  width: 106%;
  height: 26px;
  position: absolute;
  bottom: -25px;
  left: -8px;
  background-color: #000;
}
</style>

<div class="containercoffee">
    <div class="coffee-header">
      <div class="coffee-header__buttons coffee-header__button-one"></div>
      <div class="coffee-header__buttons coffee-header__button-two"></div>
      <div class="coffee-header__display"></div>
      <div class="coffee-header__details"></div>
    </div>
    <div class="coffee-medium">
      <div class="coffe-medium__exit"></div>
      <div class="coffee-medium__arm"></div>
      <div class="coffee-medium__liquid"></div>
      <div class="coffee-medium__smoke coffee-medium__smoke-one"></div>
      <div class="coffee-medium__smoke coffee-medium__smoke-two"></div>
      <div class="coffee-medium__smoke coffee-medium__smoke-three"></div>
      <div class="coffee-medium__smoke coffee-medium__smoke-for"></div>
      <div class="coffee-medium__cup"></div>
    </div>
    <div class="coffee-footer"></div>
</div>

<p><br /><br /><br /><br /><br /><br /><br /><br /></p>

<p><br /></p>

<p>다음 당근 페이 질문은 아래와 같다.</p>

<p><span style="color:#107896; font-weight:bold">Q: 어떤 버전의 자바를 쓰시고 계신가요?</span></p>

<p><span style="color:#85144b; font-weight:bold">A: java 11 버전을 쓰고 있습니다.</span></p>

<p><span style="color:#107896; font-weight:bold">Q: java 11 버전에 추가된 것엔 어떤 것들이 있나요?</span></p>

<p><br /></p>

<p>참 당혹스러운 질문이다… 사실 팀이랑 버젼을 맞추기 위해 LTS 버젼으로 맞춘건데 java 11에는 뭐가 추가됐냐니… 그래도 java 8에는 뭐가 추가 됐는지는 대충 안다. Nashorn, Stream API, Lambda 가 추가된 걸로 아는데 java 11은 아무것도 모르겠다.. 그래서 이번 기회에 java 11에서 추가된 것을 적어보자.</p>

<p><br /></p>

<p><strong>Java 11</strong>은 <strong>Java 8</strong> 이후 첫 번째 <span style="background: rgb(251,243,219)">LTS (장기 지원) 릴리스</span>이다. Oracle도 2019년 1월 Java 8 지원을 중단 했다. 결과적으로 많은 사람들이 Java 11로 업그레이드하는 결과를 가져왔다.</p>

<p><br /></p>

<h3 style="color:#107896;  font-weight:bold">
<img class="emoji" title=":pushpin:" alt=":pushpin:" src="https://github.githubassets.com/images/icons/emoji/unicode/1f4cc.png" height="30" width="30" /> 개발자 측면
</h3>

<p><br /></p>

<h4 style="color:#43ABC9;  font-weight:bold">
<img class="emoji" title=":pushpin:" alt=":pushpin:" src="https://github.githubassets.com/images/icons/emoji/unicode/1f50e.png" height="20" width="20" /> 새로운 문자열 메서드
</h4>

<p><br /></p>

<p><strong>Java 11은 몇 가지 새로운 메서드를 String 클래스에 추가한다</strong></p>

<ul>
  <li><strong>isBlank():</strong> 문자열이 비어있거나 공백만 포함되어 있을 경우 true를 반환한다. 즉, String.trim().isEmpty() 호출 결과와 같다.</li>
</ul>

<p><br /></p>

<ul>
  <li><strong>lines():</strong> 문자열을 라인 단위로 쪼개는 스트림을 반환한다.</li>
</ul>

<p><strong>Example</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.stream.Stream</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span>
<span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
    <span class="o">{</span>
        <span class="k">try</span>
        <span class="o">{</span>
            <span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="s">"A \n B \n C \n D"</span><span class="o">;</span>

            <span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">lines</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">lines</span><span class="o">();</span>

            <span class="n">lines</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span>
        <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p><strong>결과</strong></p>

<p><img src="/images/Interview/post9/2021-12-21-21-57-18.png?style=centerme" alt="" /></p>

<p><br /></p>

<ul>
  <li><strong>repeat(n):</strong> 지정된 수 만큼 문자열을 반복하여 붙여 반환한다</li>
</ul>

<p><br /></p>

<p><strong>Example</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="s">"ABC"</span><span class="o">;</span>
<span class="nc">String</span> <span class="n">repeated</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">repeat</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>	<span class="c1">// "ABCABCABC"</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li><strong>strip:</strong> 문자열 앞, 뒤의 공백 제거</li>
  <li><strong>stripLeading():</strong> 문자열 앞의 공백 제거</li>
  <li><strong>stripgTrailing():</strong> 문자열 뒤의 공백 제거</li>
</ul>

<p><br /></p>

<p>여기서 strip이 trime과 다를 게 없다고 생각할 수 있으나 <strong>trim</strong>은 ‘\u0020’ 이하의 공백들만 제거한다. <strong>strip</strong>은 유니코드의 공백들을 모두 제거한다.</p>

<p><br /></p>

<p>사실 유니코드에는 우리가 일반적으로 많이 사용하는 스페이스(‘\u0020’), 탭(‘\u0009) 등 외에도 더 많은 종류의 공백 문자들이 있습니다. strip() 메소드는 trim() 보다 더 많은 종류의 공백을 제거할 수 있습니다. 보통 whitespace라고 하면 간단하게 tab 문자(U+0009), 공백(U+0020), CR(U+000D), LF(U+000A) 등이 있다.</p>

<p>라인피드(LF : Line Feed) =&gt; 현재 위치에서 바로 아래로 이동</p>

<p>캐리지리턴(CR: Carriage return) =&gt; 커서의 위치를 앞으로 이동</p>

<p><br /></p>

<link href="http://fonts.googleapis.com/earlyaccess/hanna.css" rel="stylesheet" />

<div style="background: #eee;
  box-shadow: 0 8px 8px -4px lightblue; font-family: 'Hanna', sans-serif;; padding: 40px;">

노파심에 말해본다. 자바에서 String.format()를 쓸 때 줄바꿈을 하기 위해 \n으로 쓰게 되는데 이렇게 쓰면 어떤 OS에서는 제대로 작동하지 않을 수가 있다. 예를 들어 윈도우/DOS 에서는 CRLF 조합으로 줄바꿈을 정의하는 반면에 Unix/Linux/C는 LF 만으로 줄바꿈을 정의한다. 그럼으로 \n으로 줄바꿈을 하는 것보다 System.lineSeparator()를 쓰는 것을 추천한다.</div>

<p><br /></p>

<p><strong>Example</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StringSpace</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 앞뒤로 공백이 있는 문자열</span>
    <span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="s">"\u2003Hi Anna!\u2003"</span><span class="o">;</span>
    <span class="c1">// 공백 제거</span>
    <span class="nc">String</span> <span class="n">trimStr</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">trim</span><span class="o">();</span>
    <span class="nc">String</span> <span class="n">stripStr</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">strip</span><span class="o">();</span>
    <span class="c1">// 공백 제거 문자열 출력</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"원본 문자열 : '"</span> <span class="o">+</span> <span class="n">str</span> <span class="o">+</span> <span class="s">"'"</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"trim 문자열 : '"</span> <span class="o">+</span> <span class="n">trimStr</span> <span class="o">+</span> <span class="s">"'"</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"strip 문자열 : '"</span> <span class="o">+</span> <span class="n">stripStr</span> <span class="o">+</span> <span class="s">"'"</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p><strong>결과</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">원본</span> <span class="n">문자열</span> <span class="o">:</span> <span class="err">' </span><span class="nc">Hi</span> <span class="nc">Anna</span><span class="o">!</span><span class="err"> '</span>
<span class="n">trim</span> <span class="n">문자열</span> <span class="o">:</span> <span class="err">' </span><span class="nc">Hi</span> <span class="nc">Anna</span><span class="o">!</span><span class="err"> '</span>
<span class="n">strip</span> <span class="n">문자열</span> <span class="o">:</span> <span class="err">'</span><span class="nc">Hi</span> <span class="nc">Anna</span><span class="o">!</span><span class="err">'</span>
</code></pre></div></div>

<p><br /></p>

<h4 id="1-2-새-파일-방법">1-2. 새 파일 방법</h4>

<p>이제 파일에서 String을 읽고 쓰는 것이 더 쉬워졌다. File 클래스에서 새로운 readString 및 writeString 정적 메서드를 사용할 수 있기 때문이다.</p>

<p><br /></p>

<p><strong>Example</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Path</span> <span class="n">filePath</span> <span class="o">=</span> <span class="nc">Files</span><span class="o">.</span><span class="na">writeString</span><span class="o">(</span><span class="nc">Files</span><span class="o">.</span><span class="na">createTempFile</span><span class="o">(</span><span class="n">tempDir</span><span class="o">,</span> <span class="s">"demo"</span><span class="o">,</span> <span class="s">".txt"</span><span class="o">),</span> <span class="s">"Sample text"</span><span class="o">);</span>
<span class="nc">String</span> <span class="n">fileContent</span> <span class="o">=</span> <span class="nc">Files</span><span class="o">.</span><span class="na">readString</span><span class="o">(</span><span class="n">filePath</span><span class="o">);</span>
<span class="n">assertThat</span><span class="o">(</span><span class="n">fileContent</span><span class="o">).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="s">"Sample text"</span><span class="o">);</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="1-3-컬렉션을-배열로-수집하기">1-3. 컬렉션을 배열로 수집하기</h3>

<p>java.util.Collection은 새로운 디폴트 메서드로 toArray가 생겼다. 이것은 컬렉션을 배열로 쉽게 변환시켜 준다.</p>

<p><br /></p>

<p><strong>Example</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span> <span class="n">sampleList</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"Java"</span><span class="o">,</span> <span class="s">"Kotlin"</span><span class="o">);</span>
<span class="nc">String</span><span class="o">[]</span> <span class="n">sampleArray</span> <span class="o">=</span> <span class="n">sampleList</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="nc">String</span><span class="o">[]::</span><span class="k">new</span><span class="o">);</span>
<span class="n">assertThat</span><span class="o">(</span><span class="n">sampleArray</span><span class="o">).</span><span class="na">containsExactly</span><span class="o">(</span><span class="s">"Java"</span><span class="o">,</span> <span class="s">"Kotlin"</span><span class="o">);</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="1-4-not-술어-메서드">1-4. Not 술어 메서드</h3>

<p><strong>Predicate</strong> 인터페이스에 정적 not 메서드가 추가되었다. negate 메서드와 같이 기존 술어를 부정하는데 사용할 수 있다.</p>

<p><strong>Example</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">sampleList</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"Java"</span><span class="o">,</span> <span class="s">"\n \n"</span><span class="o">,</span> <span class="s">"Kotlin"</span><span class="o">,</span> <span class="s">" "</span><span class="o">);</span>
<span class="nc">List</span> <span class="n">withoutBlanks</span> <span class="o">=</span> <span class="n">sampleList</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
  <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="nc">Predicate</span><span class="o">.</span><span class="na">not</span><span class="o">(</span><span class="nl">String:</span><span class="o">:</span><span class="n">isBlank</span><span class="o">))</span>
  <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
<span class="n">assertThat</span><span class="o">(</span><span class="n">withoutBlanks</span><span class="o">).</span><span class="na">containsExactly</span><span class="o">(</span><span class="s">"Java"</span><span class="o">,</span> <span class="s">"Kotlin"</span><span class="o">);</span>
</code></pre></div></div>

<p>not (isBlank) 가 isBlank .negate () 보다 더 자연스럽게 읽는 반면 , 큰 장점은 not (String : isBlank) 와 같은 메소드 참조와 함께 not 을 사용할 수도 있다는 것 입니다.</p>

<p><br /></p>

<p>또 여러 가지 개발자 측면에서 바뀐 게 있지만 여기까지만 설명하고 다음으로 측면으로 넘어가보자. 추가적인 것은 이 <strong><a href="https://www.baeldung.com/java-11-new-features">링크</a></strong>를 참조한다.</p>

<p><br /></p>

<h2 id="2-성능-향상">2 성능 향상</h2>

<h3 id="2-1-새로운-가비지-컬렉터">2-1 새로운 가비지 컬렉터</h3>

<p><strong>ZGC:</strong> A Scalable Low-Latency Garbage Collector (Experimental)</p>

<p><br /></p>

<p>성능을 향상시킨 새로운 가비지 컬렉터이다. 메모리를 자동으로 정리해주는 GC는 자바의 장점 중 하나지만 GC가 동작할 때 JVM이 애플리케이션을 멈추기 때문에 어떻게 보면 단점이다. ZGC는 이 시간을 10ms 미만으로 줄이고 15% 이하의 성능 패널티를 목표로 한다.</p>

<h3 id="2-2-flight-recorder">2-2 Flight Recorder</h3>

<p>Flight Recorder는 자바 애플리케이션과 HotSpot JVM의 문제 해결을 위한 오버헤드가 낮은 데이터 수집 프레임워크이다.</p>

<h2 id="사라진-기능">사라진 기능</h2>

<p>사라진 기능도 간단하게 살펴보겠습니다.</p>

<ul>
  <li><strong>Java EE and CORBA Modules :</strong> 앞으로 EE 나 CORBA 모듈이 필요한 경우 명시적으로 의존을 추가해야 합니다.</li>
  <li><strong>Web Start :</strong> 특별한 대안 없이 삭제되었습니다.</li>
  <li><strong>Applets :</strong> 한동안 대부분 deprecated 되었다가 완전히 삭제되었습니다.</li>
  <li><strong>JavaFX :</strong> FX 라이브러리가 OpenJFX 프로젝트로 옮겨가면서 코어에서 삭제되었습니다.</li>
</ul>

<h2 id="기타">기타</h2>

<h3 id="tls-13">TLS 1.3</h3>

<p>TLS의 새로운 버전을 구현</p>

<h3 id="람다에서의-var-변수">람다에서의 var 변수</h3>

<p>자바 10에서 도입된 var 타입 추론을 업데이트</p>

<h3 id="새로운-표준-http-라이브러리">새로운 표준 HTTP 라이브러리</h3>

<p>HTTP Clinet(Standard). java.net.http 패키지의 새로운 모듈로 flow 기반의 HTTP/1.1과 HTTP/2를 지원합니다. 자바 9과 자바 10에서 사용되었던 jdk.incubator.http 패키지가 표준화되어 java.net.http 패키지로 추가되었습니다.</p>

<h3 id="nest-기반-접근-제어">Nest 기반 접근 제어</h3>

<p>Nest 는 접근 제어 컨텍스트로 논리적으로는 같은 클래스를 분리된 클래스로 컴파일할 수 있게 해줍니다. 그러면 다른 클래스의 private 멤버에 getter/setter 없이 바로 접근 가능합니다. 여러 클래스를 하나의 클래스처럼 묶어줄 수 있는 기술로 보입니다.</p>
:ET