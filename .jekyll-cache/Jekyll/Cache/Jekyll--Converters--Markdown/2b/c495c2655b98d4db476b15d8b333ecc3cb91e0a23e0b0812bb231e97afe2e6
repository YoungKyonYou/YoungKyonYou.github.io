I".B<p><br /><br /></p>

<p><em><strong>오늘의 나보다 성장한 내일의 나를 위해…</strong></em></p>

<p><br /></p>

<p><br /><br /></p>

<style>
.containercoffee {
  width: 300px;
  height: 280px;
  position: relative;
  top: calc(50% - 140px);
  left: calc(50% - 150px);
}
.coffee-header {
  width: 100%;
  height: 80px;
  position: absolute;
  top: 0;
  left: 0;
  background-color: #ddcfcc;
  border-radius: 10px;
}
.coffee-header__buttons {
  width: 25px;
  height: 25px;
  position: absolute;
  top: 25px;
  background-color: #282323;
  border-radius: 50%;
}
.coffee-header__buttons::after {
  content: "";
  width: 8px;
  height: 8px;
  position: absolute;
  bottom: -8px;
  left: calc(50% - 4px);
  background-color: #615e5e;
}
.coffee-header__button-one {
  left: 15px;
}
.coffee-header__button-two {
  left: 50px;
}
.coffee-header__display {
  width: 50px;
  height: 50px;
  position: absolute;
  top: calc(50% - 25px);
  left: calc(50% - 25px);
  border-radius: 50%;
  background-color: #9acfc5;
  border: 5px solid #43beae;
  box-sizing: border-box;
}
.coffee-header__details {
  width: 8px;
  height: 20px;
  position: absolute;
  top: 10px;
  right: 10px;
  background-color: #9b9091;
  box-shadow: -12px 0 0 #9b9091, -24px 0 0 #9b9091;
}
.coffee-medium {
  width: 90%;
  height: 160px;
  position: absolute;
  top: 80px;
  left: calc(50% - 45%);
  background-color: #bcb0af;
}
.coffee-medium:before {
  content: "";
  width: 90%;
  height: 100px;
  background-color: #776f6e;
  position: absolute;
  bottom: 0;
  left: calc(50% - 45%);
  border-radius: 20px 20px 0 0;
}
.coffe-medium__exit {
  width: 60px;
  height: 20px;
  position: absolute;
  top: 0;
  left: calc(50% - 30px);
  background-color: #231f20;
}
.coffe-medium__exit::before {
  content: "";
  width: 50px;
  height: 20px;
  border-radius: 0 0 50% 50%;
  position: absolute;
  bottom: -20px;
  left: calc(50% - 25px);
  background-color: #231f20;
}
.coffe-medium__exit::after {
  content: "";
  width: 10px;
  height: 10px;
  position: absolute;
  bottom: -30px;
  left: calc(50% - 5px);
  background-color: #231f20;
}
.coffee-medium__arm {
  width: 70px;
  height: 20px;
  position: absolute;
  top: 15px;
  right: 25px;
  background-color: #231f20;
}
.coffee-medium__arm::before {
  content: "";
  width: 15px;
  height: 5px;
  position: absolute;
  top: 7px;
  left: -15px;
  background-color: #9e9495;
}
.coffee-medium__cup {
  width: 80px;
  height: 47px;
  position: absolute;
  bottom: 0;
  left: calc(50% - 40px);
  background-color: #FFF;
  border-radius: 0 0 70px 70px / 0 0 110px 110px;
}
.coffee-medium__cup::after {
  content: "";
  width: 20px;
  height: 20px;
  position: absolute;
  top: 6px;
  right: -13px;
  border: 5px solid #FFF;
  border-radius: 50%;
}
@keyframes liquid {
  0% {
    height: 0px;  
    opacity: 1;
  }
  5% {
    height: 0px;  
    opacity: 1;
  }
  20% {
    height: 62px;  
    opacity: 1;
  }
  95% {
    height: 62px;
    opacity: 1;
  }
  100% {
    height: 62px;
    opacity: 0;
  }
}
.coffee-medium__liquid {
  width: 6px;
  height: 63px;
  opacity: 0;
  position: absolute;
  top: 50px;
  left: calc(50% - 3px);
  background-color: #74372b;
  animation: liquid 4s 4s linear infinite;
}
.coffee-medium__smoke {
  width: 8px;
  height: 20px;
  position: absolute;  
  border-radius: 5px;
  background-color: #b3aeae;
}
@keyframes smokeOne {
  0% {
    bottom: 20px;
    opacity: 0;
  }
  40% {
    bottom: 50px;
    opacity: .5;
  }
  80% {
    bottom: 80px;
    opacity: .3;
  }
  100% {
    bottom: 80px;
    opacity: 0;
  }
}
@keyframes smokeTwo {
  0% {
    bottom: 40px;
    opacity: 0;
  }
  40% {
    bottom: 70px;
    opacity: .5;
  }
  80% {
    bottom: 80px;
    opacity: .3;
  }
  100% {
    bottom: 80px;
    opacity: 0;
  }
}
.coffee-medium__smoke-one {
  opacity: 0;
  bottom: 50px;
  left: 102px;
  animation: smokeOne 3s 4s linear infinite;
}
.coffee-medium__smoke-two {
  opacity: 0;
  bottom: 70px;
  left: 118px;
  animation: smokeTwo 3s 5s linear infinite;
}
.coffee-medium__smoke-three {
  opacity: 0;
  bottom: 65px;
  right: 118px;
  animation: smokeTwo 3s 6s linear infinite;
}
.coffee-medium__smoke-for {
  opacity: 0;
  bottom: 50px;
  right: 102px;
  animation: smokeOne 3s 5s linear infinite;
}
.coffee-footer {
  width: 95%;
  height: 15px;
  position: absolute;
  bottom: 25px;
  left: calc(50% - 47.5%);
  background-color: #41bdad;
  border-radius: 10px;
}
.coffee-footer::after {
  content: "";
  width: 106%;
  height: 26px;
  position: absolute;
  bottom: -25px;
  left: -8px;
  background-color: #000;
}
</style>

<div class="containercoffee">
    <div class="coffee-header">
      <div class="coffee-header__buttons coffee-header__button-one"></div>
      <div class="coffee-header__buttons coffee-header__button-two"></div>
      <div class="coffee-header__display"></div>
      <div class="coffee-header__details"></div>
    </div>
    <div class="coffee-medium">
      <div class="coffe-medium__exit"></div>
      <div class="coffee-medium__arm"></div>
      <div class="coffee-medium__liquid"></div>
      <div class="coffee-medium__smoke coffee-medium__smoke-one"></div>
      <div class="coffee-medium__smoke coffee-medium__smoke-two"></div>
      <div class="coffee-medium__smoke coffee-medium__smoke-three"></div>
      <div class="coffee-medium__smoke coffee-medium__smoke-for"></div>
      <div class="coffee-medium__cup"></div>
    </div>
    <div class="coffee-footer"></div>
</div>

<p><br /><br /><br /><br /><br /><br /><br /><br /></p>

<p><br /></p>

<h2 style="color:#107896;  font-weight:bold">
<img class="emoji" title=":pushpin:" alt=":pushpin:" src="https://github.githubassets.com/images/icons/emoji/unicode/270f.png" height="30" width="30" /> Spring vs SpringBoot
</h2>

<p><br /></p>

<h3 style="color:#107896;  font-weight:bold">
<img class="emoji" title=":pushpin:" alt=":pushpin:" src="https://github.githubassets.com/images/icons/emoji/unicode/1f4cc.png" height="30" width="30" /> Spring의 특징
</h3>

<p><br /></p>

<ul>
  <li>제어의 역전(IoC)</li>
  <li>의존선 주입(DI)</li>
  <li>관점 지향 프로그래밍(AOP)</li>
</ul>

<p><br /></p>

<p>Spring의 3가지 특징은 위에 명시된 것과 같다. 이런 특징으로 인해 <span style="background: rgb(251,243,219)">결합도를 낮춰(Loose Coupling)</span> 유연한 개발이 가능해졌다.</p>

<p>간단하게 살펴보도록 하자 (<strong><a href="https://youngkyonyou.github.io/interview/2022/01/01/Interview-interview-19.html">자세한 내용 - 링크</a></strong> )</p>

<p><br /></p>

<h4 style="color:#43ABC9;  font-weight:bold">
<img class="emoji" title=":pushpin:" alt=":pushpin:" src="https://github.githubassets.com/images/icons/emoji/unicode/1f50e.png" height="20" width="20" /> 제어의 역전(IoC)
</h4>

<p><br /></p>

<p>제어의 역전 패턴이 인기를 끄는 이유는 <span style="background: rgb(251,243,219)">생명주기에 대한 제어권이 웹 애플리케이션 컨테이너에 있기 때문이다.</span></p>

<p>즉, 사용자가 직접 new 연산자를 통해 인스턴스를 생성하고 메서드를 호출하는 일련의 생명주기에 대한 작업들을 스프링에 <span style="background: rgb(251,243,219)">위임</span>할 수 있게 되는 것이다.</p>

<p>IoC는 직관적이지 못하기 때문에 IoC를 구현하는 방법으로는 <strong>의존성 주입(DI)</strong>가 있다.</p>

<p><br /></p>

<h4 style="color:#43ABC9;  font-weight:bold">
<img class="emoji" title=":pushpin:" alt=":pushpin:" src="https://github.githubassets.com/images/icons/emoji/unicode/1f50e.png" height="20" width="20" /> 의존성 주입(DI: Dependency Injection)
</h4>

<p><br /></p>

<p>객체 사이에 필요한 의존 관계에 대해서 스프링 컨테이너가 자동으로 연결해 주는 것을 말한다.</p>

<p>스프링 컨테이너는 DI를 이용하여 빈(Bean) 객체를 관리하며 스프링 컨테이너에 클래스를 등록하면 스프링이 클래스의 인스턴스를 관리해 준다.</p>

<p><strong>스프링 컨테이너에 빈(Bean)을 등록하고 설정하는 방법은 크게 두 가지가 있다.</strong></p>

<p><strong>(1)</strong> XML 설정을 통한 DI
<strong>(2)</strong> 어노테이션(Annotations)을 이용한 DI</p>

<p><br /></p>

<p>첫 번째로 XML 설정을 통한 DI에 대해서 알아보자</p>

<p><br /></p>

<p><strong>applicationContext.xml</strong></p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;beans</span>
	<span class="na">xmlns=</span><span class="s">"http://www.springframework.org/schema/beans"</span>
	<span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="na">xsi:schemaLocation=</span><span class="s">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd"</span><span class="nt">&gt;</span>
	<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"UserAddController"</span> <span class="na">class=</span><span class="s">"com.lotts.web.user.UserAddController"</span><span class="nt">&gt;</span>
		<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"userImpl"</span> <span class="na">ref=</span><span class="s">"userImpl"</span><span class="nt">/&gt;</span>
	<span class="nt">&lt;/bean&gt;</span>
	<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"userImpl"</span> <span class="na">class=</span><span class="s">"com.lotts.domain.logic.UserImpl"</span><span class="nt">&gt;</span>
		<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"userDao"</span> <span class="na">ref=</span><span class="s">"userDao"</span><span class="nt">/&gt;</span>
		<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"orgDao"</span> <span class="na">ref=</span><span class="s">"orgDao"</span><span class="nt">/&gt;</span>
		<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"uploadpath"</span> <span class="na">value=</span><span class="s">"${file.upload.path}"</span> <span class="nt">/&gt;</span>
	<span class="nt">&lt;/bean&gt;</span>
	<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"userDao"</span> <span class="na">class=</span><span class="s">"com.lotts.dao.ibatis.SqlMapUserDao"</span><span class="nt">&gt;</span>
		<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"sqlMapClient"</span> <span class="na">ref=</span><span class="s">"sqlMapClient"</span><span class="nt">/&gt;</span>
	<span class="nt">&lt;/bean&gt;</span>
	<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"OrgDao"</span> <span class="na">class=</span><span class="s">"com.lotts.dao.ibatis.SqlMapOrgDao"</span><span class="nt">&gt;</span>
		<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"sqlMapClient"</span> <span class="na">ref=</span><span class="s">"sqlMapClient"</span><span class="nt">/&gt;</span>
	<span class="nt">&lt;/bean&gt;</span>
	<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"sqlMapClient"</span> <span class="na">class=</span><span class="s">"org.springframework.orm.ibatis.SqlMapClientFactoryBean"</span><span class="nt">&gt;</span>
		<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"configLocation"</span> <span class="na">value=</span><span class="s">"WEB-INF/config/SqlMap.xml"</span><span class="nt">/&gt;</span>
		<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"dataSource"</span> <span class="na">ref=</span><span class="s">"dataSource"</span><span class="nt">/&gt;</span>
	<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<p><br /></p>

<p><strong>SpringTest.java</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringTest</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span> <span class="n">ar</span><span class="o">[])</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">"ApplicationContext.xml"</span><span class="o">);</span>
        <span class="nc">UserFacade</span> <span class="n">userImpl</span> <span class="o">=</span> <span class="o">(</span><span class="nc">UserImpl</span><span class="o">)</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"userImpl"</span><span class="o">);</span>
        <span class="n">userImpl</span><span class="o">.</span><span class="na">사용자_정보를_조회한다</span><span class="o">();</span>
        <span class="n">userImpl</span><span class="o">.</span><span class="na">사용자를_등록한다</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p>이제 어노테이션을 이용한 DI에 대해 알아보자.</p>

<p><br /></p>

<p>@Component를 사용하여 해당 클래스를 찾아 @Autowired가 붙은 클래스를 자동적으로 객체로 만들어주고 사용할 수 있게 해준다.</p>

<p>또한, XML에 설정에 auto scan을 설정하면 해당 패키지 범위에 Component를 설정하여 사용할 수 있다.</p>

<p><br /></p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;context:component-scan</span> <span class="na">base-package=</span><span class="s">"com.lotts.web"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<p><br /></p>

<p>@Component의 확장된 어노테이션을 사용하면 스프링은 패키지 및 하위 패키지 내에서 해당 어노테이션을 찾아서 인젝션을 한다.</p>

<p><br /></p>

<ul>
  <li><strong>@Repository</strong>: 데이터베이스에서 정보를 검새하는 DAO(Data Access Objects)에 사용된다.</li>
  <li><strong>@Service</strong>: 서비스 계층 클래스에 사용되며 데이터 및 비즈니스 로직 처리에 사용된다.</li>
  <li><strong>@Controller</strong>: UI에서 요청 처리에 사용된다.</li>
</ul>

<p><br /></p>

<p><strong>Example</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span> 
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">InfoController</span> <span class="kd">extends</span> <span class="nc">MultiActionController</span> <span class="o">{</span>
    <span class="nd">@Autowired</span> <span class="kd">private</span> <span class="nc">InfoServiceImpl</span> <span class="nc">InfoService</span><span class="o">;</span>
<span class="o">}</span>

<span class="nd">@Service</span><span class="o">(</span><span class="s">"InfoService"</span><span class="o">)</span> 
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">InfoServiceImpl</span> <span class="kd">implements</span> <span class="nc">InfoService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span> <span class="kd">private</span> <span class="nc">InfoDaoImpl</span> <span class="nc">InfoDao</span><span class="o">;</span>
<span class="o">}</span>

<span class="nd">@Repository</span><span class="o">(</span><span class="s">"InfoDao"</span><span class="o">)</span>
 <span class="kd">public</span> <span class="kd">class</span> <span class="nc">InfoDaoImpl</span> <span class="kd">implements</span> <span class="nc">InfoDao</span> <span class="o">{</span>
    <span class="nd">@Autowired</span> <span class="kd">private</span> <span class="nc">SqlSessionTemplate</span> <span class="n">sst</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<hr />

<p><br /></p>

<h3 style="color:#107896;  font-weight:bold">
<img class="emoji" title=":pushpin:" alt=":pushpin:" src="https://github.githubassets.com/images/icons/emoji/unicode/1f4cc.png" height="30" width="30" /> Spring과 SpringBoot의 차이점
</h3>

<p><br /></p>

<p>앞에서 설명한 것처럼 스프링은 IOC나 DI를 통해 의존성을 주입할 수 있기 때문에 다양한 스프링 모듈을 사용할 수 있다.</p>

<p><br /></p>

<p><img src="/images/Interview/post16/2022-01-01-17-37-40.png?style=centerme" alt="" /></p>

<p><br /></p>

:ET