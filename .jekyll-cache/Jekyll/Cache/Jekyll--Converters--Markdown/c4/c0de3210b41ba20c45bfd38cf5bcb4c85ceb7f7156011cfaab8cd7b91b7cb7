I"'F<p><br /><br /></p>

<h1 id="페이지-처리되는-영화별-평균-점수리뷰-개수-구하기"><center>페이지 처리되는 영화별 평균 점수/리뷰 개수 구하기</center></h1>

<p><br /><br /></p>

<p><strong>MovieRepository 인터페이스</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">MovieRepository</span> <span class="kd">extends</span> <span class="nc">JpaRepository</span><span class="o">&lt;</span><span class="nc">Movie</span><span class="o">,</span><span class="nc">Long</span><span class="o">&gt;</span> <span class="o">{</span>
   <span class="nd">@Query</span><span class="o">(</span><span class="s">"select m, max(mi), avg(coalesce(r.grade,0)), count(distinct r) from Movie m "</span><span class="o">+</span><span class="s">"left outer join MovieImage mi on mi.movie=m "</span><span class="o">+</span>
            <span class="s">"left outer join Review r on r.movie=m group by m"</span><span class="o">)</span>
    <span class="nc">Page</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">[]&gt;</span> <span class="nf">getListPage</span><span class="o">(</span><span class="nc">Pageable</span> <span class="n">pageable</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>coalece(a1, a2, a3…): a1부터 aN까지 처음으로 null이 아닌 값을 리턴한다</li>
  <li>처음 select m은 Movie 엔티티의 모든 엔티티를 선택하게 됨, mi도 마찬가지</li>
  <li>JPQL에서 group by를 적용하면 리뷰의 개수와 리뷰의 평균 평점을 구할 수 있음</li>
</ul>

<p><br /><br />
MovieRepositoryTests 클래스에 테스트할 수 있는 메서드를 작성한다.</p>

<p><strong>MovieRepositoryTests 클래스</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testListPage</span><span class="o">(){</span>
        <span class="nc">PageRequest</span> <span class="n">pageRequest</span><span class="o">=</span> <span class="nc">PageRequest</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">10</span><span class="o">,</span><span class="nc">Sort</span><span class="o">.</span><span class="na">by</span><span class="o">(</span><span class="nc">Sort</span><span class="o">.</span><span class="na">Direction</span><span class="o">.</span><span class="na">DESC</span><span class="o">,</span><span class="s">"mno"</span><span class="o">));</span>
        <span class="nc">Page</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">[]&gt;</span> <span class="n">result</span><span class="o">=</span><span class="n">movieRepository</span><span class="o">.</span><span class="na">getListPage</span><span class="o">(</span><span class="n">pageRequest</span><span class="o">);</span>

        <span class="k">for</span><span class="o">(</span><span class="nc">Object</span><span class="o">[]</span> <span class="n">objects</span> <span class="o">:</span> <span class="n">result</span><span class="o">.</span><span class="na">getContent</span><span class="o">()){</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">objects</span><span class="o">));</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><u>이 코드를 실행하게 되면 예상과 달리 각 영화마다 이미지를 찾는 쿼리가 실행되면서 비효율적으로 여러 번 실행되는 것을 볼 수 있다.</u></p>

<p><strong>즉 N+1 문제 발생</strong></p>

<ul>
  <li>max()를 사용하지 않으면 join으로 결합될 당시의 데이터 1개만 가져오게 되고 max()를 사용하면 join으로 결합될 당시의 데이터 말고 번호가 가장 큰 이미지 파일(여기서 inum)에 대한 정보를 가져와야하므로 MovieImage에 대한 select문을 1회씩 총 10회 실행됨</li>
</ul>

<p>JPQL은 별도의 처리 없이 위의 구조를 작성할 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Query</span><span class="o">(</span><span class="s">"select m, mi, avg(coalesce(r.grade,0)), count(distinct r) from Movie m "</span><span class="o">+</span><span class="s">"left outer join MovieImage mi on mi.movie=m "</span><span class="o">+</span>
            <span class="s">"left outer join Review r on r.movie=m group by m"</span><span class="o">)</span>
    <span class="nc">Page</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">[]&gt;</span> <span class="nf">getListPage</span><span class="o">(</span><span class="nc">Pageable</span> <span class="n">pageable</span><span class="o">);</span>
</code></pre></div></div>

<ul>
  <li>max() 부분 제거</li>
</ul>

<h3 id="특정-영화의-모든-이미지와-평균-평점리뷰-개수">특정 영화의 모든 이미지와 평균 평점/리뷰 개수</h3>

<ul>
  <li>영화를 조회할 때는 영화(Movie)뿐 아니라 해당 영화의 평균 평점/리뷰 개수를 화면에서 사용할 일이 있으므로 MovieRepository에 해당 기능을 추가</li>
</ul>

<p><strong>MovieRepository 인터페이스</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">org.zerock.mreview.repository</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.data.domain.Page</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.domain.Pageable</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.jpa.repository.JpaRepository</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.jpa.repository.Query</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.zerock.mreview.entity.Movie</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.zerock.mreview.entity.MovieImage</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">MovieRepository</span> <span class="kd">extends</span> <span class="nc">JpaRepository</span><span class="o">&lt;</span><span class="nc">Movie</span><span class="o">,</span><span class="nc">Long</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="nd">@Query</span><span class="o">(</span><span class="s">"select m, mi, avg(coalesce(r.grade,0)), count(distinct r) from Movie m "</span><span class="o">+</span><span class="s">"left outer join MovieImage mi on mi.movie=m "</span><span class="o">+</span>
            <span class="s">"left outer join Review r on r.movie=m group by m"</span><span class="o">)</span>
    <span class="nc">Page</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">[]&gt;</span> <span class="nf">getListPage</span><span class="o">(</span><span class="nc">Pageable</span> <span class="n">pageable</span><span class="o">);</span>

    <span class="nd">@Query</span><span class="o">(</span><span class="s">"select m, mi "</span><span class="o">+</span><span class="s">"from Movie m left outer join MovieImage mi on mi.movie=m "</span><span class="o">+</span><span class="s">"where m.mno=:mno"</span><span class="o">)</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">[]&gt;</span> <span class="nf">getMovieWithAll</span><span class="o">(</span><span class="nc">Long</span> <span class="n">mno</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>getMovieWillAll의 @Query 부분에서 m.mno=:mno 의 =:는 getMovieWithAll(Long mno)에서 매개변수인 mno를 의미할 수 있게 함
    <ul>
      <li>즉 =:mno는 Long mno의 mno임</li>
    </ul>
  </li>
</ul>

<p><strong>테스트 코드 작성 MovieRepositoryTests</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testGetMovieWithAll</span><span class="o">(){</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">[]&gt;</span> <span class="n">result</span><span class="o">=</span><span class="n">movieRepository</span><span class="o">.</span><span class="na">getMovieWithAll</span><span class="o">(</span><span class="mi">94L</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
        <span class="k">for</span><span class="o">(</span><span class="nc">Object</span><span class="o">[]</span> <span class="nl">arr:</span><span class="n">result</span><span class="o">){</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">arr</span><span class="o">));</span>
        <span class="o">}</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>리뷰(Review)와 관련된 내용 처리는 ‘left join’을 이용하면 된다. 리뷰와 조인한 후에 count(), avg() 등의 함수를 이용하게 되는데 이때 영화 이미지(MovieImage) 별로 group by를 실행해야만 한다.</p>

<p><strong>MovieRepository의 getMovieWithAll() 수정</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Query</span><span class="o">(</span><span class="s">"select m, mi, avg(coalesce(r.grade,0)), count(r) "</span><span class="o">+</span>
            <span class="s">"from Movie m left outer join MovieImage mi on mi.movie=m "</span> <span class="o">+</span>
            <span class="s">"left outer join Review r on r.movie=m "</span><span class="o">+</span>
            <span class="s">"where m.mno=:mno group by mi"</span><span class="o">)</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">[]&gt;</span> <span class="nf">getMovieWithAll</span><span class="o">(</span><span class="nc">Long</span> <span class="n">mno</span><span class="o">);</span>
</code></pre></div></div>

<ul>
  <li>left outer join 추가와 마지막의 group by 부분에 영화 이미지별로 그룹을 만들어서 영화 이미지들의 개수만큼 데이터를 만들어 낼 수 있게 됨</li>
</ul>

<p><strong>특정 영화의 모든 리뷰와 회원의 닉네임</strong></p>

<ul>
  <li>영화 조회 화면에서는 영화 리뷰(Review)를 조회할 수 있어야함</li>
  <li>자신이 영화에 대한 리뷰를 등록하거나 수정/삭제할 수 있어야함</li>
</ul>

<p>특정 영화에 대한 영화 리뷰는 ReviewRepository에 다음과 같이 작성한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">org.zerock.mreview.repository</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.data.jpa.repository.EntityGraph</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.jpa.repository.JpaRepository</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.jpa.repository.Modifying</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.jpa.repository.Query</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.zerock.mreview.entity.Member</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.zerock.mreview.entity.Movie</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.zerock.mreview.entity.Review</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ReviewRepository</span> <span class="kd">extends</span> <span class="nc">JpaRepository</span><span class="o">&lt;</span><span class="nc">Review</span><span class="o">,</span> <span class="nc">Long</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Review</span><span class="o">&gt;</span> <span class="nf">findByMovie</span><span class="o">(</span><span class="nc">Movie</span> <span class="n">movie</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이제 findByMovie()에 대한 테스트 코드를 작성해서 Review에서 필요한 데이터를 추출한다.
test repository 안에 ReviewRepositoryTests에 코드를 작성한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testGetMovieReviews</span><span class="o">(){</span>
        <span class="nc">Movie</span> <span class="n">movie</span><span class="o">=</span><span class="nc">Movie</span><span class="o">.</span><span class="na">builder</span><span class="o">().</span><span class="na">mno</span><span class="o">(</span><span class="mi">92L</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>

        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Review</span><span class="o">&gt;</span> <span class="n">result</span><span class="o">=</span><span class="n">reviewRepository</span><span class="o">.</span><span class="na">findByMovie</span><span class="o">(</span><span class="n">movie</span><span class="o">);</span>
        <span class="n">result</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">movieReview</span><span class="o">-&gt;{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">movieReview</span><span class="o">.</span><span class="na">getReviewnum</span><span class="o">());</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"\t"</span><span class="o">+</span><span class="n">movieReview</span><span class="o">.</span><span class="na">getGrade</span><span class="o">());</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"\t"</span><span class="o">+</span><span class="n">movieReview</span><span class="o">.</span><span class="na">getText</span><span class="o">());</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"\t"</span><span class="o">+</span><span class="n">movieReview</span><span class="o">.</span><span class="na">getMember</span><span class="o">().</span><span class="na">getEmail</span><span class="o">());</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"---------------------------"</span><span class="o">);</span>
        <span class="o">});</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>이때 findByMovie는 쿼리 메서드이다.
Spring Data JPA의 경우 여러 처리를 위해 다음과 같은 방법을 제공한다.</p>

<ul>
  <li>쿼리 메서드: 메서드의 이름 자체가 쿼리의 구문으로 처리되는 기능</li>
  <li>@Query: SQL과 유사하게 엔티티 클래스의 정보를 이용해서 쿼리를 작성하는 기능</li>
  <li>Querydsl 등의 동적 쿼리 처리 기능</li>
</ul>

<p>쿼리 메서드는 말 그대로 메서드의 이름 자체가 질의(query)문이 되는 흥미로운 기능이다. 쿼리 메서드는 주로 ‘findBy나 getBy…‘로 시작하고 이후에 필요한 필드 조건이나 And, Or와 같은 키워드를 이용해서 메서드의 이름 자체로 질의 조건을 만들어 낸다.
자세한 내용은 <strong>Spring Data JPA Reference</strong>를 이용해서 찾는다.</p>

<p>보시다시피 findById 부분인 2번을 읽어보면
“주어진 아이디로 해당 엔티티를 식별할 수 있다”라고 되어 있다.</p>

<p><img src="..../../../images/Learning_SpringBoot_with_Web_Project/Part4/Chapter7/ref.PNG" alt="ref" />
<br /><br /><br /></p>
:ET