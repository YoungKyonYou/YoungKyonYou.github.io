I"d<p><br /><br />
<em><strong>피곤한데 커피 한잔만 마시고 시작해보자..</strong></em>
<br />
(Press the Button)</p>

<p><br /><br /></p>

<style>
.containercoffee {
  width: 300px;
  height: 280px;
  position: relative;
  top: calc(50% - 140px);
  left: calc(50% - 150px);
}
.coffee-header {
  width: 100%;
  height: 80px;
  position: absolute;
  top: 0;
  left: 0;
  background-color: #ddcfcc;
  border-radius: 10px;
}
.coffee-header__buttons {
  width: 25px;
  height: 25px;
  position: absolute;
  top: 25px;
  background-color: #282323;
  border-radius: 50%;
}
.coffee-header__buttons::after {
  content: "";
  width: 8px;
  height: 8px;
  position: absolute;
  bottom: -8px;
  left: calc(50% - 4px);
  background-color: #615e5e;
}
.coffee-header__button-one {
  left: 15px;
}
.coffee-header__button-two {
  left: 50px;
}
.coffee-header__display {
  width: 50px;
  height: 50px;
  position: absolute;
  top: calc(50% - 25px);
  left: calc(50% - 25px);
  border-radius: 50%;
  background-color: #9acfc5;
  border: 5px solid #43beae;
  box-sizing: border-box;
}
.coffee-header__details {
  width: 8px;
  height: 20px;
  position: absolute;
  top: 10px;
  right: 10px;
  background-color: #9b9091;
  box-shadow: -12px 0 0 #9b9091, -24px 0 0 #9b9091;
}
.coffee-medium {
  width: 90%;
  height: 160px;
  position: absolute;
  top: 80px;
  left: calc(50% - 45%);
  background-color: #bcb0af;
}
.coffee-medium:before {
  content: "";
  width: 90%;
  height: 100px;
  background-color: #776f6e;
  position: absolute;
  bottom: 0;
  left: calc(50% - 45%);
  border-radius: 20px 20px 0 0;
}
.coffe-medium__exit {
  width: 60px;
  height: 20px;
  position: absolute;
  top: 0;
  left: calc(50% - 30px);
  background-color: #231f20;
}
.coffe-medium__exit::before {
  content: "";
  width: 50px;
  height: 20px;
  border-radius: 0 0 50% 50%;
  position: absolute;
  bottom: -20px;
  left: calc(50% - 25px);
  background-color: #231f20;
}
.coffe-medium__exit::after {
  content: "";
  width: 10px;
  height: 10px;
  position: absolute;
  bottom: -30px;
  left: calc(50% - 5px);
  background-color: #231f20;
}
.coffee-medium__arm {
  width: 70px;
  height: 20px;
  position: absolute;
  top: 15px;
  right: 25px;
  background-color: #231f20;
}
.coffee-medium__arm::before {
  content: "";
  width: 15px;
  height: 5px;
  position: absolute;
  top: 7px;
  left: -15px;
  background-color: #9e9495;
}
.coffee-medium__cup {
  width: 80px;
  height: 47px;
  position: absolute;
  bottom: 0;
  left: calc(50% - 40px);
  background-color: #FFF;
  border-radius: 0 0 70px 70px / 0 0 110px 110px;
}
.coffee-medium__cup::after {
  content: "";
  width: 20px;
  height: 20px;
  position: absolute;
  top: 6px;
  right: -13px;
  border: 5px solid #FFF;
  border-radius: 50%;
}
@keyframes liquid {
  0% {
    height: 0px;  
    opacity: 1;
  }
  5% {
    height: 0px;  
    opacity: 1;
  }
  20% {
    height: 62px;  
    opacity: 1;
  }
  95% {
    height: 62px;
    opacity: 1;
  }
  100% {
    height: 62px;
    opacity: 0;
  }
}
.coffee-medium__liquid {
  width: 6px;
  height: 63px;
  opacity: 0;
  position: absolute;
  top: 50px;
  left: calc(50% - 3px);
  background-color: #74372b;
  animation: liquid 4s 4s linear infinite;
}
.coffee-medium__smoke {
  width: 8px;
  height: 20px;
  position: absolute;  
  border-radius: 5px;
  background-color: #b3aeae;
}
@keyframes smokeOne {
  0% {
    bottom: 20px;
    opacity: 0;
  }
  40% {
    bottom: 50px;
    opacity: .5;
  }
  80% {
    bottom: 80px;
    opacity: .3;
  }
  100% {
    bottom: 80px;
    opacity: 0;
  }
}
@keyframes smokeTwo {
  0% {
    bottom: 40px;
    opacity: 0;
  }
  40% {
    bottom: 70px;
    opacity: .5;
  }
  80% {
    bottom: 80px;
    opacity: .3;
  }
  100% {
    bottom: 80px;
    opacity: 0;
  }
}
.coffee-medium__smoke-one {
  opacity: 0;
  bottom: 50px;
  left: 102px;
  animation: smokeOne 3s 4s linear infinite;
}
.coffee-medium__smoke-two {
  opacity: 0;
  bottom: 70px;
  left: 118px;
  animation: smokeTwo 3s 5s linear infinite;
}
.coffee-medium__smoke-three {
  opacity: 0;
  bottom: 65px;
  right: 118px;
  animation: smokeTwo 3s 6s linear infinite;
}
.coffee-medium__smoke-for {
  opacity: 0;
  bottom: 50px;
  right: 102px;
  animation: smokeOne 3s 5s linear infinite;
}
.coffee-footer {
  width: 95%;
  height: 15px;
  position: absolute;
  bottom: 25px;
  left: calc(50% - 47.5%);
  background-color: #41bdad;
  border-radius: 10px;
}
.coffee-footer::after {
  content: "";
  width: 106%;
  height: 26px;
  position: absolute;
  bottom: -25px;
  left: -8px;
  background-color: #000;
}
</style>

<div class="containercoffee">
    <div class="coffee-header">
      <div class="coffee-header__buttons coffee-header__button-one"></div>
      <div class="coffee-header__buttons coffee-header__button-two"></div>
      <div class="coffee-header__display"></div>
      <div class="coffee-header__details"></div>
    </div>
    <div class="coffee-medium">
      <div class="coffe-medium__exit"></div>
      <div class="coffee-medium__arm"></div>
      <div class="coffee-medium__liquid"></div>
      <div class="coffee-medium__smoke coffee-medium__smoke-one"></div>
      <div class="coffee-medium__smoke coffee-medium__smoke-two"></div>
      <div class="coffee-medium__smoke coffee-medium__smoke-three"></div>
      <div class="coffee-medium__smoke coffee-medium__smoke-for"></div>
      <div class="coffee-medium__cup"></div>
    </div>
    <div class="coffee-footer"></div>
</div>

<p><br /><br /><br /><br /><br /><br /><br /><br /></p>

<h1 id="kubernetes와-mysql-workbench-연동하기"><center>Kubernetes와 Mysql Workbench 연동하기</center></h1>

<p><br /></p>

<p>여기서는 교육용 및 소규모 환경에서 사용하기 좋은 베이그런트(Vagrant)를 사용하고 베이그런트와 호환성이 좋은 버추얼박스(VirtualBox)를 사용해서 진행한다.</p>

<p><img src="/images/Kubernetes/kubernetes-Mysql/2021-07-27-23-54-14.png" alt="" /></p>

<p><br /></p>

<style lang="scss">
 p{
    text-align:center;
 }
</style>

<p><img src="/images/Kubernetes/kubernetes-Mysql/2021-07-27-23-54-32.png" alt="" /></p>

<p><br /></p>

<p>Vagrantfile 설정은 밑에 링크 달아놓은 이전 게시물을 참고<br /></p>

<p><strong><a href="https://youngkyonyou.github.io/kubernetes/2021/07/20/Kubernetes-3.1.3.html">Vagranfile 설정</a></strong></p>

<p><br /></p>

<p>위 링크에 들어가면 나오는 Vagrantfile과 스크립트들을 한 디렉토리에 넣고 <strong>vagrant up</strong>를 하게 되면 아래 사진과 같이 virtual box에 4개의 가상 머신이 생기는 것을 확인할 수 있다.</p>

<p><br /></p>

<p><img src="../images/Kubernetes/kubernetes-Mysql/2021-07-28-09-56-23.png" alt="" /></p>

<p><br /></p>

<p>이제 <strong>Superputty</strong>로 m-k8s를 접속한다.</p>

<p><br /></p>

<p><img src="/images/Kubernetes/kubernetes-Mysql/2021-07-28-09-57-40.png" alt="" /></p>

<p><br /></p>

<p>그리고 우리는 쿠버네티스 공식 문서에서 mysql를 배포하는 방법에 대해서 따라한다.</p>

<p><br /></p>

<p><strong><a href="https://kubernetes.io/ko/docs/tasks/run-application/run-single-instance-stateful-application/">쿠버네티스 공식 문서</a></strong></p>

<p><br /></p>

<p>이 사이트에서는 쿠버네티스 클러스터에서 퍼시스턴트볼륨(PersistentVolume)과 디폴로이먼트(Deployment)를 사용하여, 단일 이스턴스 스테이트풀 애플리케이션을 실행하는 방법을 보인다. 해당 애플리케이션은 MYSQL이다.</p>

<p><br /></p>

<p>그 이전에 퍼시스턴트볼륨과 스테이트풀에 대한 개념을 간단하게 알아보자.</p>

<p><br /></p>

<link href="http://fonts.googleapis.com/earlyaccess/hanna.css" rel="stylesheet" />

<div style="background: #eee;
  box-shadow: 0 8px 8px -4px lightblue; font-family: 'Hanna', sans-serif;; padding: 40px;">
이전에 <span style="color:orange; font-weight:bold">PV</span>(PersistentVolume)과 <span style="color:orange; font-weight:bold">PVC</span>(PersistentVolumeClaim)에 대해서 좀 알아보자.

파드에서 생성한 내용을 기록하고 보관하거나 모든 파드가 동일한 설정 값을 유지하고 관리하기 위해 공유된 볼륨으로부터 공통된 설정을 가지고 올 수 있도록 설계해야하는데 이때 원격으로 지원하는 것이 PVC이다. 쿠버네티스는 필요할 때 <span style="color:orange; font-weight:bold">PVC</span>를 요청해 사용한다. <span style="color:orange; font-weight:bold">PVC</span>를 사용하려면 <span style="color:orange; font-weight:bold">PV</span>로 볼륨을 선언해야 한다. 간단하게 <span style="color:orange; font-weight:bold">PV</span>는 볼륨을 사용할 수 있게 준비하는 단계이고 <span style="color:orange; font-weight:bold">PVC</span>는 준비된 볼륨에서 일정 공간을 할당받는 것이다. 비유하면 <span style="color:orange; font-weight:bold">PV</span>는 요리사(관리자)가 피자를 굽는 것이고, <span style="color:orange; font-weight:bold">PVC</span>는 손님(사용자)가 원하는 만큼의 피자를 접시에 담아 가져오는 것이다.</div>

<p><br /></p>

<link href="http://fonts.googleapis.com/earlyaccess/hanna.css" rel="stylesheet" />

<div style="background: #eee;
  box-shadow: 0 8px 8px -4px lightblue; font-family: 'Hanna', sans-serif;; padding: 40px;">

쿠버네티스 클러스터상에서 돌아가는 애플리케이션을 애완동물(pets)이나 가축(cattle)으로 생각해봅시다. 개발자는 각 인스턴스에 이름을 부여하고 개별적으로 관리한다는 점에서 애플리케이션을 애완동물처럼 대하는 경향이 있는데, 그러한 각별한 주의를 기울일 필요 없이 가축처럼 취급하는 편이 더 나을 수 있습니다. 그러면 농부가 병든 가축을 교체하는 것 처럼 비정상적인 인스턴스를 주저없이 교체할 수 있기 때문입니다. <span style="color: rgba(131, 24, 67);">스테이트리스(stateless)</span> 애플리케이션의 인스턴스는 가축과 같이 동작합니다. 인스턴스가 죽더라도 새로운 인스턴스를 만들 수 있고 사람들은 그 차이를 눈치채지 못할 것이기 떄문에 인스턴스가 죽는 것은 아무런 문제가 되지 않습니다.<br /><br />

그러나 <span style="color: rgba(131, 24, 67);">스테이트풀(stateful)</span> 애플리케이션은 애완동물과 같습니다. 애완동물이 죽었을 때 새 애완동물을 바로 살 수 없고, 주변 사람들도 금방 알아차릴 것이기 때문입니다. 잃어버린 애완동물을 대체하기 위해선 이전 애완동물과 생김새나 행동이 완전히 똑같은 새로운 애완동물을 찾아야 하는데, 이는 애플리케이션의 경우 새 인스턴스가 이전 인스턴스와 완전히 같은 상태와 아이덴티티를 가져야 함을 의미합니다.<br /><br />

레플리카셋이나 레플리케이션 컨트롤러로 관리되는 파드는 가축과 같습니다. 이 파드들은 stateless로 언제든지 새로운 파드로 교체될 수 있습니다. 반면 <span style="color: rgba(131, 24, 67);">스테이트풀셋으로</span> 관리되는 파드는 stateful해서 새로운 파드로 교체될 때 동일한 이름, 네트워크 아이덴티티, 상태 그대로 다음 노드에서 되살아납니다.<br /><br />

</div>

<p><br /><br /><br /></p>

<link rel="stylesheet" href="https: //www.webnots.com/resources/font-awesome/css/font-awesome.min.css" />

<style>
.webnots-notification-box {
-moz-border-radius: 5px;
-webkit-border-radius: 5px;
border-radius: 5px;
color: #ffffff;
font-family: verdana, 'open sans', sans-serif;
margin-bottom: 25px;
padding: 10px 14px 10px 44px;
position: relative;
box-shadow: 0px 1px 5px #999;
/* width: -moz-fit-content;
width: -webkit-fit-content;
width: fit-content; */
}
.webnots-notification-box:before {
font-family: FontAwesome;
font-size: 21px;
left: 14px;
position: absolute;
}
.webnots-success {
background-color: #2ecc71;
}
.webnots-success:before {
content: "\f00c";
margin-left: -2px;
}
.webnots-failure {
background-color: #e74c3c;
}
.webnots-failure:before {
content: "\f00d";
}
.webnots-warning {
background-color: #e67e22;
}
.webnots-warning:before {
content: "\f12a";
margin-left: 5px;
}
.webnots-information {
background-color: #3498db;
}
.webnots-information:before {
content: "\f129";
margin-left: 4px;
}
.webnots-question {
background-color: #f1c40f;
}
.webnots-question:before {
content: "\f128";
margin-left: 2px;
}
.webnots-tip {
background-color: #16a085;
}
.webnots-tip:before {
content: "\f0eb";
margin-left: 2px;
}
.webnots-notice {
background-color: #bea474;
}
.webnots-notice:before {
content: "\f0a1";
margin-left: -1px;
}
</style>

<p><span style="color:#3D9970; font-weight:bold; font-size:30px">목적</span>
<br /></p>

<div class="webnots-success webnots-notification-box">사용자 환경의 디스크를 참조하는 퍼시스턴트볼륨 생성하기</div>
<div class="webnots-success webnots-notification-box">MySQL 디플로이먼트 생성하기</div>
<div class="webnots-success webnots-notification-box">알려진 DNS 이름으로 클러스터의 다른 파드에 MySQL 서비스 노출하기</div>

<p><br /></p>

<p>쿠버네티스 클러스터가 일단 필요하고 kubectl 커맨드-라인 툴이 클러스터와 통신할 수 있도록 설정이 되어 있어야 한다. 이 튜토리얼은 컨트롤 플레인 호스트가 아닌 노드가 적어도 2개 포함된 클러스터에서 실행하는 것을 추천한다.</p>

<p><br /></p>

<p>쿠버네티스 디폴이먼트를 생성하고 퍼시스턴트볼륨클레임을 사용하는 기존 퍼시스턴트볼륨에 연결하여 스테이트풀 애플리케이션을 실행할 수 있다. 아래 YAML 파일은 MySQL을 실행하고 퍼시스턴트 볼륨클레임을 참조하는 디폴로이먼트를 기술한다. 이 파일은 /var/lib/mysql에 대한 볼륨 마운트를 정의한 후에, 20G의 볼륨을 요청하는 퍼시트턴트볼륨클레임을 생성한다. 이 클레임은 요구 사항에 적합한 기존 볼륨이나 동적 프로비저너에 의해서 충족된다.</p>

<p><br /></p>

<p><strong>mysql-deployment.yaml</strong></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Service</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">mysql</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">ports</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">port</span><span class="pi">:</span> <span class="m">3306</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">mysql</span>
  <span class="na">clusterIP</span><span class="pi">:</span> <span class="s">None</span>
<span class="nn">---</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">mysql</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">mysql</span>
  <span class="na">strategy</span><span class="pi">:</span>
    <span class="na">type</span><span class="pi">:</span> <span class="s">Recreate</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">mysql</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span> <span class="s">mysql:5.6</span>
        <span class="na">name</span><span class="pi">:</span> <span class="s">mysql</span>
        <span class="na">env</span><span class="pi">:</span>
          <span class="c1"># Use secret in real usage</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">MYSQL_ROOT_PASSWORD</span>
          <span class="na">value</span><span class="pi">:</span> <span class="s">password</span>
        <span class="na">ports</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="m">3306</span>
          <span class="na">name</span><span class="pi">:</span> <span class="s">mysql</span>
        <span class="na">volumeMounts</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">mysql-persistent-storage</span>
          <span class="na">mountPath</span><span class="pi">:</span> <span class="s">/var/lib/mysql</span>
      <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">mysql-persistent-storage</span>
        <span class="na">persistentVolumeClaim</span><span class="pi">:</span>
          <span class="na">claimName</span><span class="pi">:</span> <span class="s">mysql-pv-claim</span>
</code></pre></div></div>

<p><br /></p>

<p>하나 하나 씩 뭔지 알아가보자</p>

<p><br /></p>

<p><strong>mysql-deployment.yaml</strong></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#apiVersion: API 버전을 명시한다</span>
<span class="c1">#이 오브젝트를 생성하기 위해 사용하고 있는 쿠버네티스 API 버전이 어떤 것인지</span>
<span class="c1">#명시한다. </span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>

<span class="c1">#어떤 종류의 오브젝트를 생성하고자 하는지 명시한다.</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Service</span>

<span class="c1">#이름 문자열, UID, 그리고 선택적인 네임스페이스를 포함하여</span>
<span class="c1">#오브젝트를 유일하게 구분지어 줄 데이터이다.</span>
<span class="c1">#서비스 이름(name)은 mysql이다.</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">mysql</span>

<span class="c1">#오브젝트에 대해 어떤 상태를 의도하는지 명시한다.</span>
<span class="na">spec</span><span class="pi">:</span>

  <span class="c1">#포트 3306을 사용한다.</span>
  <span class="na">ports</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">port</span><span class="pi">:</span> <span class="m">3306</span>

  <span class="c1">#(.spec.selector)디플로이먼트가 관리할 파드를 찾는 방법을 정의한다.</span>
  <span class="c1">#이 사례에서는 파드 템플릿(아래 명시된 template)에 정의된 레이블(app:mysql)을</span>
  <span class="c1">#선택한다.</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">mysql</span>

  <span class="c1">#서비스 프록시가 사용하는 IP 주소, </span>
  <span class="na">clusterIP</span><span class="pi">:</span> <span class="s">None</span>
<span class="nn">---</span>

<span class="c1">#apiVersion: API 버전을 명시한다</span>
<span class="c1">#이 오브젝트를 생성하기 위해 사용하고 있는 쿠버네티스 API 버전이 어떤 것인지</span>
<span class="c1">#명시한다. apps/v1에서는 .spec.selector 와 .metadata.labels 이</span>
<span class="c1">#설정되지 않으면 .spec.template.metadata.labels 은 기본 설정되지 않는다.</span>
<span class="c1">#그래서 이것들은 명시적으로 설정되어야 한다. 또한 apps/v1 에서는</span>
<span class="c1">#디플로이먼트를 생성한 후에는 .spec.selector 이 변경되지 않는 점을 참고한다.</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>

<span class="c1">#어떤 종류의 오브젝트를 생성하고자 하는지 명시한다.</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>

<span class="c1">#이름 문자열, UID, 그리고 선택적인 네임스페이스를 포함하여</span>
<span class="c1">#오브젝트를 유일하게 구분지어 줄 데이터이다.</span>
<span class="c1">#디플로이먼트 이름(name)은 mysql이다.</span>
<span class="c1">#차후에 이 디플로이먼트를 delete할 때 이 이름으로 지운다.</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">mysql</span>

<span class="c1">#오브젝트에 대해 어떤 상태를 의도하는지 명시한다.</span>
<span class="na">spec</span><span class="pi">:</span>

  <span class="c1">#(.spec.selector)디플로이먼트가 관리할 파드를 찾는 방법을 정의한다.</span>
  <span class="c1">#이 사례에서는 파드 템플릿(아래 명시된 template)에 정의된 레이블(app:mysql)을</span>
  <span class="c1">#선택한다. </span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">mysql</span>

  <span class="c1">#파드 교체 전략을 지정한다. Recreate의 경우 기존 파드를 모두</span>
  <span class="c1">#삭제한 다음 새로운 파드를 생성하는 방법이다. (이 방식은 무중단이 아니다)</span>
  <span class="c1">#기본값은 RollingUpdate이다. RollingUpdate은 Pod를 하나씩 죽이고</span>
  <span class="c1">#새로 띄우면서 순차적으로 교체하는 방법이다. </span>
  <span class="na">strategy</span><span class="pi">:</span>
    <span class="na">type</span><span class="pi">:</span> <span class="s">Recreate</span>


  <span class="na">template</span><span class="pi">:</span>
    <span class="c1">#파드는 .metadata.labels 필드를 사용해서</span>
    <span class="c1">#app: mysql레이블을 붙인다</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">mysql</span>

    <span class="c1">#.template.spec 필드는 파드가 도커 허브의</span>
    <span class="c1">#mysql:5.6 이미지를 실행하는</span>
    <span class="c1">#mysql 컨테이너 1개를 실행하는 것을 나타낸다</span>
    <span class="c1">#컨테이너 1개를 생성하고 .spec.template.spec.containers[0].name 필드를</span>
    <span class="c1">#사용해서 mysql 이라는 이름을 붙인다.</span>
    <span class="c1">#즉 컨테이너의 이름이 mysql이 된다. describe deployment 명령어로 확인 가능    </span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span> <span class="s">mysql:5.6</span>
        <span class="na">name</span><span class="pi">:</span> <span class="s">mysql</span>

        <span class="c1">#환경변수를 정의한다.</span>
        <span class="na">env</span><span class="pi">:</span>
          <span class="c1"># 여기서는 mysql의 루트 비밀번호를 변경하는데 그 비밀번호를 password로 지정한다.</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">MYSQL_ROOT_PASSWORD</span>
          <span class="na">value</span><span class="pi">:</span> <span class="s">password</span>

        <span class="c1">#컨테이너 포트 지정</span>
        <span class="na">ports</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="m">3306</span>
          <span class="na">name</span><span class="pi">:</span> <span class="s">mysql</span>

      <span class="c1">#</span>
        <span class="na">volumeMounts</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">mysql-persistent-storage</span>
          <span class="na">mountPath</span><span class="pi">:</span> <span class="s">/var/lib/mysql</span>
      <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">mysql-persistent-storage</span>
        <span class="na">persistentVolumeClaim</span><span class="pi">:</span>
          <span class="na">claimName</span><span class="pi">:</span> <span class="s">mysql-pv-claim</span>
</code></pre></div></div>

<p><br /></p>
:ET