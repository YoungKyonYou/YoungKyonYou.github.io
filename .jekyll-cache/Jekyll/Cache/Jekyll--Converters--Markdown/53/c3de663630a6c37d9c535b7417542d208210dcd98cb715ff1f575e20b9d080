I"XP<p><br /><br /></p>

<h1 id="n1다대일-연관관계-board-만들기">&lt;N:1(다대일) 연관관계&gt; Board 만들기</h1>

<hr />

<p>여기서는 ‘회원’과 ‘게시글’ 그리고 ‘댓글’이라는 주제로 JPA에서 연관관계를 가장 쉽게 적용할 수 있는 방법을 알아본다.
먼저 연관관계와 관계형 데이터베이스 설계를 해야 한다. :disappointed:</p>

<p><br /></p>

<p>‘회원’과 ‘게시글’의 관계를 다음과 같은 명제로 나타내본다.</p>

<ul>
  <li>한 명의 회원은 여러 게시글을 작성할 수 있다.</li>
  <li>하나의 게시글은 한 명의 회원에 의해서 작성된다.</li>
</ul>

<p><br /></p>

<p>아래 사진을 보면 회원 데이터의 아이디는 PK에 해당한다. 아이디는 회원을 구분할 수 있는 고유한 값을 가지게 되는 것이다.
게시글 데이터를 보면 작성자 칼럼 값으로 동일한 회원 아이디가 여러 번 나오는 것을 볼 수 있다. 회원 데이터의 입장에서는 하나(One)의 PK(아이디)가 여러(Many) 게시글에서 참조(FK)되고 있는 관계가 된다.</p>

<p><img src="/images/Learning_SpringBoot_with_Web_Project/Part3/Chapter5/2021-02-16-21-00-46.png" alt="" /></p>

<p>회원 데이터 쪽이 ‘일(one)’이고, 게시글 데이터는 동일한 회원 아이디가 여러 번 나오고 있으므로 ‘다(many)’로 판단하고 다음과 같이 ERD를 작성한다.</p>

<p><img src="/images/Learning_SpringBoot_with_Web_Project/Part3/Chapter5/2021-02-16-21-05-42.png" alt="" /></p>

<p><strong>데이터베이스에서 관계를 해석할 때는 항상 PK 쪽에서 해석하고, 이를 반영해야 혼란을 줄일 수 있다</strong> :open_mouth:</p>

<p><br /></p>

<p>즉, 앞에서 이야기했던 두 명제는 다음과 같이 해석되어야 한다.</p>

<ul>
  <li>한 명의 회원은 여러 개의 게시글을 작성할 수 있다(PK에서 해석)</li>
  <li>하나의 게시글은 한 명의 작성자만을 표시할 수 있다.</li>
</ul>

<p><br /></p>

<p>이제 ‘회원, 게시글, 댓글’의 관계를 PK를 기준으로 설계해보면 다음과 같은 구조가 된다.</p>

<p><img src="/images/Learning_SpringBoot_with_Web_Project/Part3/Chapter5/2021-02-16-21-17-05.png" alt="" /></p>

<p>회원이 있어야 게시글을 작성할 수 있으므로 회원 테이블을 먼저 설계하고 게시글을 작성할 때는 특정 회원과의 관계를 설정해 주어야 한다. 댓글은 게시글이 있어야만 작성할 수 있으므로 게시글을 우선 설계하고, 댓글 테이블이 게시글을 FK로 작성한다.</p>

<p><br /></p>

<p>JPA는 객체지향의 입장에서 관계를 보는데 간단한 시작은 객체지향보다는 관계형 데이터베이스 모델링을 위주로 해서 구성하는 것이 편리하다.
:thumbsup:</p>

<hr />

<p><br /></p>

<h2 id="예제-프로젝트의-생성"><strong>예제 프로젝트의 생성</strong></h2>

<p><br /><br /></p>

<p>프로젝트의 생성은 ‘board’라는 이름의 프로젝트로 생성하고 Gradle, War 항목을 선택한다.</p>

<p><img src="/images/Learning_SpringBoot_with_Web_Project/Part3/Chapter5/2021-02-16-21-23-58.png" alt="" /></p>

<p><br /></p>

<p>추가할 라이브러리는 ‘Spring Boot DevTools, Lombok, Spring Web, Thymeleaf, Spring Data JPA 등을 추가한다.</p>

<p><img src="/images/Learning_SpringBoot_with_Web_Project/Part3/Chapter5/2021-02-16-21-24-30.png" alt="" /></p>

<p><br /></p>

<p>MariaDB JDBC 드라이버와 Thymeleaf의 시간 처리 관련 라이브러리를 추가한다.</p>

<p><em>“나는 mysql를 선호해서 mysql connector로 대신했다”</em> :satisfied:</p>

<p><img src="/images/Learning_SpringBoot_with_Web_Project/Part3/Chapter5/2021-02-16-21-26-35.png" alt="" /></p>

<p><br /></p>

<p>application.properties 파일에는 JPA 관련 설정을 추가한다.</p>

<p><img src="/images/Learning_SpringBoot_with_Web_Project/Part3/Chapter5/2021-02-16-21-29-06.png" alt="" /></p>

<p><br /></p>

<p>프로젝트 내에 entity 패키지를 생성하고, 이전 예제에서 사용했던 BaseEntity 클래스를 추가한다. 그리고 미리 dto와 controller 패키지를 추가해 놓는다.</p>

<p><img src="/images/Learning_SpringBoot_with_Web_Project/Part3/Chapter5/2021-02-17-18-12-05.png" alt="" /></p>

<p><strong>BaseEntity 클래스</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="rouge-code"><pre><span class="kn">package</span> <span class="nn">org.zerock.board.entity</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">lombok.Getter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.annotation.CreatedDate</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.annotation.LastModifiedDate</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.jpa.domain.support.AuditingEntityListener</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.persistence.Column</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.persistence.EntityListeners</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.persistence.MappedSuperclass</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.time.LocalDateTime</span><span class="o">;</span>

<span class="nd">@MappedSuperclass</span>
<span class="nd">@EntityListeners</span><span class="o">(</span><span class="n">value</span><span class="o">={</span><span class="nc">AuditingEntityListener</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
<span class="nd">@Getter</span>
<span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">BaseEntity</span> <span class="o">{</span>
    <span class="nd">@CreatedDate</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">"regdate"</span><span class="o">,</span><span class="n">updatable</span><span class="o">=</span><span class="kc">false</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">LocalDateTime</span> <span class="n">regDate</span><span class="o">;</span>

    <span class="nd">@LastModifiedDate</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">"moddate"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">LocalDateTime</span> <span class="n">modDate</span><span class="o">;</span>
<span class="o">}</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<p>BoardApplication에는 @EnalbeJpaAuditing을 추가한다.</p>

<p><strong>BoardApplication 클래스</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="kn">package</span> <span class="nn">org.zerock.board</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.boot.SpringApplication</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.boot.autoconfigure.SpringBootApplication</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.jpa.repository.config.EnableJpaAuditing</span><span class="o">;</span>

<span class="nd">@SpringBootApplication</span>
<span class="nd">@EnableJpaAuditing</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BoardApplication</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">BoardApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
    <span class="o">}</span>

<span class="o">}</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<p>연관관계의 설정은 처음부터 설정하는 방식 보다는 엔티티 클래스들을 구성한 이후에 각 엔티티 클래스의 연관관계를 고민해서 설정하는 것이 더 수월하다.
entity 패키지에 Member(회원), Board(게시물), Reply(댓글) 엔티티 클래스를 추가한다.</p>

<p><img src="/images/Learning_SpringBoot_with_Web_Project/Part3/Chapter5/2021-02-17-18-23-25.png" alt="" /></p>

<p>회원 엔티티 클래스는 최근에 많이 사용하는 이메일(email)을 사용자의 아이디 대신에 사용한다.</p>

<p><strong>Member 클래스</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="rouge-code"><pre><span class="kn">package</span> <span class="nn">org.zerock.board.entity</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">lombok.*</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.persistence.Entity</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.persistence.Id</span><span class="o">;</span>

<span class="nd">@Entity</span>
<span class="nd">@Builder</span>
<span class="nd">@AllArgsConstructor</span>
<span class="nd">@NoArgsConstructor</span>
<span class="nd">@Getter</span>
<span class="nd">@ToString</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Member</span> <span class="kd">extends</span> <span class="nc">BaseEntity</span><span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">email</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
<span class="o">}</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<p>Member 클래스는 이메일 주소를 PK로 사용한다. 따로 FK를 사용하진 않는다. 그래서 별도의 참조가 필요가 없다.</p>

<p>Board 클래스는 Member의 이메일(PK)을 FK로 참조하는 구조이다.</p>

<p><strong>Board 클래스</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="rouge-code"><pre><span class="kn">package</span> <span class="nn">org.zerock.board.entity</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">lombok.*</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.persistence.*</span><span class="o">;</span>

<span class="nd">@Entity</span>
<span class="nd">@Builder</span>
<span class="nd">@AllArgsConstructor</span>
<span class="nd">@NoArgsConstructor</span>
<span class="nd">@Getter</span>
<span class="nd">@ToString</span><span class="o">(</span><span class="n">exclude</span> <span class="o">=</span> <span class="s">"writer"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Board</span> <span class="kd">extends</span> <span class="nc">BaseEntity</span><span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span><span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">bno</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">title</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">content</span><span class="o">;</span>
<span class="o">}</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<p>Reply 클래스는 회원이 아닌 사람도 댓글을 남길 수 있다고 가정하고 Board와 연관관계를 맺지 않은 상태로 처리한다.</p>

<p><br /></p>

<p><strong>Reply 클래스</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="rouge-code"><pre><span class="kn">package</span> <span class="nn">org.zerock.board.entity</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">lombok.*</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.persistence.*</span><span class="o">;</span>

<span class="nd">@Entity</span>
<span class="nd">@Builder</span>
<span class="nd">@AllArgsConstructor</span>
<span class="nd">@NoArgsConstructor</span>
<span class="nd">@Getter</span>
<span class="nd">@ToString</span><span class="o">(</span><span class="n">exclude</span> <span class="o">=</span> <span class="s">"board"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Reply</span> <span class="kd">extends</span> <span class="nc">BaseEntity</span><span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span><span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">rno</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">text</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">replyer</span><span class="o">;</span>
<span class="o">}</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<p>데이터베이스 구조로 보면 앞으로 생성될 board 테이블과 member 테이블에는 FK를 이용한 참조가 걸려 있게 된다. member 쪽의 email을 board에서는 FK로 참조하는 구조이다.</p>

<p><img src="/images/Learning_SpringBoot_with_Web_Project/Part3/Chapter5/2021-02-17-19-00-48.png" alt="" /></p>

<p>board와 member 관계는 N:1(다대일)의 관계가 되므로 JPA에서는 이를 의미하는 @ManyToOne을 적용한다.</p>

<p><em><strong>@ManyToOne은 데이터베이스상에서 외래키의 관계로 연결된 엔티티 클래스에 설정한다.</strong></em></p>

<p>보면 member 엔티티의 PK가 email이니까 board 클래스에서 저렇게 Member writer 위에 어노테이션으로 @ManyToOne를 해주면 자동으로 email과 연관된 FK가 생성되는 것이다.</p>

<p><br /></p>

<p><strong>Board 클래스의 변경</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="rouge-code"><pre><span class="kn">package</span> <span class="nn">org.zerock.board.entity</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">lombok.*</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.persistence.*</span><span class="o">;</span>

<span class="nd">@Entity</span>
<span class="nd">@Builder</span>
<span class="nd">@AllArgsConstructor</span>
<span class="nd">@NoArgsConstructor</span>
<span class="nd">@Getter</span>
<span class="nd">@ToString</span><span class="o">(</span><span class="n">exclude</span> <span class="o">=</span> <span class="s">"writer"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Board</span> <span class="kd">extends</span> <span class="nc">BaseEntity</span><span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span><span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">bno</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">title</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">content</span><span class="o">;</span>
    <span class="nd">@ManyToOne</span><span class="o">(</span><span class="n">fetch</span><span class="o">=</span><span class="nc">FetchType</span><span class="o">.</span><span class="na">LAZY</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Member</span> <span class="n">writer</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Reply 쪽에서는 Board 쪽의 PK를 참조해서 구성되어야 하므로 아래와 같이 수정한다.</p>

<p><br /></p>

<p><strong>Reply 클래스 변경</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="rouge-code"><pre><span class="kn">package</span> <span class="nn">org.zerock.board.entity</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">lombok.*</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.persistence.*</span><span class="o">;</span>

<span class="nd">@Entity</span>
<span class="nd">@Builder</span>
<span class="nd">@AllArgsConstructor</span>
<span class="nd">@NoArgsConstructor</span>
<span class="nd">@Getter</span>
<span class="nd">@ToString</span><span class="o">(</span><span class="n">exclude</span> <span class="o">=</span> <span class="s">"board"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Reply</span> <span class="kd">extends</span> <span class="nc">BaseEntity</span><span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span><span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">rno</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">text</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">replyer</span><span class="o">;</span>
    <span class="nd">@ManyToOne</span><span class="o">(</span><span class="n">fetch</span><span class="o">=</span><span class="nc">FetchType</span><span class="o">.</span><span class="na">LAZY</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Board</span> <span class="n">board</span><span class="o">;</span>
<span class="o">}</span>

</pre></td></tr></tbody></table></code></pre></div></div>
:ET