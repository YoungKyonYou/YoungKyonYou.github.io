I"n<p><span style="color:orange; font-weight:bold"><em>해당 내용은 책 ‘코드로 배우는 스프링 부트 웹 프로젝트’에 나오는 내용이며 이는 개인적으로 공부하기 위해 기록함을 알려드립니다</em></span></p>

<p><br /><br /></p>

<h1 id="api-서비스-만들기"><center>API 서비스 만들기</center></h1>

<p><br /></p>

<p>API 서버는 쉽게 말해서 순수하게 원하는 데이터만을 제공하는 서버라고 생각할 수 있다. 데이터만 제공하기 때문에 클라이언트의 기술이 어떻게 이루어 지는지는 중요하지 않고 서버의 데이터를 여러 형태로 사용하는 것이 가능하다.</p>

<p><br /></p>

<p>예제에서는 간단한 Note를 작성하고 이용하는 예제를 구성한다. 이를 위해 가장 먼저 해야 하는 일은 단순히 JSON 처리를 하는 API 기능을 구성한다. 프로젝트에 entity 패키지 내에 Note 엔티티 클래스를 추가한다.</p>

<p><br /></p>

<p><img src="/images/SpringBoot/LearningSpringbootWithWebProject-12.1/2021-08-08-17-36-18.png" alt="" /></p>

<p><br /></p>

<p><strong>Note.java</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">org.young.club.entity</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">lombok.*</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.persistence.*</span><span class="o">;</span>

<span class="nd">@Entity</span>
<span class="nd">@Builder</span>
<span class="nd">@AllArgsConstructor</span>
<span class="nd">@NoArgsConstructor</span>
<span class="nd">@Getter</span>
<span class="nd">@ToString</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Note</span> <span class="kd">extends</span> <span class="nc">BaseEntity</span><span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span><span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">num</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">title</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">content</span><span class="o">;</span>

    <span class="nd">@ManyToOne</span><span class="o">(</span><span class="n">fetch</span><span class="o">=</span> <span class="nc">FetchType</span><span class="o">.</span><span class="na">LAZY</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">ClubMember</span> <span class="n">writer</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">changeTitle</span><span class="o">(</span><span class="nc">String</span> <span class="n">title</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">title</span><span class="o">=</span><span class="n">title</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">changeContent</span><span class="o">(</span><span class="nc">String</span> <span class="n">content</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">content</span><span class="o">=</span><span class="n">content</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p>Note 클래스는 Clubmember와 @ManyToOne의 관계로 구성하고, 나중에 로그인한 사용자와 비교하기 위해 사용한다. Note에서 수정이 가능한 부분은 제목(title)과 내용(content)이므로 이에 대한 수정이 가능하도록 changetitle(), changeContent()를 구성한다. Note에 대한 JPA 처리는 NoteRepository를 구성한다.</p>

<p><br /></p>

:ET