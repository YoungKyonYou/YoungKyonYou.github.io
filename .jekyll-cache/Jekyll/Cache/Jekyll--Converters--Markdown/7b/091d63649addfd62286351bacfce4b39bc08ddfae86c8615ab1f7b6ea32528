I"@@<p><br /><br />
<em><strong>15시간을 컴퓨터 앞에서 불태웠다..</strong></em>
<br />
(Press the Button)</p>

<p><br /><br /></p>

<style>
.containercoffee {
  width: 300px;
  height: 280px;
  position: relative;
  top: calc(50% - 140px);
  left: calc(50% - 150px);
}
.coffee-header {
  width: 100%;
  height: 80px;
  position: absolute;
  top: 0;
  left: 0;
  background-color: #ddcfcc;
  border-radius: 10px;
}
.coffee-header__buttons {
  width: 25px;
  height: 25px;
  position: absolute;
  top: 25px;
  background-color: #282323;
  border-radius: 50%;
}
.coffee-header__buttons::after {
  content: "";
  width: 8px;
  height: 8px;
  position: absolute;
  bottom: -8px;
  left: calc(50% - 4px);
  background-color: #615e5e;
}
.coffee-header__button-one {
  left: 15px;
}
.coffee-header__button-two {
  left: 50px;
}
.coffee-header__display {
  width: 50px;
  height: 50px;
  position: absolute;
  top: calc(50% - 25px);
  left: calc(50% - 25px);
  border-radius: 50%;
  background-color: #9acfc5;
  border: 5px solid #43beae;
  box-sizing: border-box;
}
.coffee-header__details {
  width: 8px;
  height: 20px;
  position: absolute;
  top: 10px;
  right: 10px;
  background-color: #9b9091;
  box-shadow: -12px 0 0 #9b9091, -24px 0 0 #9b9091;
}
.coffee-medium {
  width: 90%;
  height: 160px;
  position: absolute;
  top: 80px;
  left: calc(50% - 45%);
  background-color: #bcb0af;
}
.coffee-medium:before {
  content: "";
  width: 90%;
  height: 100px;
  background-color: #776f6e;
  position: absolute;
  bottom: 0;
  left: calc(50% - 45%);
  border-radius: 20px 20px 0 0;
}
.coffe-medium__exit {
  width: 60px;
  height: 20px;
  position: absolute;
  top: 0;
  left: calc(50% - 30px);
  background-color: #231f20;
}
.coffe-medium__exit::before {
  content: "";
  width: 50px;
  height: 20px;
  border-radius: 0 0 50% 50%;
  position: absolute;
  bottom: -20px;
  left: calc(50% - 25px);
  background-color: #231f20;
}
.coffe-medium__exit::after {
  content: "";
  width: 10px;
  height: 10px;
  position: absolute;
  bottom: -30px;
  left: calc(50% - 5px);
  background-color: #231f20;
}
.coffee-medium__arm {
  width: 70px;
  height: 20px;
  position: absolute;
  top: 15px;
  right: 25px;
  background-color: #231f20;
}
.coffee-medium__arm::before {
  content: "";
  width: 15px;
  height: 5px;
  position: absolute;
  top: 7px;
  left: -15px;
  background-color: #9e9495;
}
.coffee-medium__cup {
  width: 80px;
  height: 47px;
  position: absolute;
  bottom: 0;
  left: calc(50% - 40px);
  background-color: #FFF;
  border-radius: 0 0 70px 70px / 0 0 110px 110px;
}
.coffee-medium__cup::after {
  content: "";
  width: 20px;
  height: 20px;
  position: absolute;
  top: 6px;
  right: -13px;
  border: 5px solid #FFF;
  border-radius: 50%;
}
@keyframes liquid {
  0% {
    height: 0px;  
    opacity: 1;
  }
  5% {
    height: 0px;  
    opacity: 1;
  }
  20% {
    height: 62px;  
    opacity: 1;
  }
  95% {
    height: 62px;
    opacity: 1;
  }
  100% {
    height: 62px;
    opacity: 0;
  }
}
.coffee-medium__liquid {
  width: 6px;
  height: 63px;
  opacity: 0;
  position: absolute;
  top: 50px;
  left: calc(50% - 3px);
  background-color: #74372b;
  animation: liquid 4s 4s linear infinite;
}
.coffee-medium__smoke {
  width: 8px;
  height: 20px;
  position: absolute;  
  border-radius: 5px;
  background-color: #b3aeae;
}
@keyframes smokeOne {
  0% {
    bottom: 20px;
    opacity: 0;
  }
  40% {
    bottom: 50px;
    opacity: .5;
  }
  80% {
    bottom: 80px;
    opacity: .3;
  }
  100% {
    bottom: 80px;
    opacity: 0;
  }
}
@keyframes smokeTwo {
  0% {
    bottom: 40px;
    opacity: 0;
  }
  40% {
    bottom: 70px;
    opacity: .5;
  }
  80% {
    bottom: 80px;
    opacity: .3;
  }
  100% {
    bottom: 80px;
    opacity: 0;
  }
}
.coffee-medium__smoke-one {
  opacity: 0;
  bottom: 50px;
  left: 102px;
  animation: smokeOne 3s 4s linear infinite;
}
.coffee-medium__smoke-two {
  opacity: 0;
  bottom: 70px;
  left: 118px;
  animation: smokeTwo 3s 5s linear infinite;
}
.coffee-medium__smoke-three {
  opacity: 0;
  bottom: 65px;
  right: 118px;
  animation: smokeTwo 3s 6s linear infinite;
}
.coffee-medium__smoke-for {
  opacity: 0;
  bottom: 50px;
  right: 102px;
  animation: smokeOne 3s 5s linear infinite;
}
.coffee-footer {
  width: 95%;
  height: 15px;
  position: absolute;
  bottom: 25px;
  left: calc(50% - 47.5%);
  background-color: #41bdad;
  border-radius: 10px;
}
.coffee-footer::after {
  content: "";
  width: 106%;
  height: 26px;
  position: absolute;
  bottom: -25px;
  left: -8px;
  background-color: #000;
}
</style>

<div class="containercoffee">
    <div class="coffee-header">
      <div class="coffee-header__buttons coffee-header__button-one"></div>
      <div class="coffee-header__buttons coffee-header__button-two"></div>
      <div class="coffee-header__display"></div>
      <div class="coffee-header__details"></div>
    </div>
    <div class="coffee-medium">
      <div class="coffe-medium__exit"></div>
      <div class="coffee-medium__arm"></div>
      <div class="coffee-medium__liquid"></div>
      <div class="coffee-medium__smoke coffee-medium__smoke-one"></div>
      <div class="coffee-medium__smoke coffee-medium__smoke-two"></div>
      <div class="coffee-medium__smoke coffee-medium__smoke-three"></div>
      <div class="coffee-medium__smoke coffee-medium__smoke-for"></div>
      <div class="coffee-medium__cup"></div>
    </div>
    <div class="coffee-footer"></div>
</div>

<p><br /><br /><br /><br /><br /><br /><br /><br /></p>

<h1 id="websocket을-다른-프로젝트로-분리하기"><center>WebSocket을 다른 프로젝트로 분리하기</center></h1>

<p><br /></p>

<p>이전 포스팅에 이어서 이야기 해보자.</p>

<p><br /></p>

<p><span style="color:orange; font-weight:bold">WebSocket</span>를 분리한 프로젝트는 아래 링크를 통해서 찾을 수 있다.</p>

<p><br /></p>

<p><strong><a href="https://github.com/YoungKyonYou/Frames-Websocket/blob/master/build.gradle">c</a></strong></p>

<p><br /></p>

<p>그리고 기존에 있던 프로젝트에서 <span style="color:orange; font-weight:bold">WebSocket</span>를 분리 해야 한다. 그리고 원래 Spring Security를 통한 Login 기능도 있지만 이를 제거했다.</p>

<p><br /></p>

<p><strong><a href="https://github.com/YoungKyonYou/Frames-App">Frames-App</a></strong></p>

<p><br /></p>

<p>위 프로젝트를 구성하면서 중요한 점들을 하나 하나 살펴보자.</p>

<p><br /></p>

<p>먼저 <span style="color:orange; font-weight:bold">Frames-Websocket</span>의 <span style="color:orange; font-weight:bold">port</span>를 변경한다.</p>

<p><br /></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">server.port = </span><span class="m">8081</span>
</code></pre></div></div>

<p><br /></p>

<p>그 다음 <strong>FacilityController.java</strong>에서 <span style="color:orange; font-weight:bold">SimpMessagingTemplate template</span>를 선언 해주는 것이 필요하다. 이를 사용해 client에게 <span style="color:orange; font-weight:bold">broadcasting</span>를 할 것이기 때문이다. 아래 코드를 보자</p>

<p><br /></p>

<p><strong>FacilityController.java</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">org.morgorithm.websocket.controller</span><span class="o">;</span>


<span class="kn">import</span> <span class="nn">org.morgorithm.websocket.dto.EventDTO</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.morgorithm.websocket.dto.RealTimeStatusDTO</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.morgorithm.websocket.service.StatusService</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.messaging.handler.annotation.MessageMapping</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.messaging.handler.annotation.Payload</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.messaging.handler.annotation.SendTo</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.messaging.simp.SimpMessagingTemplate</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.scheduling.annotation.Scheduled</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>


<span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FacilityController</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">StatusService</span> <span class="n">statusService</span><span class="o">;</span>
    <span class="nd">@Autowired</span>
    <span class="nc">SimpMessagingTemplate</span> <span class="n">template</span><span class="o">;</span>


    <span class="nd">@MessageMapping</span><span class="o">(</span><span class="s">"/status.sendMessage"</span><span class="o">)</span>
    <span class="nd">@SendTo</span><span class="o">(</span><span class="s">"/topic/public"</span><span class="o">)</span>
    <span class="nd">@Scheduled</span><span class="o">(</span><span class="n">fixedDelay</span><span class="o">=</span><span class="mi">3000</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sendMessage</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">RealTimeStatusDTO</span> <span class="n">dto</span> <span class="o">=</span> <span class="n">statusService</span><span class="o">.</span><span class="na">getFacilityStatus</span><span class="o">();</span>
        <span class="n">template</span><span class="o">.</span><span class="na">convertAndSend</span><span class="o">(</span><span class="s">"/topic/public"</span><span class="o">,</span> <span class="n">dto</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p><br /></p>

<p>위 코드에서는 Scheduled 어노테이션으로 3초 마다 해당 메소드를 호출하게끔 한다. 그리고 앞서 선언한 template을 사용해 <span style="color:orange; font-weight:bold">/topic/public</span>를 구독하는 client에게 dto를 payload에 담아서 보내준다.</p>

<p><br /></p>

<p>그리고 <strong>WebSocketEventListener.java</strong>에 보면 <span style="color:orange; font-weight:bold">@CrossOrigin(origins = “http://192.168.1.17:8080”)</span>라고 되어 있는 부분이 있다. 이는 CORS를 해결하기 위한 것이다. 나중에 이에 대해 더 자세히 다루겠다. 해당 ip 192.168.1.17은 쿠버네티스 클러스터에서 <strong>Frames-App</strong>를 외부에 노출 시킬 때 사용할 ip이다.</p>

<p><br /></p>

<p>그리고 <strong>Frames-App</strong>의 핵심적인 부분을 살펴보자.</p>

<p><br /></p>

<p><strong>facilityStatus.js</strong></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(...)</span>
<span class="kd">function</span> <span class="nx">connect</span><span class="p">()</span> <span class="p">{</span>


    <span class="kd">var</span> <span class="nx">socket</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SockJS</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://192.168.1.16/ws</span><span class="dl">'</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="p">{</span><span class="na">transports</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">xhr-streaming</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">xhr-polling</span><span class="dl">"</span><span class="p">]});</span>

    <span class="nx">chatPage</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="dl">'</span><span class="s1">hidden</span><span class="dl">'</span><span class="p">);</span>
    <span class="nx">stompClient</span> <span class="o">=</span> <span class="nx">Stomp</span><span class="p">.</span><span class="nx">over</span><span class="p">(</span><span class="nx">socket</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">connected3</span><span class="dl">"</span><span class="p">);</span>
    <span class="nx">stompClient</span><span class="p">.</span><span class="nx">connect</span><span class="p">({},</span> <span class="nx">onConnected</span><span class="p">,</span> <span class="nx">onError</span><span class="p">);</span>

<span class="p">}</span>
<span class="kd">function</span> <span class="nx">onConnected</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">onConnected() in facilitStatus.js 호출</span><span class="dl">"</span><span class="p">);</span>
    <span class="nx">stompClient</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="dl">'</span><span class="s1">/topic/public</span><span class="dl">'</span><span class="p">,</span> <span class="nx">onMessageReceived</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">after stompClient.subscribe</span><span class="dl">"</span><span class="p">);</span>


    <span class="nx">connectingElement</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="dl">'</span><span class="s1">hidden</span><span class="dl">'</span><span class="p">);</span>
<span class="p">}</span>
<span class="p">(...)</span>
</code></pre></div></div>

<p><br /></p>

<p>위 코드에서 핵심적인 것은 이제 sendMessage() 함수를 없애버리는 것과 위의 SockJS에서 특정 IP에 요청을 보내는 부분이다. IP 192.168.1.16은 쿠버네티스 클러스터에서 외부에 <strong>Frames-WebSocket</strong> 앱을 노출시킬 때 사용할 IP이다.</p>

<link href="http://fonts.googleapis.com/earlyaccess/hanna.css" rel="stylesheet" />

<div style="background: #eee;
  box-shadow: 0 8px 8px -4px lightblue; font-family: 'Hanna', sans-serif; padding: 40px;">

여기서 포트를 명시하지 않은 이유는 우리가 쿠버네티스 클러스터에서 Frames-WebSocket를 노출 시킬 때 해당 ip로 접근하게 되면 자동으로 8081 포트로 매핑될 수 있도록 명시할 것이기 때문이다 </div>

<p><br /></p>

<p>이제 이 두 프로젝트를 도커 허브에 저장한 다음 pod로 배포한다.</p>

<p><br /></p>

<p>도커 허브에 저장하는 과정은 아래 링크를 참고한다.</p>

<p><br /></p>

<p><strong><a href="http://localhost:4000/kubernetes/2021/08/27/Kubernetes-springboot.html">SpringBoot 앱을 도커 이미지로 변환 후 Deployment로 배포하고 접근하는 방법</a></strong></p>

<p><br /></p>

<p>여기서 나는 Frames-Websocket은</p>

<p><br /></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">--tag</span> youngkyonyou/springboot-project:websockettest <span class="nb">.</span>
docker push youngkyonyou/springboot-project:websockettest
</code></pre></div></div>

<p><br /></p>

<p>으로 저장했고 Frames-App은</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">--tag</span> youngkyonyou/springboot-project:websockettest <span class="nb">.</span>
docker push youngkyonyou/springboot-project:websockettest
</code></pre></div></div>
:ET