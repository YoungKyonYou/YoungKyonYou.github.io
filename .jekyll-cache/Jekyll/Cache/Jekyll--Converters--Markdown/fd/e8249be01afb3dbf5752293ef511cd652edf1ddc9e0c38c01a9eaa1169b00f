I"`h<p><br /><br /></p>

<p><strong><em>해당 내용은 책 &lt;컨테이너 인프라 환경 구축을 위한 쿠버네티스/도커&gt;에 나오는 내용이며 이는 개인적으로 공부하기 위해서 게시하는 글임을 알립니다.</em></strong></p>

<h1 id="쿠버네티스-구성하기"><center>쿠버네티스 구성하기</center></h1>

<p><br /></p>

<blockquote>
  <p>Vagranfile 87pg</p>
</blockquote>

<p><br /></p>

<p><strong>Vagrantfile</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
</pre></td><td class="rouge-code"><pre><span class="c"># -*- mode: ruby -*-</span>
<span class="c"># vi: set ft=ruby :</span>

Vagrant.configure<span class="o">(</span><span class="s2">"2"</span><span class="o">)</span> <span class="k">do</span> |config|
  N <span class="o">=</span> 3 <span class="c"># max number of worker nodes</span>
  Ver <span class="o">=</span> <span class="s1">'1.18.4'</span> <span class="c"># Kubernetes Version to install</span>

  <span class="c">#=============#</span>
  <span class="c"># Master Node #</span>
  <span class="c">#=============#</span>

    config.vm.define <span class="s2">"m-k8s"</span> <span class="k">do</span> |cfg|
      cfg.vm.box <span class="o">=</span> <span class="s2">"sysnet4admin/CentOS-k8s"</span>
      cfg.vm.provider <span class="s2">"virtualbox"</span> <span class="k">do</span> |vb|
        vb.name <span class="o">=</span> <span class="s2">"m-k8s(github_SysNet4Admin)"</span>
        vb.cpus <span class="o">=</span> 2
        vb.memory <span class="o">=</span> 3072
        vb.customize <span class="o">[</span><span class="s2">"modifyvm"</span>, :id, <span class="s2">"--groups"</span>, <span class="s2">"/k8s-SgMST-1.13.1(github_SysNet4Admin)"</span><span class="o">]</span>
      end
      cfg.vm.host_name <span class="o">=</span> <span class="s2">"m-k8s"</span>
      cfg.vm.network <span class="s2">"private_network"</span>, ip: <span class="s2">"192.168.1.10"</span>
      cfg.vm.network <span class="s2">"forwarded_port"</span>, guest: 22, host: 60010, auto_correct: <span class="nb">true</span>, <span class="nb">id</span>: <span class="s2">"ssh"</span>
      cfg.vm.synced_folder <span class="s2">"../data"</span>, <span class="s2">"/vagrant"</span>, disabled: <span class="nb">true
      </span>cfg.vm.provision <span class="s2">"shell"</span>, path: <span class="s2">"config.sh"</span>, args: N
      cfg.vm.provision <span class="s2">"shell"</span>, path: <span class="s2">"install_pkg.sh"</span>, args: <span class="o">[</span> Ver, <span class="s2">"Main"</span> <span class="o">]</span>
      cfg.vm.provision <span class="s2">"shell"</span>, path: <span class="s2">"master_node.sh"</span>
    end

  <span class="c">#==============#</span>
  <span class="c"># Worker Nodes #</span>
  <span class="c">#==============#</span>

  <span class="o">(</span>1..N<span class="o">)</span>.each <span class="k">do</span> |i|
    config.vm.define <span class="s2">"w#{i}-k8s"</span> <span class="k">do</span> |cfg|
      cfg.vm.box <span class="o">=</span> <span class="s2">"sysnet4admin/CentOS-k8s"</span>
      cfg.vm.provider <span class="s2">"virtualbox"</span> <span class="k">do</span> |vb|
        vb.name <span class="o">=</span> <span class="s2">"w#{i}-k8s(github_SysNet4Admin)"</span>
        vb.cpus <span class="o">=</span> 1
        vb.memory <span class="o">=</span> 2560
        vb.customize <span class="o">[</span><span class="s2">"modifyvm"</span>, :id, <span class="s2">"--groups"</span>, <span class="s2">"/k8s-SgMST-1.13.1(github_SysNet4Admin)"</span><span class="o">]</span>
      end
      cfg.vm.host_name <span class="o">=</span> <span class="s2">"w#{i}-k8s"</span>
      cfg.vm.network <span class="s2">"private_network"</span>, ip: <span class="s2">"192.168.1.10#{i}"</span>
      cfg.vm.network <span class="s2">"forwarded_port"</span>, guest: 22, host: <span class="s2">"6010#{i}"</span>, auto_correct: <span class="nb">true</span>, <span class="nb">id</span>: <span class="s2">"ssh"</span>
      cfg.vm.synced_folder <span class="s2">"../data"</span>, <span class="s2">"/vagrant"</span>, disabled: <span class="nb">true
      </span>cfg.vm.provision <span class="s2">"shell"</span>, path: <span class="s2">"config.sh"</span>, args: N
      cfg.vm.provision <span class="s2">"shell"</span>, path: <span class="s2">"install_pkg.sh"</span>, args: Ver
      cfg.vm.provision <span class="s2">"shell"</span>, path: <span class="s2">"work_nodes.sh"</span>
    end
  end

end
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<p>이제 한 줄 한 줄씩 알아가보자</p>

<p><br /></p>

<p><strong>Vagrantfile</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
</pre></td><td class="rouge-code"><pre><span class="c">#아래 두줄의 주석은 에디터에 현재 파일이 루비임을 인식하게 하는 호환 코드이다.</span>
<span class="c">#ft는 file type(파일종류)의 약자이다.</span>
<span class="c"># -*- mode: ruby -*-</span>
<span class="c"># vi: set ft=ruby :</span>

<span class="c">#"2"는 configuration object |config|의 버전을 명시하는 것이다.</span>
<span class="c">#이것은 configuration 블록으로 사용된다.</span>
Vagrant.configure<span class="o">(</span><span class="s2">"2"</span><span class="o">)</span> <span class="k">do</span> |config|

  <span class="c">#생성할 뭐커노드 개수 정의</span>
  N <span class="o">=</span> 3 <span class="c"># max number of worker nodes</span>
  <span class="c">#다운받을 쿠버네티스 버젼 정의</span>
  Ver <span class="o">=</span> <span class="s1">'1.18.4'</span> <span class="c"># Kubernetes Version to install</span>

  <span class="c">#=============#</span>
  <span class="c"># Master Node #</span>
  <span class="c">#=============#</span>


    <span class="c">#https://www.vagrantup.com/docs/vagrantfile/machine_settings 참고</span>
    <span class="c">#config.vm.define: 버추얼박스에서 보이는 가상 머신을 "m-k8s"로 정의한다.</span>
    <span class="c">#do |cfg|를 추가해 원하는 설정으로 변경한다.</span>
    config.vm.define <span class="s2">"m-k8s"</span> <span class="k">do</span> |cfg|

        <span class="c">#config.vm.box: 어떤 box에 대해 machine이 표시되는지 구성한다. 여기에 값은</span>
        <span class="c">#HashiCorp's Vagrant Clout에 설치된 박스나 약칭으로된 이름이 들어가야 한다.</span>
        <span class="c">#즉 사람들이 만들어 놓은 운영체제 이미지의 이름이 들어간다.</span>
        <span class="c">#42pg를 보면 필자가 만들어 놓은 운영체제 이미지를 사용한다.</span>
        <span class="c">#필자가 만든 운영체제 이미지의 이름이 "sysnet4admin/CentOS-k8s"이다.</span>
      <span class="c">#https://app.vagranup.com/sysnet4admin/boxes/CentOS-k8s에서 확인할 수 있다.</span>
      cfg.vm.box <span class="o">=</span> <span class="s2">"sysnet4admin/CentOS-k8s"</span>

      <span class="c">#베이그런트의 프로바이더(provider)가 버추얼박스라는 것을 정의한다. 프로바이더는</span>
      <span class="c">#베이그런트를 통해 제공되는 코드가 실제로 가상 머신으로 배포되게 하는 소프트웨어이다.</span>
      <span class="c">#버추얼박스가 여기에 해당한다. 다음으로 버추얼박스에 필요한 설정을 정의하는데</span>
      <span class="c">#그 시작을 do |vb|로 선언한다. provider가 존재하지 않을 경우 Vagrant는  이 설정 블록을</span>
      <span class="c">#무시한다.</span>
      cfg.vm.provider <span class="s2">"virtualbox"</span> <span class="k">do</span> |vb|

      <span class="c">#VirtualBox provider는 더 VirtualBox 기반 Vagrant 환경을 보다 세밀하게 제어할 수 있는</span>
      <span class="c">#몇 가지 추가 구성 옵션을 제공한다.</span>
      <span class="c">#https://www.vagrantup.com/docs/providers/virtualbox/configuration 참고</span>

      <span class="c">#버추얼박스에 생성한 가상 머신의 이름, CPU 수, 메모리 크기, 소속된 그룹을 명시한다.</span>
      <span class="c">#그리고 마지막으로 end를 적어 버추얼박스 설정이 끝났음을 알린다.</span>

      <span class="c">#VirtualBox GUI에 표시될 이름을 설정한다</span>
        vb.name <span class="o">=</span> <span class="s2">"m-k8s(github_SysNet4Admin)"</span>
        vb.cpus <span class="o">=</span> 2
        vb.memory <span class="o">=</span> 3072

       <span class="c"># :id는 생성되는 가상 머신의 ID를 반환하는 특별한 매개변수이다.</span>
       <span class="c">#그래서 VBoxManage 커맨드가 ID를 요구할 때 이 특별한 매개변수를 사용한다.</span>
       <span class="c">#--groups를 이용해서 명시된 그룹으로 분리하는 것이다.</span>
       <span class="c"># 여러개의 vms가 있으면 헷갈릴 수 있으므로 분류한다.</span>
       <span class="c">#modifyvm은 ID에 해당하는 vm의 설정을 한다.</span>
        vb.customize <span class="o">[</span><span class="s2">"modifyvm"</span>, :id, <span class="s2">"--groups"</span>, <span class="s2">"/k8s-SgMST-1.13.1(github_SysNet4Admin)"</span><span class="o">]</span>
      end

      <span class="c">#여기서는 가상 머신 자체에 대한 설정이다.</span>
      <span class="c">#do |cfg|에 속한 작업이다. 즉 호스트의 이름(m-k8s)을 설정한다.</span>
      <span class="c">#SSH에 보여질 호스트 이름이다.</span>
      cfg.vm.host_name <span class="o">=</span> <span class="s2">"m-k8s"</span>

      <span class="c">#호스트 전용 네트워크를 private_network로 설정해 eth1 인터페이스를</span>
      <span class="c">#호스트 전용(Host-Only)으로 구성하고 IP는 192.168.1.10으로 지정한다. 고정 IP를 설정해주는 방법이다.</span>
      cfg.vm.network <span class="s2">"private_network"</span>, ip: <span class="s2">"192.168.1.10"</span>

      <span class="c">#ssh 통신은 호스트 60010번을 게스트 22번으로 전달되도록 구성한다.</span>
      <span class="c">#이때 혹시 모를 포트 중복을 대비해 auto_correct: true로 설정해서</span>
      <span class="c">#포트가 중복되면 포트가 자동으로 변경되도록 한다.</span>
      cfg.vm.network <span class="s2">"forwarded_port"</span>, guest: 22, host: 60010, auto_correct: <span class="nb">true</span>, <span class="nb">id</span>: <span class="s2">"ssh"</span>

      <span class="c">#호스트(PC 또는 노트북)와 게스트(가상 머신) 사이에</span>
      <span class="c">#디렉터리 동기화가 이뤄지지 않게 설정(disabled: true)한다.</span>
      <span class="c">#첫 번째 파라미터는 host의 경로이다 두 번째 파라미터는 guest(vm)의 경로이다.</span>
      <span class="c">#가상머신에 들어가보면 /vagrant 경로에 Vagrantfile이 있다</span>
      cfg.vm.synced_folder <span class="s2">"../data"</span>, <span class="s2">"/vagrant"</span>, disabled: <span class="nb">true</span>


      <span class="c">#vm.provision "shell" 구문으로 경로(path)에 있는 install_pkg.sh와 config.sh를</span>
      <span class="c">#게스트(CentOS) 내부에서 호출해 실행되도록 한다.</span>
      <span class="c">#변수 (N=3)를 args: N으로 받는다. 이는 사용자가 워커 노드의 개수를 직접 조절할 수 있게 한다.</span>
      cfg.vm.provision <span class="s2">"shell"</span>, path: <span class="s2">"config.sh"</span>, args: N

      <span class="c">#args: [Ver, "Main"] 코드를 추가해 쿠버네티스 버전 정보(Ver)와 Main이라</span>
      <span class="c">#는 문자를 install_pkg.sh로 넘긴다. Ver 변수는 각 노드에 해당 버전의 쿠버네티스 버전을</span>
      <span class="c">#설치하게 한다. 두 번째 인자인 Main 문자는 install_pkg.sh에서 조건문으로 처리해 마스터</span>
      <span class="c">#노드에만 이 책의 전체 실행 코드를 내려받게 한다.</span>
      cfg.vm.provision <span class="s2">"shell"</span>, path: <span class="s2">"install_pkg.sh"</span>, args: <span class="o">[</span> Ver, <span class="s2">"Main"</span> <span class="o">]</span>

      <span class="c">#쿠버네티스 마스터 노드를 위한 master_node.sh</span>
      cfg.vm.provision <span class="s2">"shell"</span>, path: <span class="s2">"master_node.sh"</span>
    end

  <span class="c">#==============#</span>
  <span class="c"># Worker Nodes #</span>
  <span class="c">#==============#</span>

   <span class="c">#for 문을 돌리는데 여기서 i는 1부터 3까지 대입되며 반복된다.</span>
   <span class="c">#즉 N=3임으로 3번 구문을 반복하여 Worker Node를 3개를 만드는 것이다.</span>
  <span class="o">(</span>1..N<span class="o">)</span>.each <span class="k">do</span> |i|

    <span class="c"># #{i} 구문으로 i의 값을 가져온다 그래서 w1-k8s, w2-k8s, w3-k8s로 가상머신을 정의한다.</span>
    <span class="c">#버추얼박스에서 보이는 가상 머신을 정의하는 것이다.</span>
    config.vm.define <span class="s2">"w#{i}-k8s"</span> <span class="k">do</span> |cfg|

    <span class="c">#config.vm.box: 어떤 box에 대해 machine이 표시되는지 구성한다. 여기에 값은</span>
    <span class="c">#HashiCorp's Vagrant Clout에 설치된 박스나 약칭으로된 이름이 들어가야 한다.</span>
    <span class="c">#즉 사람들이 만들어 놓은 운영체제 이미지의 이름이 들어간다.</span>
    <span class="c">#42pg를 보면 필자가 만들어 놓은 운영체제 이미지를 사용한다.</span>
    <span class="c">#필자가 만든 운영체제 이미지의 이름이 "sysnet4admin/CentOS-k8s"이다.</span>
    <span class="c">#https://app.vagranup.com/sysnet4admin/boxes/CentOS-k8s에서 확인할 수 있다.</span>
      cfg.vm.box <span class="o">=</span> <span class="s2">"sysnet4admin/CentOS-k8s"</span>

      <span class="c">#베이그런트의 프로바이더(provider)가 버추얼박스라는 것을 정의한다. 프로바이더는</span>
      <span class="c">#베이그런트를 통해 제공되는 코드가 실제로 가상 머신으로 배포되게 하는 소프트웨어이다.</span>
      <span class="c">#버추얼박스가 여기에 해당한다. 다음으로 버추얼박스에 필요한 설정을 정의하는데</span>
      <span class="c">#그 시작을 do |vb|로 선언한다. provider가 존재하지 않을 경우 Vagrant는 이 설정 블록을</span>
      <span class="c">#무시한다.</span>
      cfg.vm.provider <span class="s2">"virtualbox"</span> <span class="k">do</span> |vb|

        vb.name <span class="o">=</span> <span class="s2">"w#{i}-k8s(github_SysNet4Admin)"</span>
        vb.cpus <span class="o">=</span> 1
        vb.memory <span class="o">=</span> 2560
        vb.customize <span class="o">[</span><span class="s2">"modifyvm"</span>, :id, <span class="s2">"--groups"</span>, <span class="s2">"/k8s-SgMST-1.13.1(github_SysNet4Admin)"</span><span class="o">]</span>
      end

      <span class="c">#여기서는 가상 머신 자체에 대한 설정이다.</span>
       <span class="c">#do |cfg|에 속한 작업이다. 즉 호스트의 이름(w#{i}-k8s)을 설정한다.</span>
       <span class="c">#superputty의 ssh에서 나타날 호스트 이름이다.</span>
      cfg.vm.host_name <span class="o">=</span> <span class="s2">"w#{i}-k8s"</span>

      <span class="c">#생략</span>
      cfg.vm.network <span class="s2">"private_network"</span>, ip: <span class="s2">"192.168.1.10#{i}"</span>
      cfg.vm.network <span class="s2">"forwarded_port"</span>, guest: 22, host: <span class="s2">"6010#{i}"</span>, auto_correct: <span class="nb">true</span>, <span class="nb">id</span>: <span class="s2">"ssh"</span>
      cfg.vm.synced_folder <span class="s2">"../data"</span>, <span class="s2">"/vagrant"</span>, disabled: <span class="nb">true
      </span>cfg.vm.provision <span class="s2">"shell"</span>, path: <span class="s2">"config.sh"</span>, args: N
      cfg.vm.provision <span class="s2">"shell"</span>, path: <span class="s2">"install_pkg.sh"</span>, args: Ver

      <span class="c">#쿠버네티스 워커 노드를 위한 work_nodes.sh이다.</span>
      cfg.vm.provision <span class="s2">"shell"</span>, path: <span class="s2">"work_nodes.sh"</span>
    end
  end

end
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<p>config.sh는 kubeadm으로 쿠버네티스를 설치하기 위한 사전 조건을 설정하는 스크립트 파일이다. 쿠버네티스의 노드가 되는 가상 머신에 어떤 값을 설정하는지 알아본다.</p>

<p><br /></p>

<p><strong>config.sh</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
</pre></td><td class="rouge-code"><pre><span class="c">#!/usr/bin/env bash</span>

<span class="c">#vim configuration</span>
<span class="c">#vi를 호출하면 vim을 호출하도록 프로파일에 입력한다</span>
<span class="c">#이렇게 하면 코드에 하이라이트를 넣어 코드를 쉽게 구분할 수 있다.</span>
<span class="c">#리눅스 alias 설정 'alias 별명='명령어 정의'' 를 /etc/profile에 정의하면 된다.</span>
<span class="nb">echo</span> <span class="s1">'alias vi=vim'</span> <span class="o">&gt;&gt;</span> /etc/profile

<span class="c"># swapoff -a는 스왑을 중지시키라는 명령어이다.</span>
<span class="c"># 스왑을 내렸다 다시 시작해 스왑 메모리를 반환 하는데 사용한다.</span>
<span class="c">#swap은 시스템에 메모리가 부족할 경우에 하드 디스크의 일부 공간을 활용하여</span>
<span class="c">#계속 작업을 도와주는 영역이다. 리눅스에서는 RAM 공간이 부족하면 하드디스크의</span>
<span class="c">#일부 공간을 사용하게 되는데 권장되지 않는다.(하드디스크는 접근 속도가 느리다)</span>
<span class="c"># swapoff -a to disable swapping</span>
swapoff <span class="nt">-a</span>

<span class="c">#시스템이 다시 시작되더라도 스왑되지 않도록 설정한다.</span>
<span class="c"># sed to comment the swap partition in /etc/fstab</span>
<span class="c">#sed는 vi 편집기랑 마찬가지로 편집에 특화된 명령어이다. 수정, 치환, 삭제, 글추가 등 편집기 기능은</span>
<span class="c">#웬만해서 다 된다. vi는 편집기를 열어서 커서로 라인을 옮기고 글을 삭제하고 쓰고 하는 등 워드 파일을</span>
<span class="c">#수정하는 것과 같다면 sed는 명령행에서 파일을 인자로 받아 명령어를 통해 작업한 후 결과를</span>
<span class="c">#화면으로 확인하는 방식이다. 특징은 sed 편집기는 원본을 손상시키지 않고 수정한 후 결과를 보여준다</span>
<span class="c">#그래서 원본을 수정하려면 -i 옵션이 필요한 것이다.</span>
<span class="c">#.bak 확장자는 컴퓨터로 작업중에 생길 수 있는 전원 차단과 같은 갑자기 컴퓨터가 꺼질 경우를 대비해</span>
<span class="c">#자동으로 만들어지는 백업 파일이다. 여기서 sed -i.bak은 원본 수정 후 .bak 확장자로 파일을 생성하여 백업</span>
<span class="c">#하라는 것이다. 즉 /etc 아래 fstab.bak 파일이 하나 생긴다</span>
<span class="c">#/etc/fstab은 파일 시스템 정보를 저장하고 있으며 리눅스 부팅시 마운트 정보를 저장하고 있다.</span>
<span class="c">#이 파일안에 있는 구성값들로 인해 부팅시에 자동으로 적용될 수 있도록 한다. </span>
<span class="c">#s/문자1/문자2/ [파일]은 파일 안에 있는 문자1을 2로 바꾸라는 옵션이다.</span>
<span class="c">#여기선 /etc/fstab이라는 파일을 열어서 수정한다는 것이다. </span>
<span class="c">#그리고 아래를 보면 .+ 라고 되어 있는 부분은 정규식 표현이다 즉 .은 임의의 한 문자를 의미하고</span>
<span class="c">#+은 바로 앞의 문자가 1회 이상 반복된다는 뜻이다. </span>
<span class="c">#즉 swap 이 중간에 있고 그 앞과 뒤에 반복적으로 임의의 문자가 여러 개있는 다시 말해 그 라인을 선택한다.</span>
<span class="c">#/etc/fstab에 들어가보면</span>
<span class="c">#/dev/mapper/centos_k8s-swap swap                    swap    defaults        0 0</span>
<span class="c"># 이것 라인 전체를 선택하고 이것은 \1로 역참조하고 주석(#) 앞에 다가 이 라인을 넣으라는 것</span>
<span class="c">#다시 말해 주석을 처리하는 것이다. </span>


<span class="c">#시스템이 다시 시작되더라도 스왑되지 않도록 설정하려면</span>
<span class="c">#/etc/fstab 파일을 열여서 swap 인트리에 주석'#'을 달아야한다. </span>
<span class="nb">sed</span> <span class="nt">-i</span>.bak <span class="nt">-r</span> <span class="s1">'s/(.+ swap .+)/#\1/'</span> /etc/fstab

<span class="c"># kubernetes repo</span>
<span class="c">#쿠버네티스의 리포지터리를 설정하기 위한 경로가 너무 길어지지 않게 경로를 변수로 처리하는 것이다.</span>
<span class="nv">gg_pkg</span><span class="o">=</span><span class="s2">"packages.cloud.google.com/yum/doc"</span> <span class="c"># Due to shorten addr for key</span>

<span class="c">#cat를 사용해서 여러 줄을 입력하기 위한 방법으로 cat &lt;&lt;EOF를 사용한다. 그리고 다썼으면 마지막에</span>
<span class="c">#EOF로 저장하고 종료한다.</span>
<span class="c">#그래서 cat으로 여러 줄을 입력하되 입력 내용을 /etc/yum.repos.d 아래 kubernetes.repo 파일에 저장한다</span>
<span class="c">#/etc/yum.repos은 Package를 모아놓은 저장소이다. Yum을 통해 Package 설치 시 활성화 된</span>
<span class="c">#Yum Repository에서 Package를 다운로드하여 설치하기 때문에</span>
<span class="c">#Package가 Repository에 없을 경우 설치 할 수 없다.</span>
<span class="c">#그래서 여기 안에는 우리가 이전에 설치했던 epel도 들어가 있다. </span>
<span class="nb">cat</span> <span class="o">&lt;&lt;</span><span class="no">EOF</span><span class="sh"> &gt; /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=0
repo_gpgcheck=0
gpgkey=https://</span><span class="k">${</span><span class="nv">gg_pkg</span><span class="k">}</span><span class="sh">/yum-key.gpg https://</span><span class="k">${</span><span class="nv">gg_pkg</span><span class="k">}</span><span class="sh">/rpm-package-key.gpg
</span><span class="no">EOF

</span><span class="c">#selinux가 제한적으로 사용되지 않도록 permissive 모드로 변경한다.</span>
<span class="c">#SELinux(Security-Enhanced Linux)는 관리자가 시스템 액세스 권한을 효과적으로 </span>
<span class="c">#제어할 수 있게 하는 Linux® 시스템용 보안 아키텍처이다.</span>
<span class="c">#SELinux는 enforce, permissive, disable 세 가지 동작 모드가 있으며</span>
<span class="c">#설치하면 기본적으로 enforce 모드로 동작합니다.</span>
<span class="c">#enforce 모드일 경우 SELinux의 정책과 룰에 어긋나는 동작은 모두 차단되며</span>
<span class="c">#permissive 모드이 경우 정책에 어긋나는 동작은 감사 로그를 남기고 허용한다. </span>
<span class="c">#seten</span>
<span class="c"># Set SELinux in permissive mode (effectively disabling it)</span>
setenforce 0
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'s/^SELINUX=enforcing$/SELINUX=permissive/'</span> /etc/selinux/config

<span class="c"># RHEL/CentOS 7 have reported traffic issues being routed incorrectly due to iptables bypassed</span>
<span class="nb">cat</span> <span class="o">&lt;&lt;</span><span class="no">EOF</span><span class="sh"> &gt;  /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
</span><span class="no">EOF
</span>modprobe br_netfilter

<span class="c"># local small dns &amp; vagrant cannot parse and delivery shell code.</span>
<span class="nb">echo</span> <span class="s2">"192.168.1.10 m-k8s"</span> <span class="o">&gt;&gt;</span> /etc/hosts
<span class="k">for</span> <span class="o">((</span> <span class="nv">i</span><span class="o">=</span>1<span class="p">;</span> i&lt;<span class="o">=</span><span class="nv">$1</span><span class="p">;</span> i++  <span class="o">))</span><span class="p">;</span> <span class="k">do </span><span class="nb">echo</span> <span class="s2">"192.168.1.10</span><span class="nv">$i</span><span class="s2"> w</span><span class="nv">$i</span><span class="s2">-k8s"</span> <span class="o">&gt;&gt;</span> /etc/hosts<span class="p">;</span> <span class="k">done</span>

<span class="c"># config DNS</span>
<span class="nb">cat</span> <span class="o">&lt;&lt;</span><span class="no">EOF</span><span class="sh"> &gt; /etc/resolv.conf
nameserver 1.1.1.1 #cloudflare DNS
nameserver 8.8.8.8 #Google DNS
</span><span class="no">EOF


</span></pre></td></tr></tbody></table></code></pre></div></div>
:ET