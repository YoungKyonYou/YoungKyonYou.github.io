I"',<p><br /><br /></p>

<p><em><strong>오늘의 나보다 성장한 내일의 나를 위해…</strong></em></p>

<p><br /></p>

<p><br /><br /></p>

<style>
.containercoffee {
  width: 300px;
  height: 280px;
  position: relative;
  top: calc(50% - 140px);
  left: calc(50% - 150px);
}
.coffee-header {
  width: 100%;
  height: 80px;
  position: absolute;
  top: 0;
  left: 0;
  background-color: #ddcfcc;
  border-radius: 10px;
}
.coffee-header__buttons {
  width: 25px;
  height: 25px;
  position: absolute;
  top: 25px;
  background-color: #282323;
  border-radius: 50%;
}
.coffee-header__buttons::after {
  content: "";
  width: 8px;
  height: 8px;
  position: absolute;
  bottom: -8px;
  left: calc(50% - 4px);
  background-color: #615e5e;
}
.coffee-header__button-one {
  left: 15px;
}
.coffee-header__button-two {
  left: 50px;
}
.coffee-header__display {
  width: 50px;
  height: 50px;
  position: absolute;
  top: calc(50% - 25px);
  left: calc(50% - 25px);
  border-radius: 50%;
  background-color: #9acfc5;
  border: 5px solid #43beae;
  box-sizing: border-box;
}
.coffee-header__details {
  width: 8px;
  height: 20px;
  position: absolute;
  top: 10px;
  right: 10px;
  background-color: #9b9091;
  box-shadow: -12px 0 0 #9b9091, -24px 0 0 #9b9091;
}
.coffee-medium {
  width: 90%;
  height: 160px;
  position: absolute;
  top: 80px;
  left: calc(50% - 45%);
  background-color: #bcb0af;
}
.coffee-medium:before {
  content: "";
  width: 90%;
  height: 100px;
  background-color: #776f6e;
  position: absolute;
  bottom: 0;
  left: calc(50% - 45%);
  border-radius: 20px 20px 0 0;
}
.coffe-medium__exit {
  width: 60px;
  height: 20px;
  position: absolute;
  top: 0;
  left: calc(50% - 30px);
  background-color: #231f20;
}
.coffe-medium__exit::before {
  content: "";
  width: 50px;
  height: 20px;
  border-radius: 0 0 50% 50%;
  position: absolute;
  bottom: -20px;
  left: calc(50% - 25px);
  background-color: #231f20;
}
.coffe-medium__exit::after {
  content: "";
  width: 10px;
  height: 10px;
  position: absolute;
  bottom: -30px;
  left: calc(50% - 5px);
  background-color: #231f20;
}
.coffee-medium__arm {
  width: 70px;
  height: 20px;
  position: absolute;
  top: 15px;
  right: 25px;
  background-color: #231f20;
}
.coffee-medium__arm::before {
  content: "";
  width: 15px;
  height: 5px;
  position: absolute;
  top: 7px;
  left: -15px;
  background-color: #9e9495;
}
.coffee-medium__cup {
  width: 80px;
  height: 47px;
  position: absolute;
  bottom: 0;
  left: calc(50% - 40px);
  background-color: #FFF;
  border-radius: 0 0 70px 70px / 0 0 110px 110px;
}
.coffee-medium__cup::after {
  content: "";
  width: 20px;
  height: 20px;
  position: absolute;
  top: 6px;
  right: -13px;
  border: 5px solid #FFF;
  border-radius: 50%;
}
@keyframes liquid {
  0% {
    height: 0px;  
    opacity: 1;
  }
  5% {
    height: 0px;  
    opacity: 1;
  }
  20% {
    height: 62px;  
    opacity: 1;
  }
  95% {
    height: 62px;
    opacity: 1;
  }
  100% {
    height: 62px;
    opacity: 0;
  }
}
.coffee-medium__liquid {
  width: 6px;
  height: 63px;
  opacity: 0;
  position: absolute;
  top: 50px;
  left: calc(50% - 3px);
  background-color: #74372b;
  animation: liquid 4s 4s linear infinite;
}
.coffee-medium__smoke {
  width: 8px;
  height: 20px;
  position: absolute;  
  border-radius: 5px;
  background-color: #b3aeae;
}
@keyframes smokeOne {
  0% {
    bottom: 20px;
    opacity: 0;
  }
  40% {
    bottom: 50px;
    opacity: .5;
  }
  80% {
    bottom: 80px;
    opacity: .3;
  }
  100% {
    bottom: 80px;
    opacity: 0;
  }
}
@keyframes smokeTwo {
  0% {
    bottom: 40px;
    opacity: 0;
  }
  40% {
    bottom: 70px;
    opacity: .5;
  }
  80% {
    bottom: 80px;
    opacity: .3;
  }
  100% {
    bottom: 80px;
    opacity: 0;
  }
}
.coffee-medium__smoke-one {
  opacity: 0;
  bottom: 50px;
  left: 102px;
  animation: smokeOne 3s 4s linear infinite;
}
.coffee-medium__smoke-two {
  opacity: 0;
  bottom: 70px;
  left: 118px;
  animation: smokeTwo 3s 5s linear infinite;
}
.coffee-medium__smoke-three {
  opacity: 0;
  bottom: 65px;
  right: 118px;
  animation: smokeTwo 3s 6s linear infinite;
}
.coffee-medium__smoke-for {
  opacity: 0;
  bottom: 50px;
  right: 102px;
  animation: smokeOne 3s 5s linear infinite;
}
.coffee-footer {
  width: 95%;
  height: 15px;
  position: absolute;
  bottom: 25px;
  left: calc(50% - 47.5%);
  background-color: #41bdad;
  border-radius: 10px;
}
.coffee-footer::after {
  content: "";
  width: 106%;
  height: 26px;
  position: absolute;
  bottom: -25px;
  left: -8px;
  background-color: #000;
}
</style>

<div class="containercoffee">
    <div class="coffee-header">
      <div class="coffee-header__buttons coffee-header__button-one"></div>
      <div class="coffee-header__buttons coffee-header__button-two"></div>
      <div class="coffee-header__display"></div>
      <div class="coffee-header__details"></div>
    </div>
    <div class="coffee-medium">
      <div class="coffe-medium__exit"></div>
      <div class="coffee-medium__arm"></div>
      <div class="coffee-medium__liquid"></div>
      <div class="coffee-medium__smoke coffee-medium__smoke-one"></div>
      <div class="coffee-medium__smoke coffee-medium__smoke-two"></div>
      <div class="coffee-medium__smoke coffee-medium__smoke-three"></div>
      <div class="coffee-medium__smoke coffee-medium__smoke-for"></div>
      <div class="coffee-medium__cup"></div>
    </div>
    <div class="coffee-footer"></div>
</div>

<p><br /><br /><br /><br /><br /><br /><br /><br /></p>

<p><br /></p>

<h2 id="역색인">역색인</h2>

<p><br /></p>

<p><strong>역색인:</strong> 하나의 값(term)이 들어간 문서번호를 지정하는 것</p>

<p><br /></p>

<p>데이터 시스템에 다음과 같은 문서들을 저장한다고 가정 해 보자.</p>

<p><br /></p>

<p><img src="/images/Interview/post16/2021-12-29-20-18-55.png?style=centerme" alt="" /></p>

<p><br /></p>

<p>일반적으로 오라클이나 MySQL 같은 관계형 DB에서는 위 내용을 보이는 대로 테이블 구조로 저장을 한다. 만약에 위 테이블에서 Text에 <strong>fox</strong>가 포함된 행들을 가져온다고 하면 다음과 같이 Text 열을 한 줄씩 찾아 내려가면서 fox가 있으면 가져오고 없으면 넘어가는 식으로 데이터를 가져 올 것이다.</p>

<p><br /></p>

<p><img src="/images/Interview/post16/2021-12-29-20-20-18.png?style=centerme" alt="" /></p>

<p><br /></p>

<p>전통적인 RDBMS에서는 위와 같이 <strong>like</strong> 검색을 사용하기 때문에 데이터가 늘어날수록 검색해야 할 대상이 늘어나 시간도 오래 걸리고, row 안의 내용을 모두 읽어야 하기 때문에 기본적으로 <span style="background: rgb(251,243,219)">속도가 느리다</span>. <span style="background: rgb(251,243,219)">Elastic Search</span>는 데이터를 저장할 때 다음과 같이 <strong>역 인덱스(inverted index)</strong>라는 구조를 만들어 저장한다.</p>

<p><br /></p>

<p><img src="/images/Interview/post16/2021-12-29-20-21-24.png?style=centerme" alt="" /></p>

<p><br /></p>

<p>이 <span style="background: rgb(251,243,219)">역인덱스</span>는 <strong>책에 맨 뒤에 있는</strong> 주요 키워드에 대한 내용이 몇 페이지에 있는지 볼 수 있는 <strong>찾아보기 페이지</strong>에 비유할 수 있다. <span style="background: rgb(251,243,219)">Elasticsearch</span>에서는 추출된 각 키워드를 <strong>텀(term)</strong>이라고 부른다. 이렇게 <span style="background: rgb(251,243,219)">역인덱스</span>가 있으면 <strong>fox</strong>를 포함하고 있는 document의 <strong>id</strong>를 바로 얻어올 수 있다.</p>

<p><br /></p>

<p><img src="/images/Interview/post16/2021-12-29-20-22-33.png?style=centerme" alt="" /></p>

<p><br /></p>

<p><span style="background: rgb(251,243,219)">Elasticsearch</span>는 데이터가 늘어나도 찾아가야 할 행이 늘어나는 것이 아니라 <span style="background: rgb(251,243,219)">역인덱스</span>가 가리키는 <span style="background: rgb(251,243,219)">id</span>의 배열값이 추가되는 것 뿐이기 때문에 큰 속도의 저하 없이 <span style="background: rgb(251,243,219)">빠른 속도</span>로 검색이 가능하다. 이런 <span style="background: rgb(251,243,219)">역인덱스</span>를 데이터가 저장되는 과정에서 만들기 때문에 <span style="background: rgb(251,243,219)">Elasticsearch</span>는 데이터를 입력할 때 저장이 아닌 <strong>색인</strong>을 한다고 표현한다.</p>

<p><br /></p>

<h3 style="color:#107896;  font-weight:bold">
<img class="emoji" title=":pushpin:" alt=":pushpin:" src="https://github.githubassets.com/images/icons/emoji/unicode/1f4cc.png" height="30" width="30" /> 정리
</h3>

<p><br /></p>

<p>Traditional SQL에서 <span style="background: rgb(251,243,219)">LIKE</span> 검색이 <span style="background: rgb(251,243,219)">INDEX</span> 기능을 이용할 수 없다는 단점이 있어서, 그 문제를 극복하기 위해서 <span style="background: rgb(251,243,219)">단어(Term)</span>로 <span style="background: rgb(251,243,219)">인덱싱</span>을 하는 <span style="background: rgb(251,243,219)">Inverted Index</span> 방식이 고안되었다.</p>

<p><br /></p>

<p>기존의 데이터베이스가 하나의 <span style="background: rgb(251,243,219)">구분자(Primary Key)</span>가 여러 필드를 지정하고 있었다면 <span style="background: rgb(251,243,219)">Inverted Index</span>에서는 하나의 값(Term)이 해당 Term이 들어간 document id를 지정한다.</p>

<p><br /></p>

<p>만약 DB에서 <span style="background: rgb(251,243,219)">“Trade”</span>라는 문구가 포함된 문자열을 찾으려고 한다면 SQL에서는 <span style="background: rgb(251,243,219)">%Trade%</span>라고 명확히 입력해야 검색이 가능하다.</p>

<p><span style="background: rgb(251,243,219)">trade, TRADE, trAde…</span>등의 문자열은 <span style="background: rgb(251,243,219)">하나하나</span> 명시하기 전에는 찾을 수 없다. <span style="background: rgb(251,243,219)">역색인</span>을 활용하면 대소문자 구분 없이 어떤 문구가 들어와도 찾을 수 있음</p>

<p><br /></p>

<ul>
  <li><strong>RDB</strong>는 행을 기반으로 데이터를 저장 그에 반해 <strong>엘라스틱서치</strong>는 단어를 기반으로(역인덱스) 저장한다.</li>
  <li><strong>RDB</strong>는 데이터 <strong>수정, 삭제</strong>의 편의성과 속도 면에서 강점이 있지만 <strong>다양한 조건</strong>의 데이터를 검색하고 <strong>집계</strong>하는 데에는 구조적인 <strong>한계</strong>가 있다
    <ul>
      <li>document 개수만큼 특정 단어가 있는지 확인을 반복해야 하기 때문에 많은 수의 document가 있을 경우 비효율적이다.</li>
    </ul>
  </li>
  <li>반면 <strong>일라스틱서치</strong>는 특정 단어가 어디에 저장되어 있는지 이미 알고 있어 모든 document를 검색할 필요는 없다.
    <ul>
      <li>다만 <strong>수정과 삭제</strong>는 엘라스틱서치 내부적으로 굉장히 많은 리소스가 소요된다.</li>
    </ul>
  </li>
</ul>

:ET