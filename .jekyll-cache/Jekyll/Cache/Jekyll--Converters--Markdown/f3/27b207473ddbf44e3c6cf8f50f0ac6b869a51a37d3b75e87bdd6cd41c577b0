I"~ <p><br /><br /></p>

<h1 id="lambda"><center>Lambda</center></h1>

<p><br /></p>

<p>파이썬에서는 <strong>‘lambda’</strong>라는 매우 편리한 <strong>익명 함수</strong>가 존재한다. 파이썬에서 이 <strong>lambda</strong>는 <strong>filter(), map(), reduce()</strong>와 같은 전형적인 기능 개념과 함께 사용되는 매우 강력하고 편리한 기능이다.</p>

<p>긴 설명보다 예를 보는 것이 더 나을 것이다.</p>

<p><br /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="n">n</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span><span class="n">x</span><span class="o">**</span><span class="mi">2</span>
<span class="k">print</span><span class="p">(</span><span class="n">n</span><span class="p">(</span><span class="mi">8</span><span class="p">))</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<p><strong>출력: 64</strong></p>

<p><br /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="n">f</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">x</span><span class="o">+</span><span class="n">y</span>
<span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">))</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<p><strong>출력: 10</strong></p>

<p><br /></p>

<p>예들이 쉬워서 보면 어떤 느낌인지 알 것이다. 람다에서는 반환값을 만드는 표현식이 있는데 함수가 사용될 수 있는 곳에는 어디라도 람다 정의를 넣을 수 있으며 위의 예처럼 변수에 할당하여 사용할 필요는 없다.</p>

<p><br /></p>

<p>이제 정렬을 할 때 람다를 사용하는 방법에 대해서 알아보자. 일반적으로 우리가 정렬을 할 때 사용하는 두 가지 방법은 sorted()와 .sort()가 있다. 예를 보자</p>

<p><br /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="n">a</span><span class="o">=</span><span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
<span class="n">b</span><span class="o">=</span><span class="nb">sorted</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="c1"># a=[2,2,4,4,6,7]
</span>
<span class="n">a</span><span class="o">=</span><span class="p">[]</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="rouge-code"><pre><span class="n">a</span> <span class="o">=</span> <span class="p">[(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)]</span>

<span class="c1"># 인자없이 그냥 sorted()만 쓰면, 리스트 아이템의 각 요소 순서대로 정렬을 한다.
</span><span class="n">b</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="c1"># b = [(3, 1), (0, 2), (3, 4), (6, 0), (1, 2)]
</span>
<span class="c1"># key 인자에 함수를 넘겨주면 해당 함수의 반환값을 비교하여 순서대로 정렬한다.
# 첫 번째 요소로 오름차순 정렬을 한다.
</span><span class="n">c</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
<span class="c1"># c = [(0, 2), (1, 2), (3, 1), (3, 4), (6, 0)]
</span>
<span class="c1">#두 번째 요소로 오름차순 정렬을 수행한다.
</span><span class="n">d</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
<span class="c1"># d = [(6, 0), (3, 1), (0, 2), (1, 2), (3, 4)]
</span>
<span class="c1"># 아이템 첫 번째 요소를 기준으로 오름차순으로 먼저 정렬하고,
# 그리고 그 안에서 다음 두 번째 요소를 기준으로 내림차순으로 정렬하게 하려면, 다음과 같이 할 수 있다.
</span><span class="n">e</span> <span class="o">=</span> <span class="p">[(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">)]</span>
<span class="n">f</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="o">-</span><span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
<span class="c1"># f = [(0, 3), (0, 1), (1, 5), (1, 4), (1, 3), (2, 4)]
</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<p><strong>정리</strong></p>

<ul>
  <li>sorted()의 key 인자로, 내가 커스텀할 비교 함수를 넣어준다.<br /></li>
  <li>비교 함수는 비교할 아이템의 요소를 반환한다.<br /></li>
  <li>비교 함수는 익명 함수(lambda)도 가능하고, 별도로 정의 가능하다.<br /></li>
  <li>비교할 아이템의 요소가 복수 개일 경우, 튜플로 그 순서를 내보내주면 된다.<br /></li>
  <li>-를 붙이면, 현재 정렬차순과 반대로 하게 된다.</li>
</ul>
:ET