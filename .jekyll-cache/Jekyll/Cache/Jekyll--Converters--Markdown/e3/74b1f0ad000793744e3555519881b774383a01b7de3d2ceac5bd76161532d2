I"<<p><br /><br /></p>

<p><em><strong>오늘의 나보다 성장한 내일의 나를 위해…</strong></em></p>

<p><br /></p>

<p><br /><br /></p>

<style>
.containercoffee {
  width: 300px;
  height: 280px;
  position: relative;
  top: calc(50% - 140px);
  left: calc(50% - 150px);
}
.coffee-header {
  width: 100%;
  height: 80px;
  position: absolute;
  top: 0;
  left: 0;
  background-color: #ddcfcc;
  border-radius: 10px;
}
.coffee-header__buttons {
  width: 25px;
  height: 25px;
  position: absolute;
  top: 25px;
  background-color: #282323;
  border-radius: 50%;
}
.coffee-header__buttons::after {
  content: "";
  width: 8px;
  height: 8px;
  position: absolute;
  bottom: -8px;
  left: calc(50% - 4px);
  background-color: #615e5e;
}
.coffee-header__button-one {
  left: 15px;
}
.coffee-header__button-two {
  left: 50px;
}
.coffee-header__display {
  width: 50px;
  height: 50px;
  position: absolute;
  top: calc(50% - 25px);
  left: calc(50% - 25px);
  border-radius: 50%;
  background-color: #9acfc5;
  border: 5px solid #43beae;
  box-sizing: border-box;
}
.coffee-header__details {
  width: 8px;
  height: 20px;
  position: absolute;
  top: 10px;
  right: 10px;
  background-color: #9b9091;
  box-shadow: -12px 0 0 #9b9091, -24px 0 0 #9b9091;
}
.coffee-medium {
  width: 90%;
  height: 160px;
  position: absolute;
  top: 80px;
  left: calc(50% - 45%);
  background-color: #bcb0af;
}
.coffee-medium:before {
  content: "";
  width: 90%;
  height: 100px;
  background-color: #776f6e;
  position: absolute;
  bottom: 0;
  left: calc(50% - 45%);
  border-radius: 20px 20px 0 0;
}
.coffe-medium__exit {
  width: 60px;
  height: 20px;
  position: absolute;
  top: 0;
  left: calc(50% - 30px);
  background-color: #231f20;
}
.coffe-medium__exit::before {
  content: "";
  width: 50px;
  height: 20px;
  border-radius: 0 0 50% 50%;
  position: absolute;
  bottom: -20px;
  left: calc(50% - 25px);
  background-color: #231f20;
}
.coffe-medium__exit::after {
  content: "";
  width: 10px;
  height: 10px;
  position: absolute;
  bottom: -30px;
  left: calc(50% - 5px);
  background-color: #231f20;
}
.coffee-medium__arm {
  width: 70px;
  height: 20px;
  position: absolute;
  top: 15px;
  right: 25px;
  background-color: #231f20;
}
.coffee-medium__arm::before {
  content: "";
  width: 15px;
  height: 5px;
  position: absolute;
  top: 7px;
  left: -15px;
  background-color: #9e9495;
}
.coffee-medium__cup {
  width: 80px;
  height: 47px;
  position: absolute;
  bottom: 0;
  left: calc(50% - 40px);
  background-color: #FFF;
  border-radius: 0 0 70px 70px / 0 0 110px 110px;
}
.coffee-medium__cup::after {
  content: "";
  width: 20px;
  height: 20px;
  position: absolute;
  top: 6px;
  right: -13px;
  border: 5px solid #FFF;
  border-radius: 50%;
}
@keyframes liquid {
  0% {
    height: 0px;  
    opacity: 1;
  }
  5% {
    height: 0px;  
    opacity: 1;
  }
  20% {
    height: 62px;  
    opacity: 1;
  }
  95% {
    height: 62px;
    opacity: 1;
  }
  100% {
    height: 62px;
    opacity: 0;
  }
}
.coffee-medium__liquid {
  width: 6px;
  height: 63px;
  opacity: 0;
  position: absolute;
  top: 50px;
  left: calc(50% - 3px);
  background-color: #74372b;
  animation: liquid 4s 4s linear infinite;
}
.coffee-medium__smoke {
  width: 8px;
  height: 20px;
  position: absolute;  
  border-radius: 5px;
  background-color: #b3aeae;
}
@keyframes smokeOne {
  0% {
    bottom: 20px;
    opacity: 0;
  }
  40% {
    bottom: 50px;
    opacity: .5;
  }
  80% {
    bottom: 80px;
    opacity: .3;
  }
  100% {
    bottom: 80px;
    opacity: 0;
  }
}
@keyframes smokeTwo {
  0% {
    bottom: 40px;
    opacity: 0;
  }
  40% {
    bottom: 70px;
    opacity: .5;
  }
  80% {
    bottom: 80px;
    opacity: .3;
  }
  100% {
    bottom: 80px;
    opacity: 0;
  }
}
.coffee-medium__smoke-one {
  opacity: 0;
  bottom: 50px;
  left: 102px;
  animation: smokeOne 3s 4s linear infinite;
}
.coffee-medium__smoke-two {
  opacity: 0;
  bottom: 70px;
  left: 118px;
  animation: smokeTwo 3s 5s linear infinite;
}
.coffee-medium__smoke-three {
  opacity: 0;
  bottom: 65px;
  right: 118px;
  animation: smokeTwo 3s 6s linear infinite;
}
.coffee-medium__smoke-for {
  opacity: 0;
  bottom: 50px;
  right: 102px;
  animation: smokeOne 3s 5s linear infinite;
}
.coffee-footer {
  width: 95%;
  height: 15px;
  position: absolute;
  bottom: 25px;
  left: calc(50% - 47.5%);
  background-color: #41bdad;
  border-radius: 10px;
}
.coffee-footer::after {
  content: "";
  width: 106%;
  height: 26px;
  position: absolute;
  bottom: -25px;
  left: -8px;
  background-color: #000;
}
</style>

<div class="containercoffee">
    <div class="coffee-header">
      <div class="coffee-header__buttons coffee-header__button-one"></div>
      <div class="coffee-header__buttons coffee-header__button-two"></div>
      <div class="coffee-header__display"></div>
      <div class="coffee-header__details"></div>
    </div>
    <div class="coffee-medium">
      <div class="coffe-medium__exit"></div>
      <div class="coffee-medium__arm"></div>
      <div class="coffee-medium__liquid"></div>
      <div class="coffee-medium__smoke coffee-medium__smoke-one"></div>
      <div class="coffee-medium__smoke coffee-medium__smoke-two"></div>
      <div class="coffee-medium__smoke coffee-medium__smoke-three"></div>
      <div class="coffee-medium__smoke coffee-medium__smoke-for"></div>
      <div class="coffee-medium__cup"></div>
    </div>
    <div class="coffee-footer"></div>
</div>

<p><br /><br /><br /><br /><br /><br /><br /><br /></p>

<p><br /></p>

<h2 style="color:#107896;  font-weight:bold">
<img class="emoji" title=":pushpin:" alt=":pushpin:" src="https://github.githubassets.com/images/icons/emoji/unicode/270f.png" height="30" width="30" /> 대량 데이터 발생에 따른 테이블 분할</h2>

<p><br /></p>

<p>대량의 데이터가 <span style="background: rgb(251,243,219)">하나의 테이블에 집약</span>되어 있고 하나의 하드웨어 공간에 저장되어 있으면 <span style="background: rgb(251,243,219)">성능 저하</span>를 피하기 쉽지 않다. 처리 하는 일의 양이 <span style="background: rgb(251,243,219)">한군데에 몰리는 현상 </span>은 어떤 업무에 있어서 중요한 업무에 해당되는 데이터가 특정 테이블에 있는 경우에 발생이 되는데 이런 경우 <span style="background: rgb(251,243,219)">트랜잭션이 분산 처리</span>될 수 있도록 <span style="background: rgb(251,243,219)">테이블 단위에서 분할</span>의 방법을 적용할 필요가 있는 것이다.</p>

<p><br /></p>

<p><img src="/images/Interview/post16/2022-01-11-15-28-30.png?style=centerme" alt="" /></p>

<p><br /></p>

<p><span style="background: rgb(251,243,219)">하나의 테이블에 대량의 데이터가 존재하는 경우</span></p>

<p>인덱스의 Tree 구조가 너무 커져 호율성이 떨어져 데이터를 처리(입력, 수정, 삭제, 조회)할 때 <strong>디스크 I/O</strong>를 많이 유발하게 된다. 또한, 인덱스를 생성할 때 인덱스의 크기가 커지게 되고 그렇게 되면 인덱스를 찾아가는 단계가 깊어지게 되어 조회의 성능에도 영향을 미치게 된다. 인덱스의 크키가 커질 경우 조회의 성능에는 영향을 미치는 정도가 작지만 데이터를 <strong>입력 / 수정 / 삭제</strong>하는 트랜잭션의 경우 인덱스의 특성상 일량이 증가하여 <strong>성능저하를 유발</strong>할 수 있다.</p>

<p><br /></p>

<p><span style="background: rgb(251,243,219)">하나의 테이블에 많은 수의 칼럼이 존재</span></p>

<p>이 경우 데이터가 디스크이 여러 블록에 존재하므로 인해 디스크에서 데이터를 읽는 <strong>I/O</strong>량이 많아지게 되어 <strong>성능이 저하</strong>되게 된다. 또한, 물리적인 디스크에 여러 블록에 데이터가 저장되게 된다. 따라서 데이터를 처리할 때 여러 블록에서 데이터를 I/O해야 하는 SQL 문장의 성능이 저하될 수 있는 특징을 가지게 된다.</p>

<p><br /></p>

<h4 style="color:#43ABC9;  font-weight:bold">
<img class="emoji" title=":pushpin:" alt=":pushpin:" src="https://github.githubassets.com/images/icons/emoji/unicode/1f50e.png" height="20" width="20" /> 로우체이닝(Row Chaining)
</h4>

<p>로우 길이가 너무 길어서 <span style="background: rgb(251,243,219)">데이터 블록 하나에 데이터가 모두 저장되지 않고</span> 두 개 이상의 블록에 걸쳐 <span style="background: rgb(251,243,219)">하나의 로우가 저장</span>되어 있는 형태이다.</p>

<p><br /></p>

<h4 style="color:#43ABC9;  font-weight:bold">
<img class="emoji" title=":pushpin:" alt=":pushpin:" src="https://github.githubassets.com/images/icons/emoji/unicode/1f50e.png" height="20" width="20" /> 로우마이그레이션(Row Migration)
</h4>

<p><span style="background: rgb(251,243,219)">데이터 블록에서 수정</span>이 발생하면 수정된 데이터를 해당 데이터 블록에서 저장하지 못하고 <span style="background: rgb(251,243,219)">다른 블록의 빈 공간</span>을 찾아 저장하는 방식이다.</p>

<p><br /></p>

<hr />

<p><br /></p>

<p>로우 길이가 너무 긴 경우 <span style="background: rgb(251,243,219)">로우 체이닝</span>과 <span style="background: rgb(251,243,219)">마이그레이션</span>이 발생하게된다. 많은 블록에 데이터가 저장되면, 데이터베이스 메모리에서 <span style="background: rgb(251,243,219)">디스크와 I/O(입력/ 출력)</span>가 발생할 때 불필요하게 <span style="background: rgb(251,243,219)">I/O</span>가 많이 발생해 <span style="background: rgb(251,243,219)">성능이 저하</span>된다.</p>

<p><br /></p>

<h3 style="color:#107896;  font-weight:bold">
<img class="emoji" title=":pushpin:" alt=":pushpin:" src="https://github.githubassets.com/images/icons/emoji/unicode/1f4cc.png" height="30" width="30" /> 한 테이블에 많은 수의 칼럼을 가지고 있는 경우
</h3>

<p><br /></p>

<p><img src="/images/Interview/post16/2022-01-11-15-37-34.png?style=centerme" alt="" /></p>

<p><br /></p>

<p><strong>도서정보</strong>라고 하는 <span style="background: rgb(251,243,219)">테이블에 칼럼수가 아주 많은 경우</span>를 생각해보자. 이 때 화면을 몇 번 스크롤 하면서 보아야하고 이렇게 많은 컬럼을 가지고 있는 테이블에 대해서는 트랜잭션이 발생할 때 <span style="background: rgb(251,243,219)">어떤 칼럼에 대해 집중적으로 발생</span>하는지 분석하여 <span style="background: rgb(251,243,219)">테이블을 쪼개어주면 디스크 I/O가 감소</span>하게 되어 <strong>성능이 개선</strong>되게 된다.</p>

<p><br /></p>

<p><img src="/images/Interview/post16/2022-01-11-15-53-48.png?style=centerme" alt="" /></p>

<p><br /></p>

<p>도서정보 테이블에서는 <span style="background: rgb(251,243,219)">전자출판유형</span>에 대한 트랜잭션이 <span style="background: rgb(251,243,219)">독립적으로 발생</span>이 되는 경우가 많고 <span style="background: rgb(251,243,219)">대체제품</span>에 대한 유형의 트랜잭션이 독립적으로 발생되는 경우가 많이 있어 <span style="background: rgb(251,243,219)">1:1 관계로 분리</span>한다. 분리된 테이블은 디스크에 적어진 칼럼이 저장이 되므로 <span style="background: rgb(251,243,219)">로우마이그레이션과 로우체이닝</span>이 많이 줄어들 수 있다. 따라서 <span style="background: rgb(251,243,219)">성능이 개선</span>될 수 있다.</p>

<p><br /></p>

<p><img src="/images/Interview/post16/2022-01-11-15-55-40.png?style=centerme" alt="" /></p>

<p><br /></p>

<h3 style="color:#107896;  font-weight:bold">
<img class="emoji" title=":pushpin:" alt=":pushpin:" src="https://github.githubassets.com/images/icons/emoji/unicode/1f4cc.png" height="30" width="30" /> 대량 데이터 저장 및 처리로 인한 성능
</h3>

<p><br /></p>

<p><span style="background: rgb(251,243,219)">테이블에 많은 양의 데이터가 예상될 경우 파티셔닝</span>을 적용하거나 <span style="background: rgb(251,243,219)">PK에 의해 테이블을 분할</span>하는 방법을 적용할 수 있다. <span style="background: rgb(251,243,219)">Oracle</span>의 경우 크게 <strong>List Partition(특정 값 지정)</strong>, <strong>Range Partition(범위)</strong>, <strong>Hash Partition(해쉬적용)</strong>, Composite Partition(범위와 해쉬가 복합)**등이 가능하다.</p>

<p><br /></p>

<p><strong>데이터가 대량</strong>으로 많이 있을 때 <span style="background: rgb(251,243,219)">논리적으로는 하나의 테이블로 보이지만 물리적으로는 여러 개의 테이블 스페이지에 쏘개어 저장될 수 있는 구조</span>의 <strong>파티셔닝</strong>을 사용하면 <strong>성능을 개선</strong>할 수 있다.</p>

<p><br /></p>

<h4 style="color:#43ABC9;  font-weight:bold">
<img class="emoji" title=":pushpin:" alt=":pushpin:" src="https://github.githubassets.com/images/icons/emoji/unicode/1f50e.png" height="20" width="20" /> Range Partition 적용
</h4>

<p>요금테이블에 PK가 요금일자+요금번호로 구성되어 있고 데이터 건수가 1억2천만건인 <span style="background: rgb(251,243,219)">대용량 테이블의 경우</span>이다. 하나의 테이블로는 너무 많은 데이터가 존재하므로 인해 성능이 느린 경우에 해당된다. 이때 요금 <span style="background: rgb(251,243,219)">특성상 월단위로 데이터를 처리</span>하는 경우가 많으므로 <span style="background: rgb(251,243,219)">PK인 요금일자의 년+월</span>을 이용하여 12개의 파티션 테이블(요금_0401~요금_0412)을 만든 결과이다.</p>

<p>가장 많이 사용되는 파티셔닝 기능이기도 하다. 대상 테이블이 날짜 또는 숫자값으로 분리가 가능하고 각 영역별로 트랜잭션이 분리된다면 <span style="background: rgb(251,243,219)">Range Parition</span>을 적용한다. 또한, 이 파티셔닝은 데이터 보관주기에 따라 테이블에 데이터를 쉽게 지우는 것이 가능하므로 (파티션 테이블 드랍 가능) 데이터 보관 주기에 따른 테이블 관리가 용이하다는 장점을 가진다.</p>

<p><br /></p>

<p><img src="/images/Interview/post16/2022-01-11-16-00-50.png?style=centerme" alt="" /></p>

<p><br /></p>

<h4 style="color:#43ABC9;  font-weight:bold">
<img class="emoji" title=":pushpin:" alt=":pushpin:" src="https://github.githubassets.com/images/icons/emoji/unicode/1f50e.png" height="20" width="20" /> List Partition 적용
</h4>

<p>지점, 사업소, 사업장, 핵심적인 코드값 등으로 PK가 구성되어 있고, 대량의 데이터가 있는 테이블이라면 <span style="background: rgb(251,243,219)">값 각각에 의해 파티셔닝</span>이 되는 <span style="background: rgb(251,243,219)">List Partition</span>을 적용할 수 있다.</p>

<p>아래 그림은 사업소코드별로 <span style="background: rgb(251,243,219)">List Partition</span>을 적용한 사례이다. <span style="background: rgb(251,243,219)">이는 대용량 데이터를 특정값에</span> 따라 분리하여 저장할 수 있으나</p>
:ET