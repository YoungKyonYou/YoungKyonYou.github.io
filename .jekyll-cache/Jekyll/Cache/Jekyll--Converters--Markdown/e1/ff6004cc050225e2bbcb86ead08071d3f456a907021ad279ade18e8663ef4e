I"82<p><span style="color:orange; font-weight:bold"><em>해당 내용은 책 ‘스프링 부트와 AWS로 혼자 구현하는 웹 서비스’에 나오는 내용이며 이는 개인적으로 공부하기 위해 기록함을 알려드립니다</em></span></p>

<p><br /><br /></p>

<h1 id="스프링부트에서-테스트-코드를-작성하기"><center>스프링부트에서 테스트 코드를 작성하기</center></h1>

<p><br /></p>

<p>테스트 코드를 작성해야 하는 이유는 아래와 같다.</p>

<link rel="stylesheet" href="https: //www.webnots.com/resources/font-awesome/css/font-awesome.min.css" />

<link rel="stylesheet" href="/assets/css/webnots.css" />

<div class="webnots-success webnots-notification-box">단위 테스트는 개발단계 초기에 문제를 발견하게 도와준다.</div>
<div class="webnots-success webnots-notification-box">단위 테스트는 개발자가 나중에 코드를 리팩토링하거나 라이브러리 업그레이드 등에서 기존 기능이 올바르게 작동하는지 확인할 수 있다.</div>
<div class="webnots-success webnots-notification-box">단위 테스트는 기능에 대한 불확실성을 감소시킬 수 있다.</div>
<div class="webnots-success webnots-notification-box">단위 테스트는 시스템에 대한 실제 문서를 제공한다. 즉, 단위 테스트 자체가 문서로 사용할 수 있다. </div>

<p><br /></p>

<p>이 프로젝트로 이제 테스트 코드를 작성해 보자.</p>

<p>일단 main 함수를 잠깐 살펴보자.</p>

<p><img src="/images/SpringBoot/ImplementingWebServiceWithSpringBootAndAWS-1/2021-08-13-16-38-08.png" alt="" /></p>

<p><br />
<strong>FreelecSpringbootBoardApplication.java</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.yyk.app.freelecspringbootboard</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.boot.SpringApplication</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.boot.autoconfigure.SpringBootApplication</span><span class="o">;</span>

<span class="c1">//이 어노테이션으로 인해 스프링 부트의 자동 설정, 스프링 Bean 읽기와 생성을 모두 자동으로 설정된다.</span>
<span class="c1">//특히나 @SpringBootApplication이 있는 위치부터 설정을 일거아나기 때문에 이 클래스는 항상 프로젝트 최상단에 위치해야만 한다.</span>
<span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FreelecSpringbootBoardApplication</span> <span class="o">{</span>

    <span class="c1">//SpringApplication.run으로 인해 내장 WAS(Web Application Sever)를 실행한다.</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">FreelecSpringbootBoardApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
    <span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<p><br /></p>

<p>설명은 주석을 참고한다.</p>

<p>그리고 패키지와 자바 파일을 하나 생성한다.</p>

<p><br /></p>

<p><img src="/images/SpringBoot/ImplementingWebServiceWithSpringBootAndAWS-1/2021-08-13-16-43-15.png" alt="" /></p>

<p><br /></p>

<p><strong>HelloController.java</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.yyk.app.freelecspringbootboard.web</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.GetMapping</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RestController</span><span class="o">;</span>

<span class="c1">//컨트롤러를 JSON을 반환하는 컨트롤러로 만들어준다.</span>
<span class="c1">//예전에는 @ResponseBody를 각 메소드마다 선언했던 것을 한번에 사용할 수 있게 해준다.</span>
<span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloController</span> <span class="o">{</span>
    
    <span class="c1">//HTTP Method인 Get의 요청을 받을 수 있는 API를 만들어 준다.</span>
    <span class="c1">//  '/hello'로 요청이 오면 문자열 hello를 반환하는 기능을 가진다.</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/hello"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="k">return</span> <span class="s">"hello"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p><br /></p>

<p>작성한 코드가 제대로 동작하는지 테스트한다. 검증을 위해 아래 사진과 같이 패키지와 파일을 생성한다.</p>

<p><br /></p>

<p><img src="/images/SpringBoot/ImplementingWebServiceWithSpringBootAndAWS-1/2021-08-13-16-47-27.png" alt="" /></p>

<p><br /></p>

<p><strong>HelloControllerTest.java</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.yyk.app.freelecspringbootboard.web</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.runner.RunWith</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.test.context.junit4.SpringRunner</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.test.web.servlet.MockMvc</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">test</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">servlet</span><span class="o">.</span><span class="na">request</span><span class="o">.</span><span class="na">MockMvcRequestBuilders</span><span class="o">.</span><span class="na">get</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">test</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">servlet</span><span class="o">.</span><span class="na">result</span><span class="o">.</span><span class="na">MockMvcResultMatchers</span><span class="o">.</span><span class="na">content</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">test</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">servlet</span><span class="o">.</span><span class="na">result</span><span class="o">.</span><span class="na">MockMvcResultMatchers</span><span class="o">.</span><span class="na">status</span><span class="o">;</span>

<span class="c1">//테스트를 진행할 때 JUnit에 내장된 실행자 외에 다른 실행자를 실행시킨다.</span>
<span class="c1">//여기서는 SpringRunner라는 스프링 실행자를 사용한다.</span>
<span class="c1">//즉 스프링 부트 테스트와 JUnit 사이에 연결자 역할을 한다.</span>
<span class="nd">@RunWith</span><span class="o">(</span><span class="nc">SpringRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>

<span class="c1">//여러 스프링 테스트 어노테이션 중 Web(Spring MVC)에 집중할 수 있는 어노테이션이다.</span>
<span class="c1">//선언할 경우 @Controller, @ControllerAdvice 등을 사용할 수 있다.</span>
<span class="c1">//단 @Service, @Component, @Repository 등은 사용할 수 없다.</span>
<span class="c1">//여기서는 컨트롤러만 사용하기 때문에 선언한다.</span>
<span class="nd">@WebMvcTest</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloControllerTest</span> <span class="o">{</span>
    
    <span class="c1">//스프링이 관리하는 빈(Bean)을 주입</span>
    <span class="nd">@Autowired</span>
    <span class="c1">//웹 API를 테스트할 때 사용</span>
    <span class="c1">//스프링 MVC 테스트의 시작점</span>
    <span class="c1">//이 클래스를 통해 HTTP GET, POST 등에 대한 API 테스트를 할 수 있다.</span>
    <span class="kd">private</span> <span class="nc">MockMvc</span> <span class="n">mvc</span><span class="o">;</span>

    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">hello가_리턴된다</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span><span class="o">{</span>
        <span class="nc">String</span> <span class="n">hello</span><span class="o">=</span><span class="s">"hello"</span><span class="o">;</span>

        <span class="c1">//MockMvc를 통해 /hello 주소로 HTTP GET 요청을 한다.</span>
        <span class="c1">//체이닝이 지원해서 아래와 같이 여러 검증 기능을 이어서 선언할 수 있다.</span>
        <span class="n">mvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="s">"/hello"</span><span class="o">))</span>
                <span class="c1">//mvc.perform의 결과를 검증한다.</span>
                <span class="c1">//HTTP Header의 Status를 검증한다</span>
                <span class="c1">//우리가 흔히 알고 있는 200, 404, 500 등의 상태를 검증한다.</span>
                <span class="c1">//여기선 OK 즉 200인지 아닌지를 검증한다.</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isOk</span><span class="o">())</span>
                
                <span class="c1">//mvc.perform의 결과를 검증한다.</span>
                <span class="c1">//응답 본문의 내용을 검증한다.</span>
                <span class="c1">//Controller에서 "hello"를 리턴하기 때문에 이 값이 맞는지 검증한다. </span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">content</span><span class="o">().</span><span class="na">string</span><span class="o">(</span><span class="n">hello</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p><br /></p>

<p>코드를 모두 작성했다면 테스트 코드를 한번 실행해본다.</p>

<p><br /></p>

<p>테스트를 실행하고 다음과 같은 에러가 나올 수 있다.
<br /></p>

<p><img src="/images/SpringBoot/ImplementingWebServiceWithSpringBootAndAWS-1/2021-08-13-18-10-41.png" alt="" /></p>

<p><br /></p>

<p>이땐 <span style="color:orange; font-weight:bold">Ctrl+Shift+a</span>를 누른다음 <span style="color:orange; font-weight:bold">settings</span>를 치고 들어가서 <span style="color:orange; font-weight:bold">Build, Execution, Deployment-&gt;Build Tools-&gt;Gradle</span> 창에서 <span style="color:orange; font-weight:bold">Run tests using</span>을 <span style="color:orange; font-weight:bold">Gradle</span>에서 <span style="color:orange; font-weight:bold">IntelliJ IDEA</span>로 바꿔준다.</p>

<p><img src="/images/SpringBoot/ImplementingWebServiceWithSpringBootAndAWS-1/2021-08-13-18-11-29.png" alt="" /></p>
:ET