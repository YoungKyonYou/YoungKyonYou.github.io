I"+6<p><br /><br /></p>

<p><em><strong>오늘의 나보다 성장한 내일의 나를 위해…</strong></em></p>

<p><br /></p>

<p><br /><br /></p>

<style>
.containercoffee {
  width: 300px;
  height: 280px;
  position: relative;
  top: calc(50% - 140px);
  left: calc(50% - 150px);
}
.coffee-header {
  width: 100%;
  height: 80px;
  position: absolute;
  top: 0;
  left: 0;
  background-color: #ddcfcc;
  border-radius: 10px;
}
.coffee-header__buttons {
  width: 25px;
  height: 25px;
  position: absolute;
  top: 25px;
  background-color: #282323;
  border-radius: 50%;
}
.coffee-header__buttons::after {
  content: "";
  width: 8px;
  height: 8px;
  position: absolute;
  bottom: -8px;
  left: calc(50% - 4px);
  background-color: #615e5e;
}
.coffee-header__button-one {
  left: 15px;
}
.coffee-header__button-two {
  left: 50px;
}
.coffee-header__display {
  width: 50px;
  height: 50px;
  position: absolute;
  top: calc(50% - 25px);
  left: calc(50% - 25px);
  border-radius: 50%;
  background-color: #9acfc5;
  border: 5px solid #43beae;
  box-sizing: border-box;
}
.coffee-header__details {
  width: 8px;
  height: 20px;
  position: absolute;
  top: 10px;
  right: 10px;
  background-color: #9b9091;
  box-shadow: -12px 0 0 #9b9091, -24px 0 0 #9b9091;
}
.coffee-medium {
  width: 90%;
  height: 160px;
  position: absolute;
  top: 80px;
  left: calc(50% - 45%);
  background-color: #bcb0af;
}
.coffee-medium:before {
  content: "";
  width: 90%;
  height: 100px;
  background-color: #776f6e;
  position: absolute;
  bottom: 0;
  left: calc(50% - 45%);
  border-radius: 20px 20px 0 0;
}
.coffe-medium__exit {
  width: 60px;
  height: 20px;
  position: absolute;
  top: 0;
  left: calc(50% - 30px);
  background-color: #231f20;
}
.coffe-medium__exit::before {
  content: "";
  width: 50px;
  height: 20px;
  border-radius: 0 0 50% 50%;
  position: absolute;
  bottom: -20px;
  left: calc(50% - 25px);
  background-color: #231f20;
}
.coffe-medium__exit::after {
  content: "";
  width: 10px;
  height: 10px;
  position: absolute;
  bottom: -30px;
  left: calc(50% - 5px);
  background-color: #231f20;
}
.coffee-medium__arm {
  width: 70px;
  height: 20px;
  position: absolute;
  top: 15px;
  right: 25px;
  background-color: #231f20;
}
.coffee-medium__arm::before {
  content: "";
  width: 15px;
  height: 5px;
  position: absolute;
  top: 7px;
  left: -15px;
  background-color: #9e9495;
}
.coffee-medium__cup {
  width: 80px;
  height: 47px;
  position: absolute;
  bottom: 0;
  left: calc(50% - 40px);
  background-color: #FFF;
  border-radius: 0 0 70px 70px / 0 0 110px 110px;
}
.coffee-medium__cup::after {
  content: "";
  width: 20px;
  height: 20px;
  position: absolute;
  top: 6px;
  right: -13px;
  border: 5px solid #FFF;
  border-radius: 50%;
}
@keyframes liquid {
  0% {
    height: 0px;  
    opacity: 1;
  }
  5% {
    height: 0px;  
    opacity: 1;
  }
  20% {
    height: 62px;  
    opacity: 1;
  }
  95% {
    height: 62px;
    opacity: 1;
  }
  100% {
    height: 62px;
    opacity: 0;
  }
}
.coffee-medium__liquid {
  width: 6px;
  height: 63px;
  opacity: 0;
  position: absolute;
  top: 50px;
  left: calc(50% - 3px);
  background-color: #74372b;
  animation: liquid 4s 4s linear infinite;
}
.coffee-medium__smoke {
  width: 8px;
  height: 20px;
  position: absolute;  
  border-radius: 5px;
  background-color: #b3aeae;
}
@keyframes smokeOne {
  0% {
    bottom: 20px;
    opacity: 0;
  }
  40% {
    bottom: 50px;
    opacity: .5;
  }
  80% {
    bottom: 80px;
    opacity: .3;
  }
  100% {
    bottom: 80px;
    opacity: 0;
  }
}
@keyframes smokeTwo {
  0% {
    bottom: 40px;
    opacity: 0;
  }
  40% {
    bottom: 70px;
    opacity: .5;
  }
  80% {
    bottom: 80px;
    opacity: .3;
  }
  100% {
    bottom: 80px;
    opacity: 0;
  }
}
.coffee-medium__smoke-one {
  opacity: 0;
  bottom: 50px;
  left: 102px;
  animation: smokeOne 3s 4s linear infinite;
}
.coffee-medium__smoke-two {
  opacity: 0;
  bottom: 70px;
  left: 118px;
  animation: smokeTwo 3s 5s linear infinite;
}
.coffee-medium__smoke-three {
  opacity: 0;
  bottom: 65px;
  right: 118px;
  animation: smokeTwo 3s 6s linear infinite;
}
.coffee-medium__smoke-for {
  opacity: 0;
  bottom: 50px;
  right: 102px;
  animation: smokeOne 3s 5s linear infinite;
}
.coffee-footer {
  width: 95%;
  height: 15px;
  position: absolute;
  bottom: 25px;
  left: calc(50% - 47.5%);
  background-color: #41bdad;
  border-radius: 10px;
}
.coffee-footer::after {
  content: "";
  width: 106%;
  height: 26px;
  position: absolute;
  bottom: -25px;
  left: -8px;
  background-color: #000;
}
</style>

<div class="containercoffee">
    <div class="coffee-header">
      <div class="coffee-header__buttons coffee-header__button-one"></div>
      <div class="coffee-header__buttons coffee-header__button-two"></div>
      <div class="coffee-header__display"></div>
      <div class="coffee-header__details"></div>
    </div>
    <div class="coffee-medium">
      <div class="coffe-medium__exit"></div>
      <div class="coffee-medium__arm"></div>
      <div class="coffee-medium__liquid"></div>
      <div class="coffee-medium__smoke coffee-medium__smoke-one"></div>
      <div class="coffee-medium__smoke coffee-medium__smoke-two"></div>
      <div class="coffee-medium__smoke coffee-medium__smoke-three"></div>
      <div class="coffee-medium__smoke coffee-medium__smoke-for"></div>
      <div class="coffee-medium__cup"></div>
    </div>
    <div class="coffee-footer"></div>
</div>

<p><br /><br /><br /><br /><br /><br /><br /><br /></p>

<p><br /></p>

<p>웹의 동작 원리는 면접을 하면서 한 2~3번은 나온 것 같다. 하지만 질문 받을 때마다 확신있게 대답을 못한 것 같아서 이번 기회에 제대로 정리하고 다음에는 확실하게 말해보려 한다.</p>

<p><br /></p>

<h2 id="q-브라우저에-navercom-이라는-url를-치고-엔터를-누르면-내부적으로-어떻게-동작하는지-설명해주세요">Q: 브라우저에 naver.com 이라는 url를 치고 엔터를 누르면 내부적으로 어떻게 동작하는지 설명해주세요.</h2>

<p><br /></p>

<p><img src="/images/Interview/post12/2021-12-23-21-36-38.png?style=centerme" alt="" /></p>

<p><br /></p>

<ol>
  <li><strong>사용자</strong>가 웹 브라우저의 검색창에 <strong>특정 사이트의 주소를 입력</strong>한다.
<br /><br />
   1-1. <strong>웹 브라우저</strong>가 <strong>DNS</strong>에게 특정 사이트의 (도메인)주소를 <strong>요청</strong>한다.
<br /><br /></li>
  <li><strong>DNS</strong>가 웹 브라우저에게 사이트의 <strong>IP 주소</strong>를 응답한다.
<br /><br /></li>
  <li><strong>웹 브라우저</strong>가 웹 서버에게 IP 주소를 이용하여 <strong>html 문서를 요청</strong>한다.
<br /><br /></li>
  <li><strong>웹 서버</strong>는 바로 웹 페이지를 공급하지 못하고, <strong>웹 애플리케이션 서버와 데이터 베이스</strong>에서 웹 페이지 작업을 처리한다.
<br /><br /></li>
  <li><strong>작업 처리 결과</strong>를 <strong>웹 서버</strong>로 보낸다.
<br /><br /></li>
  <li><strong>웹 서버</strong>는 웹 브라우저에게 <strong>html 문서 결과를 응답</strong>한다. 그리고 <strong>웹 브라우저</strong>는 화면에 웹 페이지를 <strong>출력</strong>한다.</li>
</ol>

<hr />

<h3 id="웹-클라이언트">웹 클라이언트</h3>

<p><br /></p>

<ul>
  <li>웹 클라이언트는 웹 서버에 자료를 요청하기 위해 http를 사용하는 클라이언트 프로그램</li>
</ul>

<p><br /></p>

<p><strong>ex: Internet Explorer, FireFox, Chrome, Safari 등</strong></p>

<p><br /></p>

<hr />

<h3 id="웹-서버">웹 서버</h3>

<p><br /></p>

<ul>
  <li>
    <p>소프트웨어와 하드웨어로 구분된다.</p>
  </li>
  <li><span style="color:#3D9970; font-weight:bold">하드웨어</span>
    <ul>
      <li>Web 서버가 설치되어 있는 컴퓨터</li>
    </ul>
  </li>
  <li><span style="color:#3D9970; font-weight:bold">소프트웨어</span>
    <ul>
      <li>웹 브라우저 클라이언트로부터 HTTP 요청을 받아 **정적인 컨텐츠(.html .jpeg .css 등)를 제공하는 컴퓨터 프로그램</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<ul>
  <li><span style="color:#3D9970; font-weight:bold">Web Server의 기능</span>
    <ul>
      <li>HTTP 프로토콜을 기반으로 하여 클라이언트(웹 브라우저 또는 웹 크롤러)의 요청을 서비스 하는 기능을 담당한</li>
      <li>웹 서버의 가장 중요한 기능은 클라이언트가 요청하는 HTML 문서나 각종 리소스를 전달하는 것</li>
      <li>정적인 컨텐츠 제공</li>
      <li>WAS를 거치지 않고 바로 자원을 제공함</li>
      <li>동적인 컨텐츠 제공을 위한 요청 전달</li>
      <li>클라이언트의 요청(Request)을 WAS에 보내고, WAS가 처리한 결과를 클라이언트에게 전달(응답, Response)한다.</li>
      <li>클라이언트는 일반적으로 웹 브라우저를 의미한다.</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<p><strong>ex: Apache, Nginx, Microsoft, Google 웹서버</strong>이다.</p>

<hr />

<p><br /></p>

<h3 id="웹-애플리케이션-서버was">웹 애플리케이션 서버(WAS)</h3>

<p><br /></p>

<ul>
  <li>브라우저 DBMS(데이터 베이스 관리 시스템) 사이에서 동작하는 미들웨어이다.</li>
  <li>DB 조회나 다양한 로직 처리를 요구하는 동적인 컨텐츠를 제공하기 위해 만들어진 Application Server</li>
  <li>“웹 컨테이너(Web Container)” 혹은 “서블릿 컨테이너(Servlet Container)”라고도 불린다</li>
</ul>

<p><br /></p>

<p>여기서 미들웨어란, 클라이언트와 DBMS 사이에서 <strong>중개 역할을 하는 미들웨어</strong>이다.</p>

<p><br /></p>

<p>클라이언트는 단순히 미들웨어에게 요청을 보내고, 미들웨어에서는 대부분의 로직을 수행한다.</p>

<p><br /></p>

<p>데이터를 조작할 일이 있으면 미들웨어가 DBMS에 접속하기도 한다.</p>

<ul>
  <li><span style="color:#3D9970; font-weight:bold">WAS의 기능</span>
    <ul>
      <li>프로그램 실행 환경과 DB 접속 기능 제공</li>
      <li>여러 개의 트랜젝션(논리적인 작업 단위) 관리 기능</li>
      <li>업무를 처리하는 비즈니스 로직 수행</li>
    </ul>
  </li>
</ul>

<p><br /><br /></p>

<h4 id="was의-기능">WAS의 기능</h4>

<p><br /></p>

<ul>
  <li>WAS가 가지는 중요한 3가지 기능
    <ul>
      <li>프로그램 실행 환경과 데이터 베이스 접속 기능을 제공</li>
      <li>여러 개의 트랜젝션을 관리</li>
      <li>업무를 처리하는 비즈니스 로직을 수행</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<p>이외에 웹 서버를 제공하는 기능도 한다.</p>

<hr />

<p><br /></p>

<h3 id="static-pages와-dynamic-pages">Static Pages와 Dynamic Pages</h3>

<p><br /></p>

<p><img src="/images/Interview/post12/2021-12-23-22-13-58.png?style=centerme" alt="" /></p>

<p><br /></p>

<h4 id="static-pages"><span style="color:#3D9970; font-weight:bold">Static Pages</span></h4>

<p><br /></p>

<ul>
  <li>Web Server는 파일 경로 이름을 받아 경로와 일치하는 file contents를 반환한다.</li>
  <li>항상 동일한 페이지를 반환한다.</li>
  <li>ex) image, html, css, javascript 파일과 같이 컴퓨터에 저장되어 있는 파일들</li>
</ul>

<p><br /></p>

<h4 id="dynamic-pages"><span style="color:#3D9970; font-weight:bold">Dynamic Pages</span></h4>

<p><br /></p>

<ul>
  <li>인자의 내용에 맞게 동적인 contents를 반환한다.</li>
  <li>즉, 웹 서버에 의해서 실행되는 프로그램을 통해서 만들어진 결과물 -&gt; <strong>Servlet</strong>: WAS 위에서 돌아가는 Java Program</li>
  <li>개발자는 Servlet에 doGet()을 구현한다.</li>
</ul>

<p><br /></p>

<hr />

<p><br /></p>

<h3 id="web-server와-was를-구분하는-이유">Web Server와 WAS를 구분하는 이유</h3>

<p><br /></p>

<p><img src="/images/Interview/post12/2021-12-23-22-23-54.png?style=centerme" alt="" /></p>

<p><br /></p>

<ul>
  <li><span style="color:#3D9970; font-weight:bold">Web Server가 필요한 이유</span>
    <ul>
      <li>클라이언트(웹 브라우저)에 이미지 파일(정적 컨텐츠)을 보내는 과정을 생각해보자
        <ul>
          <li>이미지 파일과 같은 정적인 파일들은 웹 문서(HTML 문서)가 클라이언트로 보내질 때 함께 가는 것이 아니다.</li>
          <li>클라이언트는 HTML 문서를 받고 그에 맞게 필요한 이미지 파일들을 다시 서버로 요청하면 그때서야 이미지 파일을 받아온다.</li>
          <li>Web Server를 통해 정적인 파일들을 Application Server까지 가지 않고 앞단에서 빠르게 보내줄 수 있다.</li>
        </ul>
      </li>
      <li>따라서 Web Server에서는 정적 컨텐츠만 처리하도록 기능을 분배하여 서버의 부담을 줄일 수 있다.</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<ul>
  <li><span style="color:#3D9970; font-weight:bold">WAS가 필요한 이유</span>
    <ul>
      <li>웹 페이지는 정적 컨텐츠와 동적 컨텐츠가 모두 존재한다.
        <ul>
          <li>사용자의 요청에 맞게 적절한 동적 컨텐츠를 만들어서 제공해야 한다.</li>
          <li>
            <h2 id="이때-web-server만을-이용한다면-사용자가-원하는-요청에-대한-결과값을-모두-미리-만들어-놓고-서비스를-해야-한다">이때, Web Server만을 이용한다면 사용자가 원하는 요청에 대한 결과값을 모두 미리 만들어 놓고 서비스를 해야 한다.</h2>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>
:ET