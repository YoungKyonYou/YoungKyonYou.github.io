I"O<p><br /><br /></p>

<h1 id="방명록의-조회-수정-그리고-삭제-처리"><center>방명록의 조회, 수정 그리고 삭제 처리</center></h1>

<p><br /></p>

<p>방명록의 조회는 아직 GuestbookService 쪽에 기능이 구현이 되지 않은 상태이므로 서비스 계층부터 구현을 시작한다.</p>

<p><strong>GuestbookService 인터페이스</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="o">(...)</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">GuestbookService</span> <span class="o">{</span>
    <span class="nc">Long</span> <span class="nf">register</span><span class="o">(</span><span class="nc">GuestbookDTO</span> <span class="n">dto</span><span class="o">);</span>
    <span class="nd">@Builder</span><span class="o">.</span><span class="na">Default</span>
    <span class="nc">ModelMapper</span> <span class="n">modelMapper</span><span class="o">=</span> <span class="nc">ModelMapperUtil</span><span class="o">.</span><span class="na">getModelMapper</span><span class="o">();</span>
    <span class="nc">PageResultDTO</span><span class="o">&lt;</span><span class="nc">GuestbookDTO</span><span class="o">,</span> <span class="nc">Guestbook</span><span class="o">&gt;</span> <span class="nf">getList</span><span class="o">(</span><span class="nc">PageRequestDTO</span> <span class="n">requestDTO</span><span class="o">);</span>
    <span class="nc">GuestbookDTO</span> <span class="nf">read</span><span class="o">(</span><span class="nc">Long</span> <span class="n">gno</span><span class="o">);</span>
    <span class="k">default</span> <span class="nc">Guestbook</span> <span class="nf">dtoToEntity</span><span class="o">(</span><span class="nc">GuestbookDTO</span> <span class="n">dto</span><span class="o">){</span>
        <span class="nc">Guestbook</span> <span class="n">entity</span><span class="o">=</span><span class="n">modelMapper</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">dto</span><span class="o">,</span><span class="nc">Guestbook</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

        <span class="k">return</span> <span class="n">entity</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="o">(...)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<p>GuestbookService에는 read()라는 메서드를 추가하고 파라미터는 Long 타입의 gno 값을, 리턴 타입은 GuestbookDTO로 지정한다.</p>

<p><strong>GuestbookServiceImpl.java</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="o">(...)</span>
  <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">GuestbookDTO</span> <span class="nf">read</span><span class="o">(</span><span class="nc">Long</span> <span class="n">gno</span><span class="o">)</span> <span class="o">{</span>

        <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Guestbook</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">repository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">gno</span><span class="o">);</span>

        <span class="k">return</span> <span class="n">result</span><span class="o">.</span><span class="na">isPresent</span><span class="o">()?</span> <span class="n">entityToDto</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">get</span><span class="o">()):</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">(...)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<blockquote>
  <h4 id="line-7-resultget를-통해서-해당-엔티티-객체를-dto-객체로-변환시켜주기-위해서-entitytodto-메서드로-파라미터로-넘겨서-dto를-반환받는다"><strong>line 7:</strong> result.get()를 통해서 해당 엔티티 객체를 DTO 객체로 변환시켜주기 위해서 entityToDto 메서드로 파라미터로 넘겨서 DTO를 반환받는다.<br /></h4>
</blockquote>

<p><br /></p>

<p>GuestbookServiceImple 클래스의 내부에는 인터페이스에 정의된 read() 기능을 구현한다. GuestbookRepository에서 findById()를 통해서 만일 엔티티 객체를 가져왔다면, entityToDto()를 이용해서 엔티티 객체를 DTO를 변환해서 반환한다.</p>

<p>GuestbookController에서는 GET 방식으로 gno 값을 받아서 Model에 GuestbookDTO 객체를 담아서 전달하도록 코드를 작성한다. 추가로 나중에 다시 목록 페이지로 돌아가는 데이터를 같이 저장하기 위해서 PageRequestDTO를 파라미터로 같이 사용한다. @ModelAttribute는 없어도 처리가 가능하지만 명시적으로 requestDTO라는 이름으로 처리해 둔다.</p>

<p><strong>GuestbookController.java 일부</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="o">(...)</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/read"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">read</span><span class="o">(</span><span class="kt">long</span> <span class="n">gno</span><span class="o">,</span> <span class="nd">@ModelAttribute</span><span class="o">(</span><span class="s">"requestDTO"</span><span class="o">)</span> <span class="nc">PageRequestDTO</span> <span class="n">requestDTO</span><span class="o">,</span> <span class="nc">Model</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>

        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"gno: "</span> <span class="o">+</span> <span class="n">gno</span><span class="o">);</span>

        <span class="nc">GuestbookDTO</span> <span class="n">dto</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">gno</span><span class="o">);</span>

        <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">"dto"</span><span class="o">,</span> <span class="n">dto</span><span class="o">);</span>

    <span class="o">}</span>
    <span class="o">(...)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<blockquote>
  <h4 id="line-3-여기서-modelattribute는-pagerequestdto-클래스의-객체-requestdto를-자동으로-생성한다-이때-modelattribute가-지정되는-클래스는-빈-클래스여야-하고-getter-setter가-만들어져-있어야-한다"><strong>line 3:</strong> 여기서 @ModelAttribute는 PageRequestDTO 클래스의 객체 requestDTO를 자동으로 생성한다. 이때 @ModelAttribute가 지정되는 클래스는 빈 클래스여야 하고 getter setter가 만들어져 있어야 한다.<br /></h4>

</blockquote>

<p><br /></p>

:ET