I"AH<p><em>해당 내용은 책 ‘코드로 배우는 스프링 부트 웹 프로젝트’에 나오는 내용이며 이는 개인적으로 공부하기 위해 기록함을 알려드립니다</em></p>

<p><br /><br /></p>

<h1 id="프로젝트를-위한-jpa-처리"><center>프로젝트를 위한 JPA 처리</center></h1>

<p><br /></p>

<p>패키지와 자바 파일을 아래 사진과 같이 생성한다.</p>

<p><br /></p>

<p><img src="/images/Learning_SpringBoot_with_Web_Project/Part5/Chapter10/10-3/2021-07-25-17-21-10.png" alt="" /></p>

<p><br /></p>

<p><strong>BaseEntity.java</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">org.young.club.entity</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">lombok.Getter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.annotation.CreatedDate</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.annotation.LastModifiedDate</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.jpa.domain.support.AuditingEntityListener</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.persistence.Column</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.persistence.EntityListeners</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.persistence.MappedSuperclass</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.time.LocalDateTime</span><span class="o">;</span>

<span class="nd">@MappedSuperclass</span>
<span class="nd">@EntityListeners</span><span class="o">(</span><span class="n">value</span><span class="o">={</span><span class="nc">AuditingEntityListener</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
<span class="nd">@Getter</span>
<span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">BaseEntity</span> <span class="o">{</span>
    <span class="nd">@CreatedDate</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">"regdate"</span><span class="o">,</span><span class="n">updatable</span><span class="o">=</span><span class="kc">false</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">LocalDateTime</span> <span class="n">regDate</span><span class="o">;</span>

    <span class="nd">@LastModifiedDate</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">"moddate"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">LocalDateTime</span> <span class="n">modDate</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p><strong>ClubMember.java</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">org.young.club.entity</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">lombok.*</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.persistence.ElementCollection</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.persistence.Entity</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.persistence.FetchType</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.persistence.Id</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.HashSet</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Set</span><span class="o">;</span>

<span class="nd">@Entity</span>
<span class="nd">@Builder</span>
<span class="nd">@AllArgsConstructor</span>
<span class="nd">@NoArgsConstructor</span>
<span class="nd">@Getter</span>
<span class="nd">@ToString</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ClubMember</span> <span class="kd">extends</span> <span class="nc">BaseEntity</span><span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">email</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">fromSocial</span><span class="o">;</span>

    <span class="c1">//이 어노테이션은 지정된 속성이 컬렉션을 사용할 것이라는 의미이다.</span>
    <span class="c1">//Entity가 아닌 단순한 형태의 객체 집합을 정의하고 관리하는 방법이다.</span>
    <span class="c1">//한 테이블에서 연관된 다른 테이블에 대한 정보를 다루는데 One-To-Many관계를 다룬다</span>

    <span class="c1">//Fetch Type은 크게 Eager와 Lazy 두 가지의 전략이 있습니다. Eager 전략은 엔티티를 조회할 때,</span>
    <span class="c1">// 연관 관계에 있는 엔티티도 함께 가져오고,</span>
    <span class="c1">// 반대로 Lazy 전략은 연관 관계 엔티티를 참조할 때 그때서야</span>
    <span class="c1">// 가져오게 됩니다.</span>
    <span class="nd">@ElementCollection</span><span class="o">(</span><span class="n">fetch</span><span class="o">=</span> <span class="nc">FetchType</span><span class="o">.</span><span class="na">LAZY</span><span class="o">)</span>
    <span class="nd">@Builder</span><span class="o">.</span><span class="na">Default</span>
    <span class="kd">private</span> <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">ClubMemberRole</span><span class="o">&gt;</span> <span class="n">roleSet</span><span class="o">=</span><span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addMemberRole</span><span class="o">(</span><span class="nc">ClubMemberRole</span> <span class="n">clubMemberRole</span><span class="o">){</span>
        <span class="n">roleSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">clubMemberRole</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p><br /></p>

<p><strong>ClubMemberRole.java</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">org.young.club.entity</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">enum</span> <span class="nc">ClubMemberRole</span> <span class="o">{</span>
    <span class="no">USER</span><span class="o">,</span> <span class="no">MANAGER</span><span class="o">,</span> <span class="no">ADMIN</span>
<span class="o">}</span>

</code></pre></div></div>

<p><br /></p>

<p>ClubMember의 데이터 중에서 패스워드는 반드시 암호화해서 데이터를 추가해야 하기 때문에 테스트 코드를 작성해서 100개의 계정을 생성한다. 프로젝트 내에 repository 패키지를 추가한다.</p>

<p><br /></p>

<p><img src="/images/Learning_SpringBoot_with_Web_Project/Part5/Chapter10/10-3/2021-07-25-17-31-33.png" alt="" /></p>

<p><br /></p>

<p><strong>ClubMemberRepository 인터페이스</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">org.young.club.repository</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.data.jpa.repository.JpaRepository</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.young.club.entity.ClubMember</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ClubMemberRepository</span> <span class="kd">extends</span> <span class="nc">JpaRepository</span><span class="o">&lt;</span><span class="nc">ClubMember</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="o">{</span>
<span class="o">}</span>

</code></pre></div></div>

<p><br /></p>

<p>테스트 데이터 생성을 위한 코드도 생성한다.</p>

<p><br /></p>

<p><img src="/images/Learning_SpringBoot_with_Web_Project/Part5/Chapter10/10-3/2021-07-25-17-32-44.png" alt="" /></p>

<p><br /></p>

<p><strong>ClubMemberTests.java</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">org.young.club.security</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.Test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.boot.test.context.SpringBootTest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.security.crypto.password.PasswordEncoder</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.young.club.entity.ClubMember</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.young.club.entity.ClubMemberRole</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.young.club.repository.ClubMemberRepository</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.stream.IntStream</span><span class="o">;</span>

<span class="nd">@SpringBootTest</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ClubMemberTests</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">ClubMemberRepository</span> <span class="n">repository</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">PasswordEncoder</span> <span class="n">passwordEncoder</span><span class="o">;</span>

    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">insertDummies</span><span class="o">(){</span>
        <span class="c1">//1-80까지는 USER만 지정</span>
        <span class="c1">//81-90까지는 USER, MANAGER</span>
        <span class="c1">//91-100까지는 USER, MANAGER, ADMIN</span>

        <span class="nc">IntStream</span><span class="o">.</span><span class="na">rangeClosed</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">100</span><span class="o">).</span><span class="na">forEach</span><span class="o">(</span><span class="n">i</span><span class="o">-&gt;{</span>
            <span class="nc">ClubMember</span> <span class="n">clubMember</span><span class="o">=</span> <span class="nc">ClubMember</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
                    <span class="o">.</span><span class="na">email</span><span class="o">(</span><span class="s">"user"</span><span class="o">+</span><span class="n">i</span><span class="o">+</span><span class="s">"@zerock.org"</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">name</span><span class="o">(</span><span class="s">"사용자"</span><span class="o">+</span><span class="n">i</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">fromSocial</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">password</span><span class="o">(</span><span class="n">passwordEncoder</span><span class="o">.</span><span class="na">encode</span><span class="o">(</span><span class="s">"1111"</span><span class="o">))</span>
                    <span class="o">.</span><span class="na">build</span><span class="o">();</span>
            <span class="c1">//default role</span>
            <span class="n">clubMember</span><span class="o">.</span><span class="na">addMemberRole</span><span class="o">(</span><span class="nc">ClubMemberRole</span><span class="o">.</span><span class="na">USER</span><span class="o">);</span>

            <span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">&gt;</span><span class="mi">80</span><span class="o">){</span>
                <span class="n">clubMember</span><span class="o">.</span><span class="na">addMemberRole</span><span class="o">(</span><span class="nc">ClubMemberRole</span><span class="o">.</span><span class="na">MANAGER</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">&gt;</span><span class="mi">90</span><span class="o">){</span>
                <span class="n">clubMember</span><span class="o">.</span><span class="na">addMemberRole</span><span class="o">(</span><span class="nc">ClubMemberRole</span><span class="o">.</span><span class="na">ADMIN</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="n">repository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">clubMember</span><span class="o">);</span>
        <span class="o">});</span>


    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p><br /></p>

<p>ClubMember 조회 시에는 이메일을 기준으로 조회하고 일반 로그인 사용자 뒤에 추가되는 소셜 로그인 사용자를 구분하기 위해서 ClubMemberRepository에 별도의 메서드로 처리한다.</p>

<p><br /></p>

<p><strong>ClubMemberRepository 인터페이스</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">org.young.club.repository</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.data.jpa.repository.EntityGraph</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.jpa.repository.JpaRepository</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.jpa.repository.Query</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.repository.query.Param</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.young.club.entity.ClubMember</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ClubMemberRepository</span> <span class="kd">extends</span> <span class="nc">JpaRepository</span><span class="o">&lt;</span><span class="nc">ClubMember</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="o">{</span>

    <span class="c1">//EntityGraph는 연관 엔티티의 특정한 속성을 같이 로딩하도록 표시한다</span>
    <span class="c1">//기본적으로 JPA를 이용하는 경우에는 연관 관계의 FATCH 속성값은 LAZY로 지정하는 것이 일반적이다</span>
    <span class="c1">//@EntityGraph는 이러한 상황에서 특정 기능을 수행할 때만 EAGER 로딩을 하도록 지정할 수 있다.</span>
    <span class="c1">//attirubtePaths: 로딩 설정을 변경하고 싶은 속성의 이름을 배열로 명시한다</span>
    <span class="c1">//type: @EntityGraph를 어떤 방식으로 적용할 것인지를 설정</span>
    <span class="c1">//FATCH 속성값은 attributePaths에 명시한 속성은 EAGER로 처리하고 나머지는 LAZY로 처리한다.</span>
    <span class="c1">//LOAD 속성값은 attributePaths에 명시한 속성은 EAGER로 처리하고 나머지는 엔티티 클래스에 명시되거나 기본 방식으로 처리한다.</span>
    
    <span class="c1">//EntityGraph를 이용해서 'left outer join'으로 ClubMemberRole이 처리될 수 있도록 한다.</span>
    <span class="nd">@EntityGraph</span><span class="o">(</span><span class="n">attributePaths</span> <span class="o">=</span> <span class="o">{</span><span class="s">"roleSet"</span><span class="o">},</span> <span class="n">type</span><span class="o">=</span><span class="nc">EntityGraph</span><span class="o">.</span><span class="na">EntityGraphType</span><span class="o">.</span><span class="na">LOAD</span><span class="o">)</span>
    <span class="nd">@Query</span><span class="o">(</span><span class="s">"select m from ClubMember m where m.fromSocial=:social and m.email=:email"</span><span class="o">)</span>
    <span class="c1">//Optional은 non-null 값을 가지고 있거나 안 가지고 있을 수 있는 컨테이너 오브젝트이다</span>
    <span class="c1">// 값이 존재하면 isPresent()는 true를 반환하고</span>
   <span class="c1">//값이 존재하지 않으면 false를 반환한다. 객체를 감싸고 그 안에 값이 있는지 없는지 유무를 판별하기 좋다.</span>
    <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">ClubMember</span><span class="o">&gt;</span> <span class="nf">findByEmail</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"email"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">email</span><span class="o">,</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"social"</span><span class="o">)</span> <span class="kt">boolean</span> <span class="n">social</span><span class="o">);</span>
<span class="o">}</span>

</code></pre></div></div>

<p><br /></p>

:ET