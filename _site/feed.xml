<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Red Queen's Race</title>
		<description>Stylish Jekyll Theme</description>
		<link>/</link>
		<atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>컨테이너 인프라 환경 구축을 위한 쿠버네티스/도커-3.2.3</title>
				<description>&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;해당 내용은 책 &amp;lt;컨테이너 인프라 환경 구축을 위한 쿠버네티스/도커&amp;gt;에 나오는 내용이며 이는 개인적으로 공부하기 위해서 게시하는 글임을 알립니다.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;레플리카셋으로-파드-수-관리하기&quot;&gt;&lt;center&gt;레플리카셋으로 파드 수 관리하기&lt;/center&gt;&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;많은 사용자를 대상으로 웹 서비스를 하려면 다수의 파드가 필요하다. 그래서 쿠버네티스에서는 다수의 파드를 만드는 레플리카셋 오브젝트를 제공한다.
&lt;br /&gt;
디플로이먼트로 생성한 파드여야 replica 옵션을 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//sysnet4admin/echo-hname은 도커 허브에서 해당되는 이미지를 가져온다
kubectl create deployment dpy-hname &lt;span class=&quot;nt&quot;&gt;--image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;sysnet4admin/echo-hname
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;통해서 디플로이먼트를 생성한다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl scale deployment echo-hname &lt;span class=&quot;nt&quot;&gt;--replicas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위 명령을 통해 replica 셋을 생성할 수 있지만 한꺼번에 여러 개의 파드를 만드려면 YAML 파일로 작성해야 한다. 이러한 파일을 &lt;strong&gt;오브젝트 스펙(spec)&lt;/strong&gt;이라 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;echo-hname.yaml&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apps/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deployment&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;echo-hname&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx-test&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;echo-hname&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sysnet4admin/echo-hname&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위 내용을 하나하나 알아가 보자.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;echo-hname.yaml&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#apiVersion: API 버전을 명시한다&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#이 오브젝트를 생성하기 위해 사용하고 있는 쿠버네티스 API 버전이 어떤 것인지&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#명시한다. apps/v1에서는 .spec.selector 와 .metadata.labels 이&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#설정되지 않으면 .spec.template.metadata.labels 은 기본 설정되지 않는다.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#그래서 이것들은 명시적으로 설정되어야 한다. 또한 apps/v1 에서는&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#디플로이먼트를 생성한 후에는 .spec.selector 이 변경되지 않는 점을 참고한다.&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apps/v1&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#어떤 종류의 오브젝트를 생성하고자 하는지 명시한다.&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deployment&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#이름 문자열, UID, 그리고 선택적인 네임스페이스를 포함하여&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#오브젝트를 유일하게 구분지어 줄 데이터이다.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#디플로이먼트 이름(name)은 echo-hname이다.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#차후에 이 디플로이먼트를 delete할 때 이 이름으로 지운다.&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;echo-hname&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;#오브젝트에 첨부된 카와 값의 쌍이다. 레이블은 오브젝트 특성을&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#식별하는 데 사용되어 사용자에게 중요하지만&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#코어 시스템에 직접적인 의미는 없다.&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#오브젝트에 대해 어떤 상태를 의도하는지 명시한다.&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#필드에 따라 디플로이먼트는 3개의 레플리카 파드를 생성&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;#(.spec.selector)디플로이먼트가 관리할 파드를 찾는 방법을 정의한다.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#이 사례에서는 파드 템플릿(아래 명시된 template)에 정의된 레이블(app:nginx)을&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#선택한다. 그러나 파드 템플릿(아래 명시된 template을 말함) 자체의 규칙이 만족되는 한,&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#보다 정교한 선택 규칙의 적용이 가능하다.&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;#template 필드에는 다음 하위 필드가 포함된다&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#파드는 .metadata.labels 필드를 사용해서&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#app: nginx레이블을 붙인다&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;#이 레이블을 담으로써 위에 selector에서 관리할 파드를 찾을 수 있다.&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;#.template.spec 필드는 파드가 도커 허브의&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#sysnet4admin/echo-hname 이미지를 실행하는&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#nginx 컨테이너 1개를 실행하는 것을 나타낸다&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#컨테이너 1개를 생성하고 .spec.template.spec.containers[0].name 필드를&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#사용해서 echo-hname 이라는 이름을 붙인다.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#즉 컨테이너의 이름이 echo-hname이 된다. describe deployment 명령어로 확인 가능&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;echo-hname&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;#컨테이너 이미지는 도커허브에 있는 sysnet4admin/echo-hname을 가져온다.&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sysnet4admin/echo-hname&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그리고 이제&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl create &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; echo-hname.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;명령으로 실행해본다.&lt;/p&gt;
</description>
				<pubDate>Sun, 25 Jul 2021 09:00:00 +0900</pubDate>
				<link>/kubernetes/2021/07/25/Kubernetes-3.2.3.html</link>
				<guid isPermaLink="true">/kubernetes/2021/07/25/Kubernetes-3.2.3.html</guid>
			</item>
		
			<item>
				<title>SpringBoot와 Spring Security 연동</title>
				<description>&lt;p&gt;&lt;em&gt;해당 내용은 책 ‘코드로 배우는 스프링 부트 웹 프로젝트’에 나오는 내용이며 이는 개인적으로 공부하기 위해 기록함을 알려드립니다&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;springboot와-spring-security-연동&quot;&gt;&lt;center&gt;SpringBoot와 Spring Security 연동&lt;/center&gt;&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이번 챕터에서는 아래와 같은 내용을 학습한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;스프링 시큐리티에서 제공하는 로그인 처리 방식의 이해&lt;/li&gt;
  &lt;li&gt;JPA와 연동하는 커스텀 로그인 처리&lt;/li&gt;
  &lt;li&gt;Thymeleaf에서 로그인 정보 활용하기&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;프로젝트 생성&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/SpringBoot/LearningSpringbootWithWebProject-10.1/2021-07-21-18-00-36.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/SpringBoot/LearningSpringbootWithWebProject-10.1/2021-07-21-18-01-05.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;의존성 추가&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/SpringBoot/LearningSpringbootWithWebProject-10.1/2021-07-21-18-01-42.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;style&gt;

&lt;/style&gt;

&lt;p&gt;&lt;strong&gt;build.gradle 설정&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-gradle highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;plugins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.springframework.boot'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'2.5.2'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'io.spring.dependency-management'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1.0.11.RELEASE'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'java'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'war'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.young'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'0.0.1-SNAPSHOT'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sourceCompatibility&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'11'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;configurations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compileOnly&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;extendsFrom&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;annotationProcessor&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mavenCentral&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.springframework.boot:spring-boot-starter-data-jpa'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.springframework.boot:spring-boot-starter-security'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.springframework.boot:spring-boot-starter-thymeleaf'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.springframework.boot:spring-boot-starter-web'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//추가한 부분&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//mysql 드라이버&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;group:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mysql'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mysql-connector-java'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;version:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'8.0.25'&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//Thymeleaf 확장 플러그인은 화면을 제작할 때 스프링 시큐리티 객체들을 처리하는 용도이다.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;group:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.thymeleaf.extras'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'thymeleaf-extras-springsecurity5'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;version:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'3.0.4.RELEASE'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;group:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.thymeleaf.extras'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'thymeleaf-extras-java8time'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;version:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'3.0.4.RELEASE'&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;compileOnly&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.projectlombok:lombok'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;developmentOnly&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.springframework.boot:spring-boot-devtools'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;annotationProcessor&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.projectlombok:lombok'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;providedRuntime&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.springframework.boot:spring-boot-starter-tomcat'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;testImplementation&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.springframework.boot:spring-boot-starter-test'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;testImplementation&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.springframework.security:spring-security-test'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;useJUnitPlatform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;application.properties&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-application.properties&quot;&gt;spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/springsecurity?serverTimezone=UTC&amp;amp;characterEncoding=UTF-8
spring.datasource.username=root
spring.datasource.password=root

#서버 시작 시점에 DDL 문을 생성하여 DB에 적용한다
spring.jpa.hibernate.ddl-auto=update
#True로 하면 sql문을 보기 좋게 설정한다
spring.jpa.properties.hibernate.format_sql=true
#적용된 sql문을 보여준다.
spring.jpa.show-sql=true
#Thymeleaf 템플릿 캐싱 비활성화
#thymeleaf를 사용하다 수정 사항이 생길 대 수정을 하면
#재시작을 해줘야 한다. cache가 계속 쌓이기 때문이다.
#이를 방지하여 브라우저 새로고침만으로도 수정 사항을 확인하기 위해서 이것을 추가한다.
spring.thymeleaf.cache=false

spring.servlet.multipart.enabled=true
spring.servlet.multipart.location=C:\\Users\\nick1\\kpu\\spring_security\\upload
spring.servlet.multipart.max-request-size=30MB
spring.servlet.multipart.max-file-size=10MB

#업데이트 실시간 반영
spring.devtools.livereload.enabled=true

#시큐리티와 관련된 부분은 좀 더 로그 레벨을 낮게 설정해서 자세한 로그를 확인할 수 있도록 한다.
logging.level.org.springframework.security.web=debug
logging.level.org.young.security=debug
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 상태에서 어플리케이션이 제대로 작동하나 실행해 본다. 실행하면 아래 사진과 같이 &lt;strong&gt;password&lt;/strong&gt;가 나온다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/SpringBoot/LearningSpringbootWithWebProject-10.1/2021-07-24-16-06-24.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;프로젝트 초기에 아무 계정도 없을 때 사용할 수 있는 임시 패스워드 역할을 한다. 프로젝트가 정상적으로 실행된다면 ‘http://localhost:8080/login’의 경로로 접근해서 화면에서 &lt;strong&gt;‘user’&lt;/strong&gt;라는 계정으로 설정하고 위의 패스워드를 입력해서 로그인을 테스트 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/SpringBoot/LearningSpringbootWithWebProject-10.1/2021-07-24-16-07-51.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;컨트롤러가 작성되지 않았기 때문에 아래와 같이 나온다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/SpringBoot/LearningSpringbootWithWebProject-10.1/2021-07-24-16-08-12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;시큐리티 설정 클래스를 작성한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/SpringBoot/LearningSpringbootWithWebProject-10.1/2021-07-24-16-20-04.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SecurityConfig 클래스&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.young.club.config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//시큐리티 관련 기능을 쉽게 설정하기 위해서 WebSecurity ConfigurerAdapter라는 클래스를 상속으로 처리한다.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//WebSecurityConfigurer Adapter 클래스는 주로 override를 통해서 여러 설정을 조정하게 된다.&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;lombok.extern.log4j.Log4j2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Log4j2&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//모든 시큐리티 관련 설정이 추가되는 부분이므로 앞으로 작성하는 예제에서 핵심적인 역할을 한다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SecurityConfig&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebSecurityConfigurerAdapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SampleController 클래스&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.young.club.controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;lombok.extern.log4j.Log4j2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.stereotype.Controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Log4j2&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/sample/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//시큐리티와 관련된 설정이 정상적으로 돌아가는지 확인하기 위한 간단한 컨트롤러 구성&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SampleController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//로그인을 하지 않은 사용자도 접근할 수 있는 /sample/all&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/all&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;exAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;exAll.........&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//로그인한 사용자만이 접근할 수 있는 '/sample/member'&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/member&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;exMember&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;exMember.........&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//관리자(admin) 권한이 있는 사용자만이 접근할 수 있는 '/sample/admin'&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/admin&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;exAdmin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;exAdmin.........&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;컨트롤러로 인한 페이지가 표시될 수 있도록 대응되는 html 파일을 구성한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/SpringBoot/LearningSpringbootWithWebProject-10.1/2021-07-24-16-21-36.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;all.html&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Title&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;For All&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;admin.html&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Title&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;For Admin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;member.html&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Title&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;For Member&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;PasswordEncoding를 사용하기 위해서 SecurityConfig 클래스에 추가한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SecurityConfig.java&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.young.club.config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//시큐리티 관련 기능을 쉽게 설정하기 위해서 WebSecurity ConfigurerAdapter라는 클래스를 상속으로 처리한다.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//WebSecurityConfigurer Adapter 클래스는 주로 override를 통해서 여러 설정을 조정하게 된다.&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;lombok.extern.log4j.Log4j2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.security.crypto.password.PasswordEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Log4j2&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//모든 시큐리티 관련 설정이 추가되는 부분이므로 앞으로 작성하는 예제에서 핵심적인 역할을 한다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SecurityConfig&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebSecurityConfigurerAdapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//PasswordEncoder는 패스워드를 인코딩하는 것인데 주목적은 역시 패스워드를 암호화하는 것이다&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//PasswordEncoder는 인터페이스로 설계되어 있으므로 실제 설정에서는 이를 구현하거나 구현된 클래스를 이용해야만 한다.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//스프링 시큐리티에는 여러 종류의 PasswordEncoder를 제공하고 있는데 그중에서도 가장 많이 사용하는 것은&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//BCryptPasswordEncoder라는 클래스이다. 이는 'bcrypt'라는 해시 함수를 이용해서 패스워드를 암호화하는 목적으로 설계됐다.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//SecurityConfig에는 @Bean을 이용해서 BCryptPasswordEncoder를 지정한다.&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;PasswordEncoder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;passwordEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BCryptPasswordEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;PasswordTests라는 테스트 클래스를 작성해 본다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/SpringBoot/LearningSpringbootWithWebProject-10.1/2021-07-24-17-08-02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PasswordTests.java&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.young.club.security&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.junit.jupiter.api.Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.beans.factory.annotation.Autowired&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.test.context.SpringBootTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.security.crypto.password.PasswordEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@SpringBootTest&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PasswordTests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PasswordEncoder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passwordEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//BCryptPasswordEncoder로 암호화된 패스워드는 다시 원래대로 복호화가 불가능하다&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//매번 암호화된 값도 다르게 된다&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//대신에 특정한 문자열이 암호화된 결과인지만을 확인할 수 있다.(.matches()함수를 통해서)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1111&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enPw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;passwordEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;enPw:&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enPw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matchResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;passwordEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enPw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;matchResult: &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matchResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위 테스트를 통해 인코딩된 password가 나타난다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/SpringBoot/LearningSpringbootWithWebProject-10.1/2021-07-24-17-24-06.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;enPw에 나오는 내용을 복사해두고 다시 SecurityConfig.java로 돌아와 코드를 추가한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SecurityConfig.java&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.young.club.config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//시큐리티 관련 기능을 쉽게 설정하기 위해서 WebSecurity ConfigurerAdapter라는 클래스를 상속으로 처리한다.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//WebSecurityConfigurer Adapter 클래스는 주로 override를 통해서 여러 설정을 조정하게 된다.&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;lombok.extern.log4j.Log4j2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.security.crypto.password.PasswordEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Log4j2&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//모든 시큐리티 관련 설정이 추가되는 부분이므로 앞으로 작성하는 예제에서 핵심적인 역할을 한다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SecurityConfig&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebSecurityConfigurerAdapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//PasswordEncoder는 패스워드를 인코딩하는 것인데 주목적은 역시 패스워드를 암호화하는 것이다&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//PasswordEncoder는 인터페이스로 설계되어 있으므로 실제 설정에서는 이를 구현하거나 구현된 클래스를 이용해야만 한다.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//스프링 시큐리티에는 여러 종류의 PasswordEncoder를 제공하고 있는데 그중에서도 가장 많이 사용하는 것은&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//BCryptPasswordEncoder라는 클래스이다. 이는 'bcrypt'라는 해시 함수를 이용해서 패스워드를 암호화하는 목적으로 설계됐다.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//SecurityConfig에는 @Bean을 이용해서 BCryptPasswordEncoder를 지정한다.&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;PasswordEncoder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;passwordEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BCryptPasswordEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//SecurityConfig에는 AuthenticationManager의 설정을 쉽게 처리할 수 있도록 도와주는&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//configure() 메서드를 override해서 처리한다. 파라미터의 타입인 AuthenticationManagerBuilder는&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//말 그대로 코드를 통해서 직접 인증 매니저를 설정할 때 사용한다.&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;AuthenticationManagerBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//사용자 계정은 user1, 일단 인메모리 스피링 시큐리티를 실험한다.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//inMemoryAuthentication()는 인 메모리 authentication를 AuthenticationManagerBuilder에 추가하고&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//원하는데로 인 메모리 authentication를 구성하는 것이 가능한 InMemoryUserDetailsManagerConfigurer 타입을 반환한다.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//withUser()는 생성되는 UserDetailsManager에 user를 추가하는 것을 허용한다&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//이 함수는 다수의 users를 등록하기 위해서 여러 번 호출이 가능하다&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;inMemoryAuthentication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//1111 패스워드 인코딩 결과&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$2a$10$3mm3ssAaaIYCfmJQu2w5KedCy.1yO7O3J9/Me72i5drQkHm54F2CW&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//사용자가 가지는 권한은 USER라는 권한으로 지정한다.&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;roles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;USER&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;애플리케이션을 실행하고 위에서 설정한 아이디와 비밀번호를 통해서 localhost:8080/sample/all에 접속해 본다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/SpringBoot/LearningSpringbootWithWebProject-10.1/2021-07-24-17-27-48.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그리고 인가(Authorization)가 필요한 리소스 설정을 한다&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SecurityConfig.java&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.young.club.config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(...)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//모든 시큐리티 관련 설정이 추가되는 부분이므로 앞으로 작성하는 예제에서 핵심적인 역할을 한다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SecurityConfig&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebSecurityConfigurerAdapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;(...)&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;AuthenticationManagerBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;(...)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//스프링 시큐리티를 이용해서 특정한 리소스에 접근 제한을 하는 방식은 크게 두 가지이다.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//1) 설정을 통해서 패턴을 지정하거나&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//2) 어노테이션을 이용해서 적용하는 방법이 있다.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//어노테이션을 이용하는 방식이 더 간단하긴 하지만 우선은 SecurityConfig 클래스로 설정해 본다.&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpSecurity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;//http.authorizeRequests()로 인증이 필요한 자원들을 설정할 수 있고 antMatchers()는&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// '**/*'와 같은 앤트 스타일의 패턴으로 원하는 자원을 선택할 수 있다.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//마지막으로 permitAll()의 경우는 말 그대로 '모든 사용자에게 허락'한다는 의미이므로&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//로그인하지 않은 사용자도 익명의 사용자로 간주되어서 접근이 가능하게 된다.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//프로젝트를 재시작해서 /sample/all에 접속하면 별도의 로그인 없이도 접근이 가능해 진다.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;authorizeRequests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;antMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/sample/all&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;permitAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;애플리케이션을 다시 시작하고 ‘/sample/all’에 접속하면 별다른 로그인 없이도 페이지에 접근한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/SpringBoot/LearningSpringbootWithWebProject-10.1/2021-07-24-17-38-03.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;반면 다시 아래와 같이 설정을 변경하고 ‘/sample/member’를 호출하면 Access Denied된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SecurityConfig.java&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.young.club.config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(...)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//모든 시큐리티 관련 설정이 추가되는 부분이므로 앞으로 작성하는 예제에서 핵심적인 역할을 한다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SecurityConfig&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebSecurityConfigurerAdapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;(...)&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;AuthenticationManagerBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;(...)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//스프링 시큐리티를 이용해서 특정한 리소스에 접근 제한을 하는 방식은 크게 두 가지이다.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//1) 설정을 통해서 패턴을 지정하거나&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//2) 어노테이션을 이용해서 적용하는 방법이 있다.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//어노테이션을 이용하는 방식이 더 간단하긴 하지만 우선은 SecurityConfig 클래스로 설정해 본다.&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpSecurity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;//http.authorizeRequests()로 인증이 필요한 자원들을 설정할 수 있고 antMatchers()는&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// '**/*'와 같은 앤트 스타일의 패턴으로 원하는 자원을 선택할 수 있다.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//마지막으로 permitAll()의 경우는 말 그대로 '모든 사용자에게 허락'한다는 의미이므로&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//로그인하지 않은 사용자도 익명의 사용자로 간주되어서 접근이 가능하게 된다.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//프로젝트를 재시작해서 /sample/all에 접속하면 별도의 로그인 없이도 접근이 가능해 진다.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;authorizeRequests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;antMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/sample/all&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;permitAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
         &lt;span class=&quot;c1&quot;&gt;//아래와 같이 설정하고 /sample/member'를 호출하면 Access Denied 된다.&lt;/span&gt;
                                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;antMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/sample/member&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasRole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;USER&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/SpringBoot/LearningSpringbootWithWebProject-10.1/2021-07-24-17-42-04.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;HttpSecurity의 formLogin()이라는 기능은 이와 같이 인가/인증 절차에서 문제가 발생했을 때 로그인 페이지를 보여주도록 지정할 수 있고 화면으로 로그인 방식을 지원한다는 의미로 사용된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SecurityConfig.java&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.young.club.config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(...)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//모든 시큐리티 관련 설정이 추가되는 부분이므로 앞으로 작성하는 예제에서 핵심적인 역할을 한다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SecurityConfig&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebSecurityConfigurerAdapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;(...)&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;AuthenticationManagerBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;(...)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//스프링 시큐리티를 이용해서 특정한 리소스에 접근 제한을 하는 방식은 크게 두 가지이다.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//1) 설정을 통해서 패턴을 지정하거나&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//2) 어노테이션을 이용해서 적용하는 방법이 있다.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//어노테이션을 이용하는 방식이 더 간단하긴 하지만 우선은 SecurityConfig 클래스로 설정해 본다.&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpSecurity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;//http.authorizeRequests()로 인증이 필요한 자원들을 설정할 수 있고 antMatchers()는&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// '**/*'와 같은 앤트 스타일의 패턴으로 원하는 자원을 선택할 수 있다.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//마지막으로 permitAll()의 경우는 말 그대로 '모든 사용자에게 허락'한다는 의미이므로&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//로그인하지 않은 사용자도 익명의 사용자로 간주되어서 접근이 가능하게 된다.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//프로젝트를 재시작해서 /sample/all에 접속하면 별도의 로그인 없이도 접근이 가능해 진다.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;authorizeRequests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;antMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/sample/all&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;permitAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
         &lt;span class=&quot;c1&quot;&gt;//아래와 같이 설정하고 /sample/member'를 호출하면 Access Denied 된다.&lt;/span&gt;
                                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;antMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/sample/member&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasRole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;USER&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

       &lt;span class=&quot;c1&quot;&gt;//인가/인증에 문제시 로그인 화면면&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;formLogin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/SpringBoot/LearningSpringbootWithWebProject-10.1/2021-07-24-17-44-41.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위 사진과 같이 formLogin()이 적용되면 인가/인증에 실패하는 경우에 로그인 페이지를 볼 수 있게 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;formLogin()과 마찬가지로 logout() 메서드를 이용하면 로그아웃 처리가 가능하다. formLogout() 역시 로그인과 마찬가지로 별도의 설정이 없는 경우에는 스프링 시큐리티가 제공하는 웹 페이지를 보게 된다. SecurityConfig에 logout()을 적용해주기만 하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SecurityConfig.java&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.young.club.config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(...)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//모든 시큐리티 관련 설정이 추가되는 부분이므로 앞으로 작성하는 예제에서 핵심적인 역할을 한다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SecurityConfig&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebSecurityConfigurerAdapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;(...)&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;AuthenticationManagerBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;(...)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//스프링 시큐리티를 이용해서 특정한 리소스에 접근 제한을 하는 방식은 크게 두 가지이다.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//1) 설정을 통해서 패턴을 지정하거나&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//2) 어노테이션을 이용해서 적용하는 방법이 있다.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//어노테이션을 이용하는 방식이 더 간단하긴 하지만 우선은 SecurityConfig 클래스로 설정해 본다.&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpSecurity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;//http.authorizeRequests()로 인증이 필요한 자원들을 설정할 수 있고 antMatchers()는&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// '**/*'와 같은 앤트 스타일의 패턴으로 원하는 자원을 선택할 수 있다.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//마지막으로 permitAll()의 경우는 말 그대로 '모든 사용자에게 허락'한다는 의미이므로&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//로그인하지 않은 사용자도 익명의 사용자로 간주되어서 접근이 가능하게 된다.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//프로젝트를 재시작해서 /sample/all에 접속하면 별도의 로그인 없이도 접근이 가능해 진다.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;authorizeRequests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;antMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/sample/all&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;permitAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
         &lt;span class=&quot;c1&quot;&gt;//아래와 같이 설정하고 /sample/member'를 호출하면 Access Denied 된다.&lt;/span&gt;
                                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;antMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/sample/member&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasRole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;USER&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

       &lt;span class=&quot;c1&quot;&gt;//인가/인증에 문제시 로그인 화면면&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;formLogin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//csrf 토큰을 발행하지 않는다.&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;csrf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;disable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;//로그아웃 처리&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;logout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;프로젝트를 다시 실행하고 /sample/member로 접근하면 아래와 같이 로그아웃 되고 다시 로그인을 하라는 상태가 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/SpringBoot/LearningSpringbootWithWebProject-10.1/2021-07-24-17-59-51.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;logout()에서 주의해야 할 점은 CSRF 토큰을 사용할 때는 반드시 POST 방식으로만 로그아웃을 처리한다는 점이다. CSRF 토큰을 이용하는 경우에는 /logout 이라는 URL을 호출했을 때는 &amp;lt;form&amp;gt; 태그와 버튼으로 구성된 화면을 보게 되지만 CSRF 토큰을 disable()로 비활성화 시키면 GET 방식(‘/logout’)으로도 로그아웃 처리된다.(위 그림과 같이)&lt;/p&gt;
</description>
				<pubDate>Wed, 21 Jul 2021 10:00:00 +0900</pubDate>
				<link>/springboot/2021/07/21/springboot-LearningSpringBoot-10.1.html</link>
				<guid isPermaLink="true">/springboot/2021/07/21/springboot-LearningSpringBoot-10.1.html</guid>
			</item>
		
			<item>
				<title>컨테이너 인프라 환경 구축을 위한 쿠버네티스/도커-3.1.3</title>
				<description>&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;해당 내용은 책 &amp;lt;컨테이너 인프라 환경 구축을 위한 쿠버네티스/도커&amp;gt;에 나오는 내용이며 이는 개인적으로 공부하기 위해서 게시하는 글임을 알립니다.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;쿠버네티스-구성하기&quot;&gt;&lt;center&gt;쿠버네티스 구성하기&lt;/center&gt;&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Vagranfile 87pg&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Vagrantfile&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# -*- mode: ruby -*-&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# vi: set ft=ruby :&lt;/span&gt;

Vagrant.configure&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; |config|
  N &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3 &lt;span class=&quot;c&quot;&gt;# max number of worker nodes&lt;/span&gt;
  Ver &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1.18.4'&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Kubernetes Version to install&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;#=============#&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# Master Node #&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#=============#&lt;/span&gt;

    config.vm.define &lt;span class=&quot;s2&quot;&gt;&quot;m-k8s&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; |cfg|
      cfg.vm.box &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sysnet4admin/CentOS-k8s&quot;&lt;/span&gt;
      cfg.vm.provider &lt;span class=&quot;s2&quot;&gt;&quot;virtualbox&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; |vb|
        vb.name &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;m-k8s(github_SysNet4Admin)&quot;&lt;/span&gt;
        vb.cpus &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2
        vb.memory &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3072
        vb.customize &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;modifyvm&quot;&lt;/span&gt;, :id, &lt;span class=&quot;s2&quot;&gt;&quot;--groups&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;/k8s-SgMST-1.13.1(github_SysNet4Admin)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
      end
      cfg.vm.host_name &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;m-k8s&quot;&lt;/span&gt;
      cfg.vm.network &lt;span class=&quot;s2&quot;&gt;&quot;private_network&quot;&lt;/span&gt;, ip: &lt;span class=&quot;s2&quot;&gt;&quot;192.168.1.10&quot;&lt;/span&gt;
      cfg.vm.network &lt;span class=&quot;s2&quot;&gt;&quot;forwarded_port&quot;&lt;/span&gt;, guest: 22, host: 60010, auto_correct: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;ssh&quot;&lt;/span&gt;
      cfg.vm.synced_folder &lt;span class=&quot;s2&quot;&gt;&quot;../data&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;/vagrant&quot;&lt;/span&gt;, disabled: &lt;span class=&quot;nb&quot;&gt;true
      &lt;/span&gt;cfg.vm.provision &lt;span class=&quot;s2&quot;&gt;&quot;shell&quot;&lt;/span&gt;, path: &lt;span class=&quot;s2&quot;&gt;&quot;config.sh&quot;&lt;/span&gt;, args: N
      cfg.vm.provision &lt;span class=&quot;s2&quot;&gt;&quot;shell&quot;&lt;/span&gt;, path: &lt;span class=&quot;s2&quot;&gt;&quot;install_pkg.sh&quot;&lt;/span&gt;, args: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; Ver, &lt;span class=&quot;s2&quot;&gt;&quot;Main&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
      cfg.vm.provision &lt;span class=&quot;s2&quot;&gt;&quot;shell&quot;&lt;/span&gt;, path: &lt;span class=&quot;s2&quot;&gt;&quot;master_node.sh&quot;&lt;/span&gt;
    end

  &lt;span class=&quot;c&quot;&gt;#==============#&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# Worker Nodes #&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#==============#&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1..N&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.each &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; |i|
    config.vm.define &lt;span class=&quot;s2&quot;&gt;&quot;w#{i}-k8s&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; |cfg|
      cfg.vm.box &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sysnet4admin/CentOS-k8s&quot;&lt;/span&gt;
      cfg.vm.provider &lt;span class=&quot;s2&quot;&gt;&quot;virtualbox&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; |vb|
        vb.name &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;w#{i}-k8s(github_SysNet4Admin)&quot;&lt;/span&gt;
        vb.cpus &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
        vb.memory &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2560
        vb.customize &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;modifyvm&quot;&lt;/span&gt;, :id, &lt;span class=&quot;s2&quot;&gt;&quot;--groups&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;/k8s-SgMST-1.13.1(github_SysNet4Admin)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
      end
      cfg.vm.host_name &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;w#{i}-k8s&quot;&lt;/span&gt;
      cfg.vm.network &lt;span class=&quot;s2&quot;&gt;&quot;private_network&quot;&lt;/span&gt;, ip: &lt;span class=&quot;s2&quot;&gt;&quot;192.168.1.10#{i}&quot;&lt;/span&gt;
      cfg.vm.network &lt;span class=&quot;s2&quot;&gt;&quot;forwarded_port&quot;&lt;/span&gt;, guest: 22, host: &lt;span class=&quot;s2&quot;&gt;&quot;6010#{i}&quot;&lt;/span&gt;, auto_correct: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;ssh&quot;&lt;/span&gt;
      cfg.vm.synced_folder &lt;span class=&quot;s2&quot;&gt;&quot;../data&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;/vagrant&quot;&lt;/span&gt;, disabled: &lt;span class=&quot;nb&quot;&gt;true
      &lt;/span&gt;cfg.vm.provision &lt;span class=&quot;s2&quot;&gt;&quot;shell&quot;&lt;/span&gt;, path: &lt;span class=&quot;s2&quot;&gt;&quot;config.sh&quot;&lt;/span&gt;, args: N
      cfg.vm.provision &lt;span class=&quot;s2&quot;&gt;&quot;shell&quot;&lt;/span&gt;, path: &lt;span class=&quot;s2&quot;&gt;&quot;install_pkg.sh&quot;&lt;/span&gt;, args: Ver
      cfg.vm.provision &lt;span class=&quot;s2&quot;&gt;&quot;shell&quot;&lt;/span&gt;, path: &lt;span class=&quot;s2&quot;&gt;&quot;work_nodes.sh&quot;&lt;/span&gt;
    end
  end

end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이제 한 줄 한 줄씩 알아가보자&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Vagrantfile&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#아래 두줄의 주석은 에디터에 현재 파일이 루비임을 인식하게 하는 호환 코드이다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ft는 file type(파일종류)의 약자이다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# -*- mode: ruby -*-&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# vi: set ft=ruby :&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#&quot;2&quot;는 configuration object |config|의 버전을 명시하는 것이다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#이것은 configuration 블록으로 사용된다.&lt;/span&gt;
Vagrant.configure&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; |config|

  &lt;span class=&quot;c&quot;&gt;#생성할 뭐커노드 개수 정의&lt;/span&gt;
  N &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3 &lt;span class=&quot;c&quot;&gt;# max number of worker nodes&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#다운받을 쿠버네티스 버젼 정의&lt;/span&gt;
  Ver &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1.18.4'&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Kubernetes Version to install&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;#=============#&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# Master Node #&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#=============#&lt;/span&gt;


    &lt;span class=&quot;c&quot;&gt;#https://www.vagrantup.com/docs/vagrantfile/machine_settings 참고&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#config.vm.define: 버추얼박스에서 보이는 가상 머신을 &quot;m-k8s&quot;로 정의한다.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#do |cfg|를 추가해 원하는 설정으로 변경한다.&lt;/span&gt;
    config.vm.define &lt;span class=&quot;s2&quot;&gt;&quot;m-k8s&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; |cfg|

        &lt;span class=&quot;c&quot;&gt;#config.vm.box: 어떤 box에 대해 machine이 표시되는지 구성한다. 여기에 값은&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#HashiCorp's Vagrant Clout에 설치된 박스나 약칭으로된 이름이 들어가야 한다.&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#즉 사람들이 만들어 놓은 운영체제 이미지의 이름이 들어간다.&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#42pg를 보면 필자가 만들어 놓은 운영체제 이미지를 사용한다.&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#필자가 만든 운영체제 이미지의 이름이 &quot;sysnet4admin/CentOS-k8s&quot;이다.&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;#https://app.vagranup.com/sysnet4admin/boxes/CentOS-k8s에서 확인할 수 있다.&lt;/span&gt;
      cfg.vm.box &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sysnet4admin/CentOS-k8s&quot;&lt;/span&gt;

      &lt;span class=&quot;c&quot;&gt;#베이그런트의 프로바이더(provider)가 버추얼박스라는 것을 정의한다. 프로바이더는&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;#베이그런트를 통해 제공되는 코드가 실제로 가상 머신으로 배포되게 하는 소프트웨어이다.&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;#버추얼박스가 여기에 해당한다. 다음으로 버추얼박스에 필요한 설정을 정의하는데&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;#그 시작을 do |vb|로 선언한다. provider가 존재하지 않을 경우 Vagrant는  이 설정 블록을&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;#무시한다.&lt;/span&gt;
      cfg.vm.provider &lt;span class=&quot;s2&quot;&gt;&quot;virtualbox&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; |vb|

      &lt;span class=&quot;c&quot;&gt;#VirtualBox provider는 더 VirtualBox 기반 Vagrant 환경을 보다 세밀하게 제어할 수 있는&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;#몇 가지 추가 구성 옵션을 제공한다.&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;#https://www.vagrantup.com/docs/providers/virtualbox/configuration 참고&lt;/span&gt;

      &lt;span class=&quot;c&quot;&gt;#버추얼박스에 생성한 가상 머신의 이름, CPU 수, 메모리 크기, 소속된 그룹을 명시한다.&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;#그리고 마지막으로 end를 적어 버추얼박스 설정이 끝났음을 알린다.&lt;/span&gt;

      &lt;span class=&quot;c&quot;&gt;#VirtualBox GUI에 표시될 이름을 설정한다&lt;/span&gt;
        vb.name &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;m-k8s(github_SysNet4Admin)&quot;&lt;/span&gt;
        vb.cpus &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2
        vb.memory &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3072

       &lt;span class=&quot;c&quot;&gt;# :id는 생성되는 가상 머신의 ID를 반환하는 특별한 매개변수이다.&lt;/span&gt;
       &lt;span class=&quot;c&quot;&gt;#그래서 VBoxManage 커맨드가 ID를 요구할 때 이 특별한 매개변수를 사용한다.&lt;/span&gt;
       &lt;span class=&quot;c&quot;&gt;#--groups를 이용해서 명시된 그룹으로 분리하는 것이다.&lt;/span&gt;
       &lt;span class=&quot;c&quot;&gt;# 여러개의 vms가 있으면 헷갈릴 수 있으므로 분류한다.&lt;/span&gt;
       &lt;span class=&quot;c&quot;&gt;#modifyvm은 ID에 해당하는 vm의 설정을 한다.&lt;/span&gt;
        vb.customize &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;modifyvm&quot;&lt;/span&gt;, :id, &lt;span class=&quot;s2&quot;&gt;&quot;--groups&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;/k8s-SgMST-1.13.1(github_SysNet4Admin)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
      end

      &lt;span class=&quot;c&quot;&gt;#여기서는 가상 머신 자체에 대한 설정이다.&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;#do |cfg|에 속한 작업이다. 즉 호스트의 이름(m-k8s)을 설정한다.&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;#SSH에 보여질 호스트 이름이다.&lt;/span&gt;
      cfg.vm.host_name &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;m-k8s&quot;&lt;/span&gt;

      &lt;span class=&quot;c&quot;&gt;#호스트 전용 네트워크를 private_network로 설정해 eth1 인터페이스를&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;#호스트 전용(Host-Only)으로 구성하고 IP는 192.168.1.10으로 지정한다. 고정 IP를 설정해주는 방법이다.&lt;/span&gt;
      cfg.vm.network &lt;span class=&quot;s2&quot;&gt;&quot;private_network&quot;&lt;/span&gt;, ip: &lt;span class=&quot;s2&quot;&gt;&quot;192.168.1.10&quot;&lt;/span&gt;

      &lt;span class=&quot;c&quot;&gt;#ssh 통신은 호스트 60010번을 게스트 22번으로 전달되도록 구성한다.&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;#이때 혹시 모를 포트 중복을 대비해 auto_correct: true로 설정해서&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;#포트가 중복되면 포트가 자동으로 변경되도록 한다.&lt;/span&gt;
      cfg.vm.network &lt;span class=&quot;s2&quot;&gt;&quot;forwarded_port&quot;&lt;/span&gt;, guest: 22, host: 60010, auto_correct: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;ssh&quot;&lt;/span&gt;

      &lt;span class=&quot;c&quot;&gt;#호스트(PC 또는 노트북)와 게스트(가상 머신) 사이에&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;#디렉터리 동기화가 이뤄지지 않게 설정(disabled: true)한다.&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;#첫 번째 파라미터는 host의 경로이다 두 번째 파라미터는 guest(vm)의 경로이다.&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;#가상머신에 들어가보면 /vagrant 경로에 Vagrantfile이 있다&lt;/span&gt;
      cfg.vm.synced_folder &lt;span class=&quot;s2&quot;&gt;&quot;../data&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;/vagrant&quot;&lt;/span&gt;, disabled: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;


      &lt;span class=&quot;c&quot;&gt;#vm.provision &quot;shell&quot; 구문으로 경로(path)에 있는 install_pkg.sh와 config.sh를&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;#게스트(CentOS) 내부에서 호출해 실행되도록 한다.&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;#변수 (N=3)를 args: N으로 받는다. 이는 사용자가 워커 노드의 개수를 직접 조절할 수 있게 한다.&lt;/span&gt;
      cfg.vm.provision &lt;span class=&quot;s2&quot;&gt;&quot;shell&quot;&lt;/span&gt;, path: &lt;span class=&quot;s2&quot;&gt;&quot;config.sh&quot;&lt;/span&gt;, args: N

      &lt;span class=&quot;c&quot;&gt;#args: [Ver, &quot;Main&quot;] 코드를 추가해 쿠버네티스 버전 정보(Ver)와 Main이라&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;#는 문자를 install_pkg.sh로 넘긴다. Ver 변수는 각 노드에 해당 버전의 쿠버네티스 버전을&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;#설치하게 한다. 두 번째 인자인 Main 문자는 install_pkg.sh에서 조건문으로 처리해 마스터&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;#노드에만 이 책의 전체 실행 코드를 내려받게 한다.&lt;/span&gt;
      cfg.vm.provision &lt;span class=&quot;s2&quot;&gt;&quot;shell&quot;&lt;/span&gt;, path: &lt;span class=&quot;s2&quot;&gt;&quot;install_pkg.sh&quot;&lt;/span&gt;, args: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; Ver, &lt;span class=&quot;s2&quot;&gt;&quot;Main&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

      &lt;span class=&quot;c&quot;&gt;#쿠버네티스 마스터 노드를 위한 master_node.sh&lt;/span&gt;
      cfg.vm.provision &lt;span class=&quot;s2&quot;&gt;&quot;shell&quot;&lt;/span&gt;, path: &lt;span class=&quot;s2&quot;&gt;&quot;master_node.sh&quot;&lt;/span&gt;
    end

  &lt;span class=&quot;c&quot;&gt;#==============#&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# Worker Nodes #&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#==============#&lt;/span&gt;

   &lt;span class=&quot;c&quot;&gt;#for 문을 돌리는데 여기서 i는 1부터 3까지 대입되며 반복된다.&lt;/span&gt;
   &lt;span class=&quot;c&quot;&gt;#즉 N=3임으로 3번 구문을 반복하여 Worker Node를 3개를 만드는 것이다.&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1..N&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.each &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; |i|

    &lt;span class=&quot;c&quot;&gt;# #{i} 구문으로 i의 값을 가져온다 그래서 w1-k8s, w2-k8s, w3-k8s로 가상머신을 정의한다.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#버추얼박스에서 보이는 가상 머신을 정의하는 것이다.&lt;/span&gt;
    config.vm.define &lt;span class=&quot;s2&quot;&gt;&quot;w#{i}-k8s&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; |cfg|

    &lt;span class=&quot;c&quot;&gt;#config.vm.box: 어떤 box에 대해 machine이 표시되는지 구성한다. 여기에 값은&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#HashiCorp's Vagrant Clout에 설치된 박스나 약칭으로된 이름이 들어가야 한다.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#즉 사람들이 만들어 놓은 운영체제 이미지의 이름이 들어간다.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#42pg를 보면 필자가 만들어 놓은 운영체제 이미지를 사용한다.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#필자가 만든 운영체제 이미지의 이름이 &quot;sysnet4admin/CentOS-k8s&quot;이다.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#https://app.vagranup.com/sysnet4admin/boxes/CentOS-k8s에서 확인할 수 있다.&lt;/span&gt;
      cfg.vm.box &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sysnet4admin/CentOS-k8s&quot;&lt;/span&gt;

      &lt;span class=&quot;c&quot;&gt;#베이그런트의 프로바이더(provider)가 버추얼박스라는 것을 정의한다. 프로바이더는&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;#베이그런트를 통해 제공되는 코드가 실제로 가상 머신으로 배포되게 하는 소프트웨어이다.&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;#버추얼박스가 여기에 해당한다. 다음으로 버추얼박스에 필요한 설정을 정의하는데&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;#그 시작을 do |vb|로 선언한다. provider가 존재하지 않을 경우 Vagrant는 이 설정 블록을&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;#무시한다.&lt;/span&gt;
      cfg.vm.provider &lt;span class=&quot;s2&quot;&gt;&quot;virtualbox&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; |vb|

        vb.name &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;w#{i}-k8s(github_SysNet4Admin)&quot;&lt;/span&gt;
        vb.cpus &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
        vb.memory &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2560
        vb.customize &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;modifyvm&quot;&lt;/span&gt;, :id, &lt;span class=&quot;s2&quot;&gt;&quot;--groups&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;/k8s-SgMST-1.13.1(github_SysNet4Admin)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
      end

      &lt;span class=&quot;c&quot;&gt;#여기서는 가상 머신 자체에 대한 설정이다.&lt;/span&gt;
       &lt;span class=&quot;c&quot;&gt;#do |cfg|에 속한 작업이다. 즉 호스트의 이름(w#{i}-k8s)을 설정한다.&lt;/span&gt;
       &lt;span class=&quot;c&quot;&gt;#superputty의 ssh에서 나타날 호스트 이름이다.&lt;/span&gt;
      cfg.vm.host_name &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;w#{i}-k8s&quot;&lt;/span&gt;

      &lt;span class=&quot;c&quot;&gt;#생략&lt;/span&gt;
      cfg.vm.network &lt;span class=&quot;s2&quot;&gt;&quot;private_network&quot;&lt;/span&gt;, ip: &lt;span class=&quot;s2&quot;&gt;&quot;192.168.1.10#{i}&quot;&lt;/span&gt;
      cfg.vm.network &lt;span class=&quot;s2&quot;&gt;&quot;forwarded_port&quot;&lt;/span&gt;, guest: 22, host: &lt;span class=&quot;s2&quot;&gt;&quot;6010#{i}&quot;&lt;/span&gt;, auto_correct: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;ssh&quot;&lt;/span&gt;
      cfg.vm.synced_folder &lt;span class=&quot;s2&quot;&gt;&quot;../data&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;/vagrant&quot;&lt;/span&gt;, disabled: &lt;span class=&quot;nb&quot;&gt;true
      &lt;/span&gt;cfg.vm.provision &lt;span class=&quot;s2&quot;&gt;&quot;shell&quot;&lt;/span&gt;, path: &lt;span class=&quot;s2&quot;&gt;&quot;config.sh&quot;&lt;/span&gt;, args: N
      cfg.vm.provision &lt;span class=&quot;s2&quot;&gt;&quot;shell&quot;&lt;/span&gt;, path: &lt;span class=&quot;s2&quot;&gt;&quot;install_pkg.sh&quot;&lt;/span&gt;, args: Ver

      &lt;span class=&quot;c&quot;&gt;#쿠버네티스 워커 노드를 위한 work_nodes.sh이다.&lt;/span&gt;
      cfg.vm.provision &lt;span class=&quot;s2&quot;&gt;&quot;shell&quot;&lt;/span&gt;, path: &lt;span class=&quot;s2&quot;&gt;&quot;work_nodes.sh&quot;&lt;/span&gt;
    end
  end

end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;config.sh는 kubeadm으로 쿠버네티스를 설치하기 위한 사전 조건을 설정하는 스크립트 파일이다. 쿠버네티스의 노드가 되는 가상 머신에 어떤 값을 설정하는지 알아본다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;config.sh&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# vim configuration&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'alias vi=vim'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/profile

&lt;span class=&quot;c&quot;&gt;# swapoff -a to disable swapping&lt;/span&gt;
swapoff &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# sed to comment the swap partition in /etc/fstab&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt;.bak &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/(.+ swap .+)/#\1/'&lt;/span&gt; /etc/fstab

&lt;span class=&quot;c&quot;&gt;# kubernetes repo&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;gg_pkg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;packages.cloud.google.com/yum/doc&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Due to shorten addr for key&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt; /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=0
repo_gpgcheck=0
gpgkey=https://&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;gg_pkg&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;/yum-key.gpg https://&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;gg_pkg&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;/rpm-package-key.gpg
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# Set SELinux in permissive mode (effectively disabling it)&lt;/span&gt;
setenforce 0
&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/^SELINUX=enforcing$/SELINUX=permissive/'&lt;/span&gt; /etc/selinux/config

&lt;span class=&quot;c&quot;&gt;# RHEL/CentOS 7 have reported traffic issues being routed incorrectly due to iptables bypassed&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt;  /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;modprobe br_netfilter

&lt;span class=&quot;c&quot;&gt;# local small dns &amp;amp; vagrant cannot parse and delivery shell code.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;192.168.1.10 m-k8s&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/hosts
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; i&amp;lt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; i++  &lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;192.168.1.10&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; w&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;-k8s&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/hosts&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# config DNS&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt; /etc/resolv.conf
nameserver 1.1.1.1 #cloudflare DNS
nameserver 8.8.8.8 #Google DNS
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF


&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;한 줄 한 줄 살펴보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;config.sh&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#vim configuration&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#vi를 호출하면 vim을 호출하도록 프로파일에 입력한다&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#이렇게 하면 코드에 하이라이트를 넣어 코드를 쉽게 구분할 수 있다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#리눅스 alias 설정 'alias 별명='명령어 정의'' 를 /etc/profile에 정의하면 된다.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'alias vi=vim'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/profile

&lt;span class=&quot;c&quot;&gt;# swapoff -a는 스왑을 중지시키라는 명령어이다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 스왑을 내렸다 다시 시작해 스왑 메모리를 반환 하는데 사용한다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#swap은 시스템에 메모리가 부족할 경우에 하드 디스크의 일부 공간을 활용하여&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#계속 작업을 도와주는 영역이다. 리눅스에서는 RAM 공간이 부족하면 하드디스크의&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#일부 공간을 사용하게 되는데 권장되지 않는다.(하드디스크는 접근 속도가 느리다)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# swapoff -a to disable swapping&lt;/span&gt;
swapoff &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#시스템이 다시 시작되더라도 스왑되지 않도록 설정한다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# sed to comment the swap partition in /etc/fstab&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#sed는 vi 편집기랑 마찬가지로 편집에 특화된 명령어이다. 수정, 치환, 삭제, 글추가 등 편집기 기능은&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#웬만해서 다 된다. vi는 편집기를 열어서 커서로 라인을 옮기고 글을 삭제하고 쓰고 하는 등 워드 파일을&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#수정하는 것과 같다면 sed는 명령행에서 파일을 인자로 받아 명령어를 통해 작업한 후 결과를&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#화면으로 확인하는 방식이다. 특징은 sed 편집기는 원본을 손상시키지 않고 수정한 후 결과를 보여준다&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#그래서 원본을 수정하려면 -i 옵션이 필요한 것이다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#.bak 확장자는 컴퓨터로 작업중에 생길 수 있는 전원 차단과 같은 갑자기 컴퓨터가 꺼질 경우를 대비해&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#자동으로 만들어지는 백업 파일이다. 여기서 sed -i.bak은 원본 수정 후 .bak 확장자로 파일을 생성하여 백업&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#하라는 것이다. 즉 /etc 아래 fstab.bak 파일이 하나 생긴다&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#/etc/fstab은 파일 시스템 정보를 저장하고 있으며 리눅스 부팅시 마운트 정보를 저장하고 있다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#이 파일안에 있는 구성값들로 인해 부팅시에 자동으로 적용될 수 있도록 한다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#s/문자1/문자2/ [파일]은 파일 안에 있는 문자1을 2로 바꾸라는 옵션이다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#여기선 /etc/fstab이라는 파일을 열어서 수정한다는 것이다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#그리고 아래를 보면 .+ 라고 되어 있는 부분은 정규식 표현이다 즉 .은 임의의 한 문자를 의미하고&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#+은 바로 앞의 문자가 1회 이상 반복된다는 뜻이다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#즉 swap 이 중간에 있고 그 앞과 뒤에 반복적으로 임의의 문자가 여러 개있는 다시 말해 그 라인을 선택한다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#/etc/fstab에 들어가보면&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#/dev/mapper/centos_k8s-swap swap                    swap    defaults        0 0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 이것 라인 전체를 선택하고 이것은 \1로 역참조하고 주석(#) 앞에 다가 이 라인을 넣으라는 것&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#다시 말해 주석을 처리하는 것이다.&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;#시스템이 다시 시작되더라도 스왑되지 않도록 설정하려면&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#/etc/fstab 파일을 열여서 swap 인트리에 주석'#'을 달아야한다.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt;.bak &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/(.+ swap .+)/#\1/'&lt;/span&gt; /etc/fstab

&lt;span class=&quot;c&quot;&gt;# kubernetes repo&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#쿠버네티스의 리포지터리를 설정하기 위한 경로가 너무 길어지지 않게 경로를 변수로 처리하는 것이다.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;gg_pkg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;packages.cloud.google.com/yum/doc&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Due to shorten addr for key&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#cat를 사용해서 여러 줄을 입력하기 위한 방법으로 cat &amp;lt;&amp;lt;EOF를 사용한다. 그리고 다썼으면 마지막에&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#EOF로 저장하고 종료한다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#그래서 cat으로 여러 줄을 입력하되 입력 내용을 /etc/yum.repos.d 아래 kubernetes.repo 파일에 저장한다&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#/etc/yum.repos은 Package를 모아놓은 저장소이다. Yum을 통해 Package 설치 시 활성화 된&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#Yum Repository에서 Package를 다운로드하여 설치하기 때문에&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#Package가 Repository에 없을 경우 설치 할 수 없다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#그래서 여기 안에는 우리가 이전에 설치했던 epel도 들어가 있다.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt; /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=0
repo_gpgcheck=0
gpgkey=https://&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;gg_pkg&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;/yum-key.gpg https://&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;gg_pkg&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;/rpm-package-key.gpg
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#selinux가 제한적으로 사용되지 않도록 permissive 모드로 변경한다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#SELinux(Security-Enhanced Linux)는 관리자가 시스템 액세스 권한을 효과적으로&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#제어할 수 있게 하는 Linux® 시스템용 보안 아키텍처이다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#SELinux는 enforce, permissive, disable 세 가지 동작 모드가 있으며&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#설치하면 기본적으로 enforce 모드로 동작합니다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#enforce 모드일 경우 SELinux의 정책과 룰에 어긋나는 동작은 모두 차단되며&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#permissive 모드이 경우 정책에 어긋나는 동작은 감사 로그를 남기고 허용한다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#setenforce 0 명령이 permissive로 바꾸는 명령이다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#그리고 /etc/selinux/config 파일에서 SELINUX로 시작되고 enforcing$으로 끝나는 부분을&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#SELINUX=permissive으로 바꿔주고 있다. (옵션 s를 통해서)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#-i 옵션은 sed에서 원본을 바꾸는 옵션이다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Set SELinux in permissive mode (effectively disabling it)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#부팅 할때 SELinux 모드를 결정하는 설정 파일은 /etc/selinux/config 에 존재한다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#부팅 할때 SELinux 모드를 변경하려면 /etc/selinux/config 에서&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#SELINUX=enforcing 부분을 permissive 로 변경하면 된다&lt;/span&gt;
setenforce 0
&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/^SELINUX=enforcing$/SELINUX=permissive/'&lt;/span&gt; /etc/selinux/config

&lt;span class=&quot;c&quot;&gt;#브리지 네트워크를 통과하는 IPv4와 IPv6의 패킷을 iptables가 관리하게 설정한다&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#파드의 통신을 iptables로 제어한다. 필요에 따라 IPVS 같은 방식으로도 구성할 수 있다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# RHEL/CentOS 7 have reported traffic issues being routed incorrectly due to iptables bypassed&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#iptables는 리눅스상에서 방화벽을 설정하는 도구로서 커널 2.4 이전 버전에서 사용되던&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ipchains를 대신하는 방화벽 도구이다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#iptables란 넷필터 프로젝트에서 개발했으며 광범위한 프로토콜 상태 추적,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#패킷 애플리케이션 계층검사, 속도 제한, 필터링 정책을 명시하기 위한 강력한 매커니즘을 제공한다.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt;  /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#br_netfilter 커널 모듈을 사용해 브리지로 네트워크를 구성한다. 이때 IP 마스커레이드(Masquerade)를&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#사용해 내부 네트워크와 외부 네트워크를 분리한다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#IP 마스커레이드는 쉽게 설명하면 커널에서 제공하는 NAT 기능으로 이해하면 된다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#실제로는 br_netfilter를 적용함으로써 28~31번째 줄에서 적용한 iptables가 활성화된다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#쿠버네티스 설치 시 br_netfilter 모듈이 필요하다&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#이 커널 모듈을 사용하면 브릿지를 통과하는 패킷이 필터링 및 포트 전달을 위해&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#iptables에 의해 처리되고 클러스터의 쿠버네티스 Pod는 서로 통신 가능.&lt;/span&gt;
modprobe br_netfilter

&lt;span class=&quot;c&quot;&gt;# local small dns &amp;amp; vagrant cannot parse and delivery shell code.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#쿠버네티스 안에서 노드 간 통신을 이름으로 할 수 있도록 각 노드의&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#호스트 이름과 IP를 /etc/hosts에 설정한다. 이때 워커 노드는&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#Vagrantfile에서 넘겨받은 N 변수로 전달된 노드 수에 맞게 동적으로 생성한다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#echo는 문자열을 출력하는데 이것을 /etc 폴더 아래 hosts 파일에 저장하게 된다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#즉 그 파일에는 원래 내용에다가&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#192.168.1.10 m-k8s&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#192.168.1.101 w1-k8s&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#192.168.1.102 w2-k8s&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#192.168.1.103 w3-k8s&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#가 추가된다.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;192.168.1.10 m-k8s&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/hosts
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; i&amp;lt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; i++  &lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;192.168.1.10&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; w&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;-k8s&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/hosts&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# config DNS&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#외부와 통신할 수 있게 DNS 서버를 지정한다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#DNS 서버는 꼭 해당 통신사의 DNS 서버를 이용하지 않아도&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#된다. 단지 PC가 &quot;자동으로 DNS 서버 주소 받기&quot;로&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#설정되어 있으면 자동으로 그 해당 통신사의&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#DNS 서버 주소를 이용하게 된다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#하지만 아래와 같이 DNS 서버를 수동으로 변경하는 과정을 거치게 되면&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#다른 DNS 서버를 이용할 수도 있다&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#아래는 cloudfare와 google의 퍼블릭 DNS를 사용하는 것이다.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt; /etc/resolv.conf
nameserver 1.1.1.1 #cloudflare DNS
nameserver 8.8.8.8 #Google DNS
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;install_pkg.sh&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# install packages&lt;/span&gt;
yum &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;epel-release &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;
yum &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;vim-enhanced &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;
yum &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;git &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# install docker&lt;/span&gt;
yum &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;docker &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; systemctl &lt;span class=&quot;nb&quot;&gt;enable&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--now&lt;/span&gt; docker

&lt;span class=&quot;c&quot;&gt;# install kubernetes cluster&lt;/span&gt;
yum &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;kubectl-&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; kubelet-&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; kubeadm-&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;
systemctl &lt;span class=&quot;nb&quot;&gt;enable&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--now&lt;/span&gt; kubelet

&lt;span class=&quot;c&quot;&gt;# git clone _Book_k8sInfra.git&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Main'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;git clone https://github.com/sysnet4admin/_Book_k8sInfra.git
  &lt;span class=&quot;nb&quot;&gt;mv&lt;/span&gt; /home/vagrant/_Book_k8sInfra &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;
  find &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/_Book_k8sInfra/ &lt;span class=&quot;nt&quot;&gt;-regex&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.*&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.\(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;sh&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-exec&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;700 &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;install_pkg.sh&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# install packages&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#EPEL(Extra Packages for Enterprise Linux) 저장소 설치&lt;/span&gt;
yum &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;epel-release &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#코드 하이라이트를 위한 Vim의 추가 기능을 설치&lt;/span&gt;
yum &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;vim-enhanced &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#깃허브에서 코드를 내려받을 수 있게 깃을 설치한다.&lt;/span&gt;
yum &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;git &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# install docker&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#쿠버네티스를 관리하는 컨테이너를 설치하기 위해 도커를 설치하고 구동한다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#systemctl enable 서비스명은 서비스를 활성화시키라는 것이다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#즉 시스템이 재부팅하면 자동으로 서비스를 실행하도록 등록한다.&lt;/span&gt;
yum &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;docker &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; systemctl &lt;span class=&quot;nb&quot;&gt;enable&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--now&lt;/span&gt; docker

&lt;span class=&quot;c&quot;&gt;# install kubernetes cluster&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#쿠버네티스를 구성하기 위해 첫 번째 변수($1=Ver='1.18.4')로 넘겨받은&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#1.18.4 버전의 kubectl, kubelet, kubeadm을 설치하고 kubelet을 시작한다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#$1는 Vagrantfile에서 arg으로 넘겨주는 인자이다.&lt;/span&gt;
yum &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;kubectl-&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; kubelet-&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; kubeadm-&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;
systemctl &lt;span class=&quot;nb&quot;&gt;enable&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--now&lt;/span&gt; kubelet

&lt;span class=&quot;c&quot;&gt;# git clone _Book_k8sInfra.git&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#이 책의 전체 실행 코드를 마스터 노드에만 내려받도록 Vagrantfile에서&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#두 번째 변수($2='Main')를 넘겨받는다. 그리고 깃에서 코드를 내려받아 실습을 진행할&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#루트 홈디렉터리(/root)로 옮긴다. 배시 스크립트(.sh)를 find로 찾아서 바로 실행 가능한 상태가 되도록&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#chmod 700으로 설정한다.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Main'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#clone해서 코드를 내려받는다.&lt;/span&gt;
  git clone https://github.com/sysnet4admin/_Book_k8sInfra.git

  &lt;span class=&quot;c&quot;&gt;#/home/vagrant에 있는 _Book_k8sInfra 폴더를 HOME(/root)으로 옮긴다.&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;mv&lt;/span&gt; /home/vagrant/_Book_k8sInfra &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;#/root에 있는 _Book_k8sInfra 폴더 안에&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#-exec는 검색된 파일에 대해 지정된 명령을 실행한다. 즉 여기서는 chmod 700를 한다.&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#_Book_k8sInfra 폴더 안에서 .sh 파일을 찾는 것이다. (그 폴더 안에 또 다른 폴더 안에 있을 수 있음)&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#정규식 표현을 보면 *:0개 이상을 의미하고 \:는 어떤 특수한 문자 앞에 쓰면&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#그 특수한 문자로 보는 게 아니라 그냥 단순한 문자로 본다.&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#즉 여기서 .*는 임의의 문자가 0개 이상 나타나고 \( 는 ( 이 문자를 나타내고&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#.\는 .sh에서 .를 나타낸다.&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#(sh)의 ()는 문자열에서 같은 순서로 포함된 문자와 일치함을 의미한다.기타 표현식을&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#그룹화하는 데 사용한다. \)은 )를 문자 자체를 표현한다. 마지막의 \; 는&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#세미콜론을 사용하기 위한 이스케이프 문자이다 {}문자는&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#find의 결과로 대체된다 즉 .sh의 풀이름으로 대체된다. 그래서&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#결론적으로 -exec chmod 700 test.sh; 로 실행되는 것이다.&lt;/span&gt;

  find &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/_Book_k8sInfra/ &lt;span class=&quot;nt&quot;&gt;-regex&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.*&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.\(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;sh&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-exec&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;700 &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;master_node.sh&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# init kubernetes&lt;/span&gt;
kubeadm init &lt;span class=&quot;nt&quot;&gt;--token&lt;/span&gt; 123456.1234567890123456 &lt;span class=&quot;nt&quot;&gt;--token-ttl&lt;/span&gt; 0 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--pod-network-cidr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;172.16.0.0/16 &lt;span class=&quot;nt&quot;&gt;--apiserver-advertise-address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.1.10

&lt;span class=&quot;c&quot;&gt;# config for master node only&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.kube
&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; /etc/kubernetes/admin.conf &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.kube/config
&lt;span class=&quot;nb&quot;&gt;chown&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;:&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.kube/config

&lt;span class=&quot;c&quot;&gt;# config for kubernetes's network&lt;/span&gt;
kubectl apply &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
https://raw.githubusercontent.com/sysnet4admin/IaC/master/manifests/172.16_net_calico.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;master_node.sh&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# init kubernetes&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#kubeadm을 통해 쿠버네티스의 워커 노드를 받아들일 준비를 한다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#먼저 토큰을 123456.1234567890123456으로 지정하고 ttl(time to live, 유지되는 시간)을&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#0으로 설정해서 기본값인 24시간 후에 토큰이 계속 유지되게 한다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#그리고 워커 노드가 정해진 토큰으로 들어오게 한다. 쿠버네티스가&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#자동으로 컨테이너에 부여하는 네트워크를 172.16.0.0/16(172.16.0.1~172.16.255.254)으로 제공하고&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#워커 노드가 접속하는 API 서버의 IP를 192.168.1.10으로 지정해 워커 노드들이 자동으로 API 서버에&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#연결되게 한다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#--pod-network-cidr string에 대한 문서 내용&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#Specify range of IP addresses for the pod network.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#If set, the control plane will automatically allocate CIDRs for every node.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#control plane=master node&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#--apiserver-advertise-address에 대한 공식문서 내용은 아래와 같다&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#The IP address the API Server will advertise it's listening on.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#If not set the default network interface will be used.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#CIDR에 대한 내용 https://kim-dragon.tistory.com/9&lt;/span&gt;
kubeadm init &lt;span class=&quot;nt&quot;&gt;--token&lt;/span&gt; 123456.1234567890123456 &lt;span class=&quot;nt&quot;&gt;--token-ttl&lt;/span&gt; 0 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--pod-network-cidr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;172.16.0.0/16 &lt;span class=&quot;nt&quot;&gt;--apiserver-advertise-address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.1.10


&lt;span class=&quot;c&quot;&gt;#마스터 노드에서 현재 사용자가 쿠버네티스를 정상적으로 구동할 수 있게 설정 파일을&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#루트의 홈디렉터리(/root)에 복사하고 쿠버네티스를 이용할 사용자에게 권한을 준다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# config for master node only&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#/etc/kubernetes 폴더 안에 admin.conf 파일을 /root/.kube 폴더 아래 config 파일을 생성해서&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#내용을 복사한다는 것이다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#chown을 사용하여 파일의 소유자를 소유자가 지정한 사용자 ID 또는 프로파일로&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#설정할 수 있다. 선택적으로 chown은 파일의 그룹을 그룹이 지정한 그룹ID 또는&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#프로파일로 설정할 수도 있다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Owner와 group을 변경하려면 Owner:Group 여기에 넣으면 된다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#즉 Owner를 id -u로 바꾸고 group를 id -g로 바꾼다.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.kube
&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; /etc/kubernetes/admin.conf &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.kube/config
&lt;span class=&quot;nb&quot;&gt;chown&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;:&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.kube/config

&lt;span class=&quot;c&quot;&gt;#컨테이너 네트워크 인터페이스(CNI)인 캘리코(Calico)의 설정을 적용해 쿠버네티스의&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#네트워크를 구성한다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# config for kubernetes's network&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#kubectl apply를 사용해서 리소스를 생성하거나 업데이트 할 수 있다&lt;/span&gt;
kubectl apply &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
https://raw.githubusercontent.com/sysnet4admin/IaC/master/manifests/172.16_net_calico.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;work_nodes.sh&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# config for work_nodes only&lt;/span&gt;
kubeadm &lt;span class=&quot;nb&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--token&lt;/span&gt; 123456.1234567890123456 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
             &lt;span class=&quot;nt&quot;&gt;--discovery-token-unsafe-skip-ca-verification&lt;/span&gt; 192.168.1.10:6443
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;work_nodes.sh&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# config for work_nodes only&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#kubeadm을 이용해 쿠버네티스 마스터 노드에 접속합니다. 이때 연결에 필요한 토큰은&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#기존에 마스터 노드에서 생성한 123456.1234567890123456을 사용한다&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#간단하게 구성하기 위해 --discovery-token-unsafe-skip-ca-verification으로&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#인증을 무시하고, API 서버 주소인 192.168.1.10으로 기본 포트 번호인 6443번 포트에 접속하도록 설정한다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#--discovery-token-unsafe-skip-ca-verification에 대한 문서 내용은 아래와 같다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#This weakens the kubeadm security model since other nodes can potentially&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#impersonate the Kubernetes Control Plane.&lt;/span&gt;
kubeadm &lt;span class=&quot;nb&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--token&lt;/span&gt; 123456.1234567890123456 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
             &lt;span class=&quot;nt&quot;&gt;--discovery-token-unsafe-skip-ca-verification&lt;/span&gt; 192.168.1.10:6443
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
				<pubDate>Tue, 20 Jul 2021 09:00:00 +0900</pubDate>
				<link>/kubernetes/2021/07/20/Kubernetes-3.1.3.html</link>
				<guid isPermaLink="true">/kubernetes/2021/07/20/Kubernetes-3.1.3.html</guid>
			</item>
		
			<item>
				<title>컨테이너 인프라 환경 구축을 위한 쿠버네티스/도커-2.2.3</title>
				<description>&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;해당 내용은 책 &amp;lt;컨테이너 인프라 환경 구축을 위한 쿠버네티스/도커&amp;gt;에 나오는 내용이며 이는 개인적으로 공부하기 위해서 게시하는 글임을 알립니다.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;가상-머신-추가로-구성하기&quot;&gt;&lt;center&gt;가상 머신 추가로 구성하기&lt;/center&gt;&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Vagranfile 55pg&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이번에는 기존에 설치한 가상 머신 외에 가상 머신 3대를 추가로 설치해본다. 그리고 기존의 가상 머신과 추가한 가상 머신 간에 네트워크 통신이 원활하게 작동하는지 확인해 본다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Vagrantfile&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# -*- mode: ruby -*-&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# vi: set ft=ruby :&lt;/span&gt;

Vagrant.configure&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; |config|
  config.vm.define &lt;span class=&quot;s2&quot;&gt;&quot;m-k8s&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; |cfg|
    cfg.vm.box &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sysnet4admin/CentOS-k8s&quot;&lt;/span&gt;
    cfg.vm.provider &lt;span class=&quot;s2&quot;&gt;&quot;virtualbox&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; |vb|
      vb.name &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;m-k8s(github_SysNet4Admin)&quot;&lt;/span&gt;
      vb.cpus &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2
      vb.memory &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2048
      vb.customize &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;modifyvm&quot;&lt;/span&gt;, :id, &lt;span class=&quot;s2&quot;&gt;&quot;--groups&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;/k8s-SM(github_SysNet4Admin)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    end
    cfg.vm.host_name &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;m-k8s&quot;&lt;/span&gt;
    cfg.vm.network &lt;span class=&quot;s2&quot;&gt;&quot;private_network&quot;&lt;/span&gt;, ip: &lt;span class=&quot;s2&quot;&gt;&quot;192.168.1.10&quot;&lt;/span&gt;
    cfg.vm.network &lt;span class=&quot;s2&quot;&gt;&quot;forwarded_port&quot;&lt;/span&gt;, guest: 22, host: 60010, auto_correct: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;ssh&quot;&lt;/span&gt;
    cfg.vm.synced_folder &lt;span class=&quot;s2&quot;&gt;&quot;../data&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;/vagrant&quot;&lt;/span&gt;, disabled: &lt;span class=&quot;nb&quot;&gt;true
    &lt;/span&gt;cfg.vm.provision &lt;span class=&quot;s2&quot;&gt;&quot;shell&quot;&lt;/span&gt;, path: &lt;span class=&quot;s2&quot;&gt;&quot;install_pkg.sh&quot;&lt;/span&gt;
    cfg.vm.provision &lt;span class=&quot;s2&quot;&gt;&quot;file&quot;&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;ping_2_nds.sh&quot;&lt;/span&gt;, destination: &lt;span class=&quot;s2&quot;&gt;&quot;ping_2_nds.sh&quot;&lt;/span&gt;
    cfg.vm.provision &lt;span class=&quot;s2&quot;&gt;&quot;shell&quot;&lt;/span&gt;, path: &lt;span class=&quot;s2&quot;&gt;&quot;config.sh&quot;&lt;/span&gt;
  end

  &lt;span class=&quot;c&quot;&gt;#=============#&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# Added Nodes #&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#=============#&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1..3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.each &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; |i|
    config.vm.define &lt;span class=&quot;s2&quot;&gt;&quot;w#{i}-k8s&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; |cfg|
      cfg.vm.box &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sysnet4admin/CentOS-k8s&quot;&lt;/span&gt;
      cfg.vm.provider &lt;span class=&quot;s2&quot;&gt;&quot;virtualbox&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; |vb|
        vb.name &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;w#{i}-k8s(github_SysNet4Admin)&quot;&lt;/span&gt;
        vb.cpus &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
        vb.memory &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1024
        vb.customize &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;modifyvm&quot;&lt;/span&gt;, :id, &lt;span class=&quot;s2&quot;&gt;&quot;--groups&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;/k8s-SM(github_SysNet4Admin)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
      end
      cfg.vm.host_name &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;w#{i}-k8s&quot;&lt;/span&gt;
      cfg.vm.network &lt;span class=&quot;s2&quot;&gt;&quot;private_network&quot;&lt;/span&gt;, ip: &lt;span class=&quot;s2&quot;&gt;&quot;192.168.1.10#{i}&quot;&lt;/span&gt;
      cfg.vm.network &lt;span class=&quot;s2&quot;&gt;&quot;forwarded_port&quot;&lt;/span&gt;, guest: 22, host: &lt;span class=&quot;s2&quot;&gt;&quot;6010#{i}&quot;&lt;/span&gt;,auto_correct: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;ssh&quot;&lt;/span&gt;
      cfg.vm.synced_folder &lt;span class=&quot;s2&quot;&gt;&quot;../data&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;/vagrant&quot;&lt;/span&gt;, disabled: &lt;span class=&quot;nb&quot;&gt;true
      &lt;/span&gt;cfg.vm.provision &lt;span class=&quot;s2&quot;&gt;&quot;shell&quot;&lt;/span&gt;, path: &lt;span class=&quot;s2&quot;&gt;&quot;install_pkg.sh&quot;&lt;/span&gt;
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;한 줄 한 줄씩 알아가보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Vagrantfile&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#아래 두줄의 주석은 에디터에 현재 파일이 루비임을 인식하게 하는 호환 코드이다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ft는 file type(파일종류)의 약자이다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# -*- mode: ruby -*-&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# vi: set ft=ruby :&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#&quot;2&quot;는 configuration object |config|의 버전을 명시하는 것이다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#이것은 configuration 블록으로 사용된다.&lt;/span&gt;
Vagrant.configure&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; |config|

&lt;span class=&quot;c&quot;&gt;#https://www.vagrantup.com/docs/vagrantfile/machine_settings 참고&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#config.vm.define: 버추얼박스에서 보이는 가상 머신을 &quot;m-k8s&quot;로 정의한다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#do |cfg|를 추가해 원하는 설정으로 변경한다.&lt;/span&gt;
  config.vm.define &lt;span class=&quot;s2&quot;&gt;&quot;m-k8s&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; |cfg|

  &lt;span class=&quot;c&quot;&gt;#config.vm.box: 어떤 box에 대해 machine이 표시되는지 구성한다. 여기에 값은&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#HashiCorp's Vagrant Clout에 설치된 박스나 약칭으로된 이름이 들어가야 한다.&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#즉 사람들이 만들어 놓은 운영체제 이미지의 이름이 들어간다.&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#42pg를 보면 필자가 만들어 놓은 운영체제 이미지를 사용한다.&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#필자가 만든 운영체제 이미지의 이름이 &quot;sysnet4admin/CentOS-k8s&quot;이다.&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#https://app.vagranup.com/sysnet4admin/boxes/CentOS-k8s에서 확인할 수 있다.&lt;/span&gt;
    cfg.vm.box &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sysnet4admin/CentOS-k8s&quot;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;#베이그런트의 프로바이더(provider)가 버추얼박스라는 것을 정의한다. 프로바이더는&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#베이그런트를 통해 제공되는 코드가 실제로 가상 머신으로 배포되게 하는 소프트웨어이다.&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#버추얼박스가 여기에 해당한다. 다음으로 버추얼박스에 필요한 설정을 정의하는데&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#그 시작을 do |vb|로 선언한다. provider가 존재하지 않을 경우 Vagrant는 이 설정 블록을&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#무시한다.&lt;/span&gt;
    cfg.vm.provider &lt;span class=&quot;s2&quot;&gt;&quot;virtualbox&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; |vb|

    &lt;span class=&quot;c&quot;&gt;#VirtualBox provider는 더 VirtualBox 기반 Vagrant 환경을 보다 세밀하게 제어할 수 있는&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#몇 가지 추가 구성 옵션을 제공한다.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#https://www.vagrantup.com/docs/providers/virtualbox/configuration 참고&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;#버추얼박스에 생성한 가상 머신의 이름, CPU 수, 메모리 크기, 소속된 그룹을 명시한다.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#그리고 마지막으로 end를 적어 버추얼박스 설정이 끝났음을 알린다.&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;#VirtualBox GUI에 표시될 이름을 설정한다&lt;/span&gt;
      vb.name &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;m-k8s(github_SysNet4Admin)&quot;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;#사용할 CPU 수 설정&lt;/span&gt;
      vb.cpus &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2
      &lt;span class=&quot;c&quot;&gt;#사용할 메모리 크기 설정&lt;/span&gt;
      vb.memory &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2048

    &lt;span class=&quot;c&quot;&gt;# :id는 생성되는 가상 머신의 ID를 반환하는 특별한 매개변수이다.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#그래서 VBoxManage 커맨드가 ID를 요구할 때 이 특별한 매개변수를 사용한다.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#--groups를 이용해서 명시된 그룹으로 분리하는 것이다.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# 여러개의 vms가 있으면 헷갈릴 수 있으므로 분류한다.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#modifyvm은 ID에 해당하는 vm의 설정을 한다.&lt;/span&gt;
      vb.customize &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;modifyvm&quot;&lt;/span&gt;, :id, &lt;span class=&quot;s2&quot;&gt;&quot;--groups&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;/k8s-SM(github_SysNet4Admin)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    end

    &lt;span class=&quot;c&quot;&gt;#여기서는 가상 머신 자체에 대한 설정이다.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#do |cfg|에 속한 작업이다. 즉 호스트의 이름(m-k8s)을 설정한다.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#SSH에 보여질 호스트 이름이다.&lt;/span&gt;
    cfg.vm.host_name &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;m-k8s&quot;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;#호스트 전용 네트워크를 private_network로 설정해 eth1 인터페이스를&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#호스트 전용(Host-Only)으로 구성하고 IP는 192.168.1.10으로 지정한다. 고정 IP를 설정해주는 방법이다.&lt;/span&gt;
    cfg.vm.network &lt;span class=&quot;s2&quot;&gt;&quot;private_network&quot;&lt;/span&gt;, ip: &lt;span class=&quot;s2&quot;&gt;&quot;192.168.1.10&quot;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;#ssh 통신은 호스트 60010번을 게스트 22번으로 전달되도록 구성한다.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#이때 혹시 모를 포트 중복을 대비해 auto_correct: true로 설정해서&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#포트가 중복되면 포트가 자동으로 변경되도록 한다.&lt;/span&gt;
    cfg.vm.network &lt;span class=&quot;s2&quot;&gt;&quot;forwarded_port&quot;&lt;/span&gt;, guest: 22, host: 60010, auto_correct: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;ssh&quot;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;#호스트(PC 또는 노트북)와 게스트(가상 머신) 사이에&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#디렉터리 동기화가 이뤄지지 않게 설정(disabled: true)한다.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#첫 번째 파라미터는 host의 경로이다 두 번째 파라미터는 guest(vm)의 경로이다.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#가상머신에 들어가보면 /vagrant 경로에 Vagrantfile이 있다&lt;/span&gt;
    cfg.vm.synced_folder &lt;span class=&quot;s2&quot;&gt;&quot;../data&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;/vagrant&quot;&lt;/span&gt;, disabled: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;#vm.provision &quot;shell&quot; 구문으로 경로(path)에 있는 install_pkg.sh과 config.sh를&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#게스트(CentOS) 내부에서 호출해 실행되도록 한다.&lt;/span&gt;
    cfg.vm.provision &lt;span class=&quot;s2&quot;&gt;&quot;shell&quot;&lt;/span&gt;, path: &lt;span class=&quot;s2&quot;&gt;&quot;install_pkg.sh&quot;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;#파일을 게스트 운영 체제에 전달하기 위해 &quot;shell&quot;이 아닌 &quot;file&quot; 구문으로 변경한다.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#이렇게 하면 호스트에 있는 ping_2_nds.sh 파일을&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#게스트의 홈 디렉터리(/home/vagrant)로 전달한다&lt;/span&gt;
    cfg.vm.provision &lt;span class=&quot;s2&quot;&gt;&quot;file&quot;&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;ping_2_nds.sh&quot;&lt;/span&gt;, destination: &lt;span class=&quot;s2&quot;&gt;&quot;ping_2_nds.sh&quot;&lt;/span&gt;
    cfg.vm.provision &lt;span class=&quot;s2&quot;&gt;&quot;shell&quot;&lt;/span&gt;, path: &lt;span class=&quot;s2&quot;&gt;&quot;config.sh&quot;&lt;/span&gt;
  end

  &lt;span class=&quot;c&quot;&gt;#=============#&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# Added Nodes #&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#=============#&lt;/span&gt;

   &lt;span class=&quot;c&quot;&gt;#for 문을 돌리는데 여기서 i는 1부터 3까지 대입되며 반복된다.&lt;/span&gt;
   &lt;span class=&quot;c&quot;&gt;#즉 3번 구문을 반복하여 Worker Node를 3개를 만드는 것이다.&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1..3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.each &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; |i|

    &lt;span class=&quot;c&quot;&gt;# #{i} 구문으로 i의 값을 가져온다 그래서 w1-k8s, w2-k8s, w3-k8s로 가상머신을 정의한다.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#버추얼박스에서 보이는 가상 머신을 정의하는 것이다.&lt;/span&gt;
    config.vm.define &lt;span class=&quot;s2&quot;&gt;&quot;w#{i}-k8s&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; |cfg|

    &lt;span class=&quot;c&quot;&gt;#config.vm.box: 어떤 box에 대해 machine이 표시되는지 구성한다. 여기에 값은&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#HashiCorp's Vagrant Clout에 설치된 박스나 약칭으로된 이름이 들어가야 한다.&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#즉 사람들이 만들어 놓은 운영체제 이미지의 이름이 들어간다.&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#42pg를 보면 필자가 만들어 놓은 운영체제 이미지를 사용한다.&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#필자가 만든 운영체제 이미지의 이름이 &quot;sysnet4admin/CentOS-k8s&quot;이다.&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#https://app.vagranup.com/sysnet4admin/boxes/CentOS-k8s에서 확인할 수 있다.&lt;/span&gt;
      cfg.vm.box &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sysnet4admin/CentOS-k8s&quot;&lt;/span&gt;

      &lt;span class=&quot;c&quot;&gt;#베이그런트의 프로바이더(provider)가 버추얼박스라는 것을 정의한다. 프로바이더는&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;#베이그런트를 통해 제공되는 코드가 실제로 가상 머신으로 배포되게 하는 소프트웨어이다.&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;#버추얼박스가 여기에 해당한다. 다음으로 버추얼박스에 필요한 설정을 정의하는데&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;#그 시작을 do |vb|로 선언한다. provider가 존재하지 않을 경우 Vagrant는 이 설정 블록을&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;#무시한다.&lt;/span&gt;
      cfg.vm.provider &lt;span class=&quot;s2&quot;&gt;&quot;virtualbox&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; |vb|
      &lt;span class=&quot;c&quot;&gt;#생략&lt;/span&gt;
        vb.name &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;w#{i}-k8s(github_SysNet4Admin)&quot;&lt;/span&gt;
        vb.cpus &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
        vb.memory &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1024
        vb.customize &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;modifyvm&quot;&lt;/span&gt;, :id, &lt;span class=&quot;s2&quot;&gt;&quot;--groups&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;/k8s-SM(github_SysNet4Admin)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
      end

       &lt;span class=&quot;c&quot;&gt;#여기서는 가상 머신 자체에 대한 설정이다.&lt;/span&gt;
       &lt;span class=&quot;c&quot;&gt;#do |cfg|에 속한 작업이다. 즉 호스트의 이름(w#{i}-k8s)을 설정한다.&lt;/span&gt;
      cfg.vm.host_name &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;w#{i}-k8s&quot;&lt;/span&gt;

      &lt;span class=&quot;c&quot;&gt;#생략&lt;/span&gt;
      cfg.vm.network &lt;span class=&quot;s2&quot;&gt;&quot;private_network&quot;&lt;/span&gt;, ip: &lt;span class=&quot;s2&quot;&gt;&quot;192.168.1.10#{i}&quot;&lt;/span&gt;
      cfg.vm.network &lt;span class=&quot;s2&quot;&gt;&quot;forwarded_port&quot;&lt;/span&gt;, guest: 22, host: &lt;span class=&quot;s2&quot;&gt;&quot;6010#{i}&quot;&lt;/span&gt;,auto_correct: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;ssh&quot;&lt;/span&gt;
      cfg.vm.synced_folder &lt;span class=&quot;s2&quot;&gt;&quot;../data&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;/vagrant&quot;&lt;/span&gt;, disabled: &lt;span class=&quot;nb&quot;&gt;true
      &lt;/span&gt;cfg.vm.provision &lt;span class=&quot;s2&quot;&gt;&quot;shell&quot;&lt;/span&gt;, path: &lt;span class=&quot;s2&quot;&gt;&quot;install_pkg.sh&quot;&lt;/span&gt;
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;install_pkg.sh&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# install packages&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#EPEL(Extra Packages for Enterprise Linux) 저장소 설치&lt;/span&gt;
yum &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;epel-release &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#코드 하이라이트를 위한 Vim의 추가 기능을 설치&lt;/span&gt;
yum &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;vim-enhanced &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;EPEL은 리눅스의 추가 패키지이다. 리눅스에서 yum으로 패키지들을 설치하는데 패키지들이 그리 많지가 않다. 그래서 설치가 안 되는 패키지들을 설치하게 도와주는 것이 EPEL이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;repolist&lt;/code&gt; 명령어를 사용해서 epel 설치전과 후의 패키지 수 차이를 확인해볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;pin_2_nds.sh&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# ping 3 times per nodes&lt;/span&gt;
ping 192.168.1.101 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 3
ping 192.168.1.102 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 3
ping 192.168.1.103 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;config.sh&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# modify permission&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# -rwxr--r--는 744,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 소유자 권한: 읽기, 쓰기, 실행 부여&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 소유그룹권한: 읽기 부여&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 나머지권한: 읽기 부여&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;744 ./ping_2_nds.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
				<pubDate>Mon, 19 Jul 2021 10:00:00 +0900</pubDate>
				<link>/kubernetes/2021/07/19/Kubernetes-2.2.3.html</link>
				<guid isPermaLink="true">/kubernetes/2021/07/19/Kubernetes-2.2.3.html</guid>
			</item>
		
			<item>
				<title>컨테이너 인프라 환경 구축을 위한 쿠버네티스/도커-2.2.1</title>
				<description>&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;해당 내용은 책 &amp;lt;컨테이너 인프라 환경 구축을 위한 쿠버네티스/도커&amp;gt;에 나오는 내용이며 이는 개인적으로 공부하기 위해서 게시하는 글임을 알립니다.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;가상-머신에-필요한-설정-자동으로-구성하기&quot;&gt;&lt;center&gt;가상 머신에 필요한 설정 자동으로 구성하기&lt;/center&gt;&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Vagranfile 48pg&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;알아야 할 내용&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Vagrant Box: 설정에서 가장 기본적인 단위이다. 독립적인 운영체제 환경의 이미지다.&lt;/li&gt;
      &lt;li&gt;Ruby 문법 &lt;strong&gt;do&lt;/strong&gt;: Paired with end, 코드 블럭을 구분할 수 있다.&lt;/li&gt;
      &lt;li&gt;VirtualBox에서 호스트는 개인 PC Window, 게스트 os는 CentOS 리눅스이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;일단 원래 코드를 깔끔하게 보고 설명은 다시 이 코드 아래에 주석으로 적겠다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# -*- mode: ruby -*-&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# vi: set ft=ruby :&lt;/span&gt;
Vagrant.configure&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; |config|
  config.vm.define &lt;span class=&quot;s2&quot;&gt;&quot;m-k8s&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; |cfg|
    cfg.vm.box &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sysnet4admin/CentOS-k8s&quot;&lt;/span&gt;
    cfg.vm.provider &lt;span class=&quot;s2&quot;&gt;&quot;virtualbox&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; |vb|
      vb.name &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;m-k8s(github_SysNet4Admin)&quot;&lt;/span&gt;
      vb.cpus &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2
      vb.memory &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2048
      vb.customize &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;modifyvm&quot;&lt;/span&gt;, :id, &lt;span class=&quot;s2&quot;&gt;&quot;--groups&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;/k8s-SM(github_SysNet4Admin)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    end
    cfg.vm.host_name &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;m-k8s&quot;&lt;/span&gt;
    cfg.vm.network &lt;span class=&quot;s2&quot;&gt;&quot;private_network&quot;&lt;/span&gt;, ip: &lt;span class=&quot;s2&quot;&gt;&quot;192.168.1.10&quot;&lt;/span&gt;
    cfg.vm.network &lt;span class=&quot;s2&quot;&gt;&quot;forwarded_port&quot;&lt;/span&gt;, guest: 22, host: 60010, auto_correct: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;ssh&quot;&lt;/span&gt;
    cfg.vm.synced_folder &lt;span class=&quot;s2&quot;&gt;&quot;../data&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;/vagrant&quot;&lt;/span&gt;, disabled: &lt;span class=&quot;nb&quot;&gt;true
  &lt;/span&gt;end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#아래 두줄의 주석은 에디터에 현재 파일이 루비임을 인식하게 하는 호환 코드이다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ft는 file type(파일종류)의 약자이다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# -*- mode: ruby -*-&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# vi: set ft=ruby :&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#&quot;2&quot;는 configuration object |config|의 버전을 명시하는 것이다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#이것은 configuration 블록으로 사용된다.&lt;/span&gt;
Vagrant.configure&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; |config|

&lt;span class=&quot;c&quot;&gt;#https://www.vagrantup.com/docs/vagrantfile/machine_settings 참고&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#config.vm.define: 버추얼박스에서 보이는 가상 머신을 &quot;m-k8s&quot;로 정의한다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#do |cfg|를 추가해 원하는 설정으로 변경한다.&lt;/span&gt;
  config.vm.define &lt;span class=&quot;s2&quot;&gt;&quot;m-k8s&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; |cfg|

  &lt;span class=&quot;c&quot;&gt;#config.vm.box: 어떤 box에 대해 machine이 표시되는지 구성한다. 여기에 값은&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#HashiCorp's Vagrant Clout에 설치된 박스나 약칭으로된 이름이 들어가야 한다.&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#즉 사람들이 만들어 놓은 운영체제 이미지의 이름이 들어간다.&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#42pg를 보면 필자가 만들어 놓은 운영체제 이미지를 사용한다.&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#필자가 만든 운영체제 이미지의 이름이 &quot;sysnet4admin/CentOS-k8s&quot;이다.&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#https://app.vagranup.com/sysnet4admin/boxes/CentOS-k8s에서 확인할 수 있다.&lt;/span&gt;
    cfg.vm.box &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sysnet4admin/CentOS-k8s&quot;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;#베이그런트의 프로바이더(provider)가 버추얼박스라는 것을 정의한다. 프로바이더는&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#베이그런트를 통해 제공되는 코드가 실제로 가상 머신으로 배포되게 하는 소프트웨어이다.&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#버추얼박스가 여기에 해당한다. 다음으로 버추얼박스에 필요한 설정을 정의하는데&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#그 시작을 do |vb|로 선언한다. provider가 존재하지 않을 경우 Vagrant는 이 설정 블록을&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#무시한다.&lt;/span&gt;
    cfg.vm.provider &lt;span class=&quot;s2&quot;&gt;&quot;virtualbox&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; |vb|

    &lt;span class=&quot;c&quot;&gt;#VirtualBox provider는 더 VirtualBox 기반 Vagrant 환경을 보다 세밀하게 제어할 수 있는&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#몇 가지 추가 구성 옵션을 제공한다.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#https://www.vagrantup.com/docs/providers/virtualbox/configuration 참고&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;#버추얼박스에 생성한 가상 머신의 이름, CPU 수, 메모리 크기, 소속된 그룹을 명시한다.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#그리고 마지막으로 end를 적어 버추얼박스 설정이 끝났음을 알린다.&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;#VirtualBox GUI에 표시될 이름을 설정한다&lt;/span&gt;
      vb.name &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;m-k8s(github_SysNet4Admin)&quot;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#사용할 CPU 수 설정&lt;/span&gt;
      vb.cpus &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2
    &lt;span class=&quot;c&quot;&gt;#사용할 메모리 크기 설정&lt;/span&gt;
      vb.memory &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2048

    &lt;span class=&quot;c&quot;&gt;# :id는 생성되는 가상 머신의 ID를 반환하는 특별한 매개변수이다.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#그래서 VBoxManage 커맨드가 ID를 요구할 때 이 특별한 매개변수를 사용한다.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#--groups를 이용해서 명시된 그룹으로 분리하는 것이다.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# 여러개의 vms가 있으면 헷갈릴 수 있으므로 분류한다.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#modifyvm은 ID에 해당하는 vm의 설정을 한다.&lt;/span&gt;
      vb.customize &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;modifyvm&quot;&lt;/span&gt;, :id, &lt;span class=&quot;s2&quot;&gt;&quot;--groups&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;/k8s-SM(github_SysNet4Admin)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    end

    &lt;span class=&quot;c&quot;&gt;#여기서는 가상 머신 자체에 대한 설정이다.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#do |cfg|에 속한 작업이다. 즉 호스트의 이름(m-k8s)을 설정한다.&lt;/span&gt;
    cfg.vm.host_name &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;m-k8s&quot;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;#호스트 전용 네트워크를 private_network로 설정해 eth1 인터페이스를&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#호스트 전용(Host-Only)으로 구성하고 IP는 192.168.1.10으로 지정한다. 고정 IP를 설정해주는 방법이다. 아래 document 참고&lt;/span&gt;
    cfg.vm.network &lt;span class=&quot;s2&quot;&gt;&quot;private_network&quot;&lt;/span&gt;, ip: &lt;span class=&quot;s2&quot;&gt;&quot;192.168.1.10&quot;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;#ssh 통신은 호스트 60010번을 게스트 22번으로 전달되도록 구성한다.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#이때 혹시 모를 포트 중복을 대비해 auto_correct: true로 설정해서&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#포트가 중복되면 포트가 자동으로 변경되도록 한다.&lt;/span&gt;
    cfg.vm.network &lt;span class=&quot;s2&quot;&gt;&quot;forwarded_port&quot;&lt;/span&gt;, guest: 22, host: 60010, auto_correct: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;ssh&quot;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;#호스트(PC 또는 노트북)와 게스트(가상 머신) 사이에&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#디렉터리 동기화가 이뤄지지 않게 설정(disabled: true)한다.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#첫 번째 파라미터는 host의 경로이다 두 번째 파라미터는 guest(vm)의 경로이다.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#가상머신에 들어가보면 /vagrant 경로에 Vagrantfile이 있다&lt;/span&gt;
    cfg.vm.synced_folder &lt;span class=&quot;s2&quot;&gt;&quot;../data&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;/vagrant&quot;&lt;/span&gt;, disabled: &lt;span class=&quot;nb&quot;&gt;true
  &lt;/span&gt;end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;cfg.vm.network “private_network”, ip: “192.168.1.10”&lt;/strong&gt;에 대해서 좀 더 알아보자.&lt;/p&gt;

&lt;p&gt;공식 document에 들어가면 그 내용이 있는데 발번역을 해보려 한다. 링크는 아래에 남긴다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.vagrantup.com/docs/networking/private_network&quot;&gt;Vagrant&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/Kubernetes/post1/2021-07-19-09-05-59.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;네트워크 식별자: private_network&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Vagrant private network(사설 네트워크)는 글로벌 인터넷에서 공개적으로 접근 불가한 IP으로 게스트 머신(가상 머신)에 접근하는 것을 가능하게 한다. 일반적으로 이것은 당신의 머신이 &lt;strong&gt;사설 주소 공간&lt;/strong&gt;으로부터 주소를 얻는 다는 것을 의미한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;동일한 사설 네트워크 안에 여러 대의 머신은 동일한 공급자가 지원한다는 제한이 있지만 사설 네트워크 안에서 통신이 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Kubernetes/post1/2021-07-19-09-13-30.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DHCP&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;사설 네트워크를 사용하기 위한 가장 쉬운 방법은 DHCP를 통해서 IP를 할당 받는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 하면 예약된 주소 공간에서 IP 주소가 자동으로 할당됩니다. IP 주소는 SSH에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vagrant ssh&lt;/code&gt; 명령을 입력하고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ifconfig&lt;/code&gt;와 같은 적절한 명령줄 도구를 사용해서 IP를 찾을 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Kubernetes/post1/2021-07-19-09-17-55.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;고정 IP&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그리고 당신은 머신에게 고정 IP 주소를 기입할 수 있습니다. 이를 통해 알려진 고정 IP를 사용하여 Vagrant 관리 시스템에 액세스할 수 있습니다. Vagrantfile에서 고정 IP 주소를 설정하는 방법은 아래와 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Kubernetes/post1/2021-07-19-09-22-14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;동일한 네트워크에 다른 머신의 IP와 충돌하지 않도록 IP를 할당하는 것은 사용자에게 달렸습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;원하는 IP를 선택할 수 있지만 &lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Private_network#Private_IPv4_address_spaces&quot;&gt;reserved private address space&lt;/a&gt;&lt;/strong&gt; 에 나와있는 IP 주소를 사용하는 게 좋습니다. 이 IP들은 절대로 공개적으로 라우팅 되지 않는 것을 보장하며 대부분의 라우터들이 실제로 외부 트래픽이 이 IP로 들어가는 것을 막는다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;일부 운영 체제의 경우 기본 게이트웨이 또는 MTU 설정과 같은 고정 IP 주소에 대한 추가 구성 옵션을 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;경고!&lt;/strong&gt; 시스템의 다른 IP 공간과 겹치는 IP를 선택하지 마십시오. 이로 인해 네트워크에 연결할 수 없습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://developerin.tistory.com/18&quot;&gt;호스트 네트워크 및 NAT에 대한 블로그 1&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://liveyourit.tistory.com/26&quot;&gt;호스트 네트워크 및 NAT에 대한 블로그 2&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
				<pubDate>Sun, 18 Jul 2021 10:00:00 +0900</pubDate>
				<link>/kubernetes/2021/07/18/Kubernetes-2.2.1.html</link>
				<guid isPermaLink="true">/kubernetes/2021/07/18/Kubernetes-2.2.1.html</guid>
			</item>
		
			<item>
				<title>npm install Err 문제 해결</title>
				<description>&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;npm-install&quot;&gt;&lt;center&gt;npm install&lt;/center&gt;&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;정말 오늘 하루종일 이거 고치느라 아무것도 못했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;오늘 하루는 정말 아무것도 하기 싫ㄷ..&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;유투브에 있는 Vue Project를 따라서 해보려는 중 기본적인 틀은 유투버의 git에서 가져와서 npm를 install하는 과정에서 중간에 계속 에러가 났다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;에러 내용을 스크린샷을 찍어놨어야 되는데… 못찍었다. 무슨 gyp 관련해서 에러가 엄청 떴었다. 그런데 구글링을하고 스택오버플로우에서 검색을 해보고 거기서 제시하는 해결책을 시도해도 안되는 것이었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;한 12시간 이상은 뻘짓한 거 같아서 과정은 다 못올릴 거 같고 결론만 말하자면&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\Users\nick1\AppData\Roaming\npm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 npm폴더 안에 있던 모든 파일들을 다 지우고 &lt;strong&gt;npm install&lt;/strong&gt;를 했더니 작동했다.&lt;/p&gt;

&lt;p&gt;정말 오늘 하루는 지친다 ㅠㅠ 그래도 해결했으니 안심해본다.&lt;/p&gt;
</description>
				<pubDate>Fri, 16 Jul 2021 12:00:00 +0900</pubDate>
				<link>/vue/2021/07/16/Vue-post1.html</link>
				<guid isPermaLink="true">/vue/2021/07/16/Vue-post1.html</guid>
			</item>
		
			<item>
				<title>Springboot Intellij에서 Livereload 사용하기</title>
				<description>&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;live-reload-사용하는-방법&quot;&gt;&lt;center&gt;Live Reload 사용하는 방법&lt;/center&gt;&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 기능을 좀 더 빨리 알았더라면 시간을 많이 벌었을 것이다.&lt;/p&gt;

&lt;p&gt;졸업작품을 스프링부트로 하고 있는데 프론트엔드를 설계하고 만드는 과정에서 매번 앱을 껐다 켰다를 반복했기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;앱을 껐다가 키는데 걸리는 시간이 좀 걸리므로 그 방법은 추천하지 않는다…&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그래서 Live Reload라는 기능을 알게 되었는데 이것은 스프링 부트 앱이 실행된 상태에서 정적 리소스에 변경이 발생한 경우 앱을 껐다가 다시 키지 않고서도 바로 업데이트를 확인할 수 있는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;사실 구글에다가 검색하면 관련 글이 많이 나오지만 아주 중요한 것을 알려주지 않아서 이렇게 글을 쓰게 됐다.&lt;/p&gt;

&lt;p&gt;일단 거의 공통적으로 알려주는 것을 설정해보자.&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;1. build.gradle 설정&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-dependencies&quot;&gt;dependencies {
    compile(&quot;org.springframework.boot:spring-boot-devtools&quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;2. aplication.properties 설정&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-application.properties&quot;&gt;spring.devtools.livereload.enabled=true
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;3. Settings-&amp;gt;Build-&amp;gt;Compiler&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Build project automatically에 Check한다&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/SpringBoot/post16/2021-07-07-16-27-04.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;4. Settings-&amp;gt;Build,Execution,Deployment-&amp;gt;Build Tools-&amp;gt;Gradle&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Build and run using을 Gradle에서 Intellij IDEA로 변경&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/SpringBoot/post16/2021-07-07-16-28-29.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;5. 크롬 사용시 크롬 확장프로그램 ‘LiveReload’ 다운로드 받기&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/SpringBoot/post16/2021-07-07-16-31-48.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;6. ctrl+shift+a를 눌러서 검색 창에 Registry 입력하고 들어간다&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/SpringBoot/post16/2021-07-07-17-05-19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;compiler.automake.allow.when.app.running에 체크한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/SpringBoot/post16/2021-07-07-17-06-23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 모든 설정이 끝났다. 이제부터 앱을 실행하고 정적 리소스를 변경하고나서 크롬에서 &lt;strong&gt;F5(새로고침)&lt;/strong&gt;를 하면 업데이트가 될 것이다.&lt;/p&gt;
</description>
				<pubDate>Wed, 07 Jul 2021 12:00:00 +0900</pubDate>
				<link>/springboot/2021/07/07/springboot-post16.html</link>
				<guid isPermaLink="true">/springboot/2021/07/07/springboot-post16.html</guid>
			</item>
		
			<item>
				<title>나의 첫 오마카세 후기</title>
				<description>&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;3년만에-온-압구정-로데오&quot;&gt;&lt;center&gt;3년만에 온 압구정 로데오&lt;/center&gt;&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;오늘은 학교 연구실에서 나온 돈으로 연구실 사람들과 오마카세를 먹으러 가기로 한 날이었다. :smiley:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;오마카세는 말로만 들어봤었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-11-04-34.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;오마카세(お任せ)&lt;/strong&gt;란 &lt;strong&gt;‘맡긴다’&lt;/strong&gt;라는 의미인데 셰프에게 일임한다는 뜻을 내포하고 있다고 한다. 말 그대로 셰프에게 모든 것을 맡기는 것이다. 그날 가장 좋은 재료로 &lt;strong&gt;최상의 맛과 서비스&lt;/strong&gt;를 보장하는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;사실 오마카세는 TV나 유투브에서 가끔 보긴 했는데 &lt;strong&gt;대식가&lt;/strong&gt;인 내 입장에서는 한 접시마다 초밥 한 피스 씩, 그리고 간에 기별도 안 가는 적은 양을 조금조금 내주는 식의 음식은 나에게 만족감을 주지 않았다. 그게 설령 맛있다고 해도 나는 질보단 양을 택했던 것 같다. :stuck_out_tongue:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;del&gt;그래서 살의 양도 많아졌나 보ㄷ….&lt;/del&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;아마 친구가 오마카세를 먹으러 가자고 했으면 바로&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“응, 잘가~”&lt;/strong&gt; 라고 대답했을 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;제대로 먹는 오마카세는 기본적으로 1인당 10만원이 넘는다. 그런 큰 돈을 밥 한 끼에 쓴다는 것은 특별한 날이거나 무슨 일 있을 때를 제외하고는 사치라고 생각하고 있었다. 먹는 것은 그리 크게 기억에 안 남기도 하고 그 돈으로 좀 더 유익한 것을 할 수 있다고 믿었다.:open_mouth:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;물론 지나놓고 생각 해보면 이러한 생각은 어리석었다.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;어쨌든 연구실 사람 중 서울을 잘 아시는 한 분이 갈만한 식당을 찾아보고 예약을 해놓으셨다. 장소는 &lt;strong&gt;압구정 로데오&lt;/strong&gt;였는데 이 곳은 거의 3년 만에 가보는 곳이었다. 예전에 친구랑 &lt;strong&gt;압구정 로데오&lt;/strong&gt;에 있는 유명한 수제 햄버거 집을 간 적이 있었다. &lt;strong&gt;DOWNTOWNER&lt;/strong&gt;라는 식당이었는데 맛있는 햄버거로 되게 인상 깊었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-11-06-08.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그날 &lt;strong&gt;압구정 로데오&lt;/strong&gt;역에서 기억에 남는 사건이 일어났다. 친구랑 같이 &lt;strong&gt;DOWNTOWNER&lt;/strong&gt;를 가던 중 우리는 바로 앞에 &lt;strong&gt;핸드폰&lt;/strong&gt;이 떨어져 있는 것을 발견했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;&lt;strong&gt;중ㄱ나ㄹ ㅋㅋ:smiling_imp:&lt;/strong&gt;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;우리는 뭐지 하고 그 핸드폰을 주워서 살펴봤다. 그 핸드폰 케이스는 &lt;strong&gt;일종의 카드 수납이 되는 케이스&lt;/strong&gt;인데 많은 신용카드와 신분증이 들어있었다. 좀만 있으면 주인한테 전화가 오겠지 하며 기다렸다.:innocent:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그러자 얼마 안 지나 바로 전화가 걸려왔다. 전화를 받자 다급한 아주머니의 목소리가 들려왔다. 아주머니가 병원을 가시다가 핸드폰을 떨구셨는데 지금 치료를 받고 결제를 하려고 핸드폰을 찾아보니 잃어버리셨다는 것이었다. 그래서 현재 &lt;strong&gt;병원 전화기&lt;/strong&gt;로 전화를 하고 있는데 지금 너무 급해서 그러는데 당장 그 병원으로 와달라는 것이었다. 그때가 &lt;strong&gt;DOWNTOWNER&lt;/strong&gt;에서 막 버거를 시키고 기다리고 있었는데 급한 아주머니의 목소리에 바로 안 가져다 줄 수가 없었다. 일단 친구보고는 먹고 있으라고 하고 나는 다급하게 식당을 나왔다. 아주머니가 병원 이름을 알려주셨는데 나는 &lt;strong&gt;압구정 로데오는 처음이라..&lt;/strong&gt; 지리를 잘 알지 못했다. 물론 네이버 지도를 켜서 보면 알겠지만&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;정말 엄청 급하게 핸드폰을 받길 원하시는지라….:sweat: 나는 곧바로 택시를 잡아서 그 병원으로 가달라고 했다. 택시 아저씨는 주소를 보고 처음에 이상해 하셨다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“학생 같은데 이 거리가 힘들다고 택시를 타? 허허”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“아.. 그 제가 이쪽에 처음 와봐서 아무것도 몰라서요..”:pensive:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그렇게 택시는 오른 쪽으로 틀더니 15?초 정도 직진하고서는 도착했다고 하셨다. :fearful:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;&lt;strong&gt;하.. 이렇게 가까운 줄 알았으면 걸어갈 ㄲ…ㅋㅋ…&lt;/strong&gt;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그렇게 택시에서 내리자마자 &lt;strong&gt;핸드폰을&lt;/strong&gt; 잃어버리신 분을 찾는데 오래 걸리지 않았다. 얼굴에 걱정이 태산이신 어떤 아주머니가 서서 &lt;strong&gt;안절부절&lt;/strong&gt;을 못하고 있었기 때문이다. 나는 곧바로 가서 물어봤다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“아주머님 혹시 이 핸드폰 잃어버리신 분 맞나요?”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;아주머님의 표정은 180도 변하셨다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“아이고, 학생 고마워 정말, 나 때문에 택시까지 타고 여기에 내 신분증하며 카드들이 다 들어있어서(핸드폰 케이스 안에) 병원 결제도 못하고 있었어 고마워!!!”&lt;/strong&gt;:smile:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;하시며 나를 꼭 껴안아 주시고 &lt;strong&gt;심사임당&lt;/strong&gt; 2장을 손에 쥐어 주셨다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;&lt;strong&gt;뭐지.. 이 압구정 클라스느ㄴ..?&lt;/strong&gt;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-11-24-16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“아니 뭘 이런 걸 주세요…. 괜찮습니다. 저 이만 갈게요!”&lt;/strong&gt;하며 손을 뿌리쳤다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;&lt;strong&gt;헤헤 원래 엄마가 누군가 돈 줄 때 세 번은 거절하랬ㅇ…&lt;/strong&gt;:smiling_imp:&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“아니야 학생! 내가 아들같아서 그래 받아!!”&lt;/strong&gt;라고 하시며 돈을 손에 쥐어주시고는 빨리 병원으로 다시 들어가버리셨다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;&lt;strong&gt;응? 아직 두 번 더 거절해야 하는데…ㄱㅇㄷ?….&lt;/strong&gt;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;나는 그렇게 걸어서 &lt;strong&gt;DOWNTOWNER&lt;/strong&gt;에 돌아가 수제 햄버거를 맛있게 먹었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;&lt;strong&gt;물론 돌아오는 길에 길바닥에 떨어진 핸드폰이 있나 유심히 살펴보며 왔ㄷ..&lt;/strong&gt;:stuck_out_tongue_closed_eyes:&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;_그나저나 그때 같이 **DOWNTOWNER&lt;/strong&gt;에 갔던 친구만 만나면 사람들이 잃어버린 물건을 자꾸 줍네_**&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;저번에 이 친구랑 만났을 때는 &lt;strong&gt;프라다 지갑&lt;/strong&gt;를 주웠었는데 그 에피소드는 다음에 기회가 있으면 해 보겠다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;del&gt;복이 있는 친구야~ 좀 많이 붙어 다녀야 겟ㅇ? ㅎㅎ~ :smiling_imp:&lt;/del&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이야기가 너무 한쪽으로 빠졌다. 어쨌든 이 &lt;strong&gt;압구정 로데오&lt;/strong&gt;는 그런 기억이 있는 곳이었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;우리가 오늘 가는 식당의 이름은 &lt;strong&gt;스시스미레&lt;/strong&gt;라는 곳이었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;가는 길에 내가 핸드폰을 찾아주러 갔던 병원이 보여서 반가웠다&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그렇게 도착한 건물 입구&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-11-59-36.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;고급스럽게는 안 보이는데 일단 들어가봐야 알 것 같았다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;건물 안에 있는 엘리베이터를 타고 우리는 식당이 있는 4층으로 올라갔다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-12-00-45.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-12-01-08.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-12-01-38.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-12-09-25.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;겉과는 다르게 안에는 고급스러움이 물씬 풍겨지기 시작했다. :heart_eyes:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-12-09-48.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;우리가 10분 정도 빨리 온 지라 직원이 대기실로 안내해주셨다. 우리는 이야기를 나누며 기다렸다. 그렇게 웨이팅이 끝나고 자리에 들어섰다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-12-04-56.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;모든 것이 깔끔했다. 일단 저 칼이 되게 인상 깊었는데 저칼에 닿는 것은 종이 썰리듯이 잘려나갔기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;유투브에서 칼에 대출까지 받는 일본 유명한 셰프에 관한 이야기도 본 것 같았는데… 저 칼은 얼마쯤 하려나?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;자리에 앉음과 동시에 내가 회나 초밥을 먹을 때 가장 좋아하는 것이 나왔다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-12-10-52.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;바로 &lt;strong&gt;생강 초절임&lt;/strong&gt;이다. 나는 보통 회나 초밥을 먹을 땐 이 &lt;strong&gt;생강&lt;/strong&gt;을 더 많이 먹는다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;정말 많이 먹는다…:yum:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;처음부터 좋아하진 않았다. 생강을 처음 접했던 것은 내가 어렸을 때 삼촌 차를 타고 할머니와 할아버지랑 멀리 유명한 일식집에 간 적이 있다. 나는 가는 도중에 &lt;strong&gt;차멀미&lt;/strong&gt;가 심해서 차안에서 &lt;strong&gt;토&lt;/strong&gt;를 쏟고 말았다. :fearful:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;일식 집에 도착한 나는 &lt;strong&gt;비위&lt;/strong&gt;가 다 상한 상태였다. 돌아갈 때도 차멀미로 인해 고생할까봐 두려워하던 중 &lt;strong&gt;한의사인&lt;/strong&gt; 삼촌이 생강이 &lt;strong&gt;차멀미&lt;/strong&gt;에 좋다며 생강을 많이 먹으라고 조언을 해주셨다. 그래서 나는 차멀미에 걸리지 않기 위해서 &lt;strong&gt;허겁저겁&lt;/strong&gt; 생강 초절임을 먹었다. 젓가락으로 한 뭉큼씩 집어서 입dp 넣어서 먹었고 다시 리필을 시키고서는 또 한 뭉큼을 집어서 입어 넣었다. 그것을 여러 번 반복하고 나는 차를 타고 &lt;strong&gt;집으로 돌아갈 자신감&lt;/strong&gt;을 얻었다.:smiley:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그렇게 &lt;strong&gt;생강&lt;/strong&gt;으로 배를 불리고 집으로 차를 타고 집으로 가던 중 나는…..&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;lt;h2&amp;gt;또 토했다….:weary:&amp;lt;/h2&amp;gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이유는 &lt;strong&gt;멀미&lt;/strong&gt;가 아니라 &lt;strong&gt;그냥, 생강을 많이 먹고 배탈나서……&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;&lt;strong&gt;삼촌 미웡 ㅠㅠ:cry:&lt;/strong&gt;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;어쨌든.. 그래서 좋아하게 된 것은 아니고 ㅎㅎ 사실 식객이라는 만화가 있는데 이 만화는 요리를 잘하고 좋아하며 포터 트럭에 식재료를 싣고 다니며 식재료를 파는 주인공에 관한 만화이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-12-40-25.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;여기서 회에 대한 내용을 담은 편이 있는데 거기서 보면 일식집에서 생강 초절임이 나오는 이유에 대해서 설명한 편이 있었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-12-48-35.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;내가 당시에 식객이라는 만화에 엄청 빠져있었을 때였다. 지금은 집에 24권까지 소장하고 있는데 그때는 내가 그 만화책들을 보며 워낙 맛을 느끼고 음미하던 시기였다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;&lt;strong&gt;중2병이 도졌던 것 같ㄷ…&lt;/strong&gt;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그때 저 만화의 일부분을 읽게 되고 그 다음부터는 일식집에 갈 때 꼭 회 한점이나 초밥을 먹기 전에 생강으로 입 안을 닦아 내는 버릇이 생겼다. :stuck_out_tongue:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;&lt;strong&gt;뭐야 결론은 식객 때문이라는 거ㅇ?..&lt;/strong&gt;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;어렸을 때부터 그러다보니 생강에 맛을 들리게 되고 오히려 초밥이나 회보다 생강을 더 먹는 상황이 발생했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;&lt;strong&gt;아니 근데 우리 오마카세 이야기 하고 있었는데… 첫 생강 경험기가 왜 나오ㄴ ㅑ..:unamused:&lt;/strong&gt;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;결론은 여기 &lt;strong&gt;생강은 예술&lt;/strong&gt;….&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-12-55-34.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;지금까지 한번도 먹어보지 못한 질감과 맛의 생강이었다. 보통 일식집 생강 초절임을 보면 생강이 펴져서 썰려있는데 여기는 약간 생강이 썰린 상태에서 좀 안쪽으로 말려 있었는데 좀 인상적이었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;&lt;strong&gt;아니 그래서 생강 먹으러 갔어? 초밥 이야기 언제 해 ㅡㅡ:rage:&lt;/strong&gt;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;&lt;strong&gt;오늘 우리에게 즐거움을 선사하실 셰프님&lt;/strong&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-12-58-57.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;역시나 처음은 회부터 내어주기 시작하셨다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-13-00-16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;회부터 내어주는 걸 어떻게 아냐구?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-13-01-43.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;&lt;strong&gt;난 식객을 읽은 사람이기 때문ㅇ…&lt;/strong&gt;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-13-02-26.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그렇게 먼저 회 3점이 나왔다. 주시면서 무슨무슨 고기의 회인지 셰프님께서 알려주시는데 옆사람이랑 이야기 나누느라 잘 못들었다… &lt;strong&gt;Maybe 광어?..:grimacing:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-13-03-25.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;회 한 점을 펴고 안에 와사비를 조금 넣은 다음 간장을 조금 찍어먹어 본 맛은…&lt;/p&gt;

&lt;p&gt;3일전에 &lt;strong&gt;도시어부(술집)&lt;/strong&gt;에서 술과 함께 먹던 회랑은 비교가 안 됐다…&lt;/p&gt;

&lt;p&gt;그 쫄깃한 식감이 아직도 기억에 남는다.&lt;/p&gt;

&lt;p&gt;그 다음으로 준비해 주신 접시는 &lt;strong&gt;아귀간(안키모)&lt;/strong&gt;이었다. 참고로 아귀간은 미식가들 사이에서 바다의 푸아그라로 불리운다. 세계의 3대 진미에 속하는 푸아그라를 빗대어 표현한 것인데 푸아그라는 거위, 오리의 간을 의미한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-13-07-50.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;젓가락으로 아무 생각없이 집으려고 하면 쉽게 부서져서 힘을 조금만 넣고 조심히 잘라서 먹어야 했다.&lt;/p&gt;

&lt;p&gt;일단 엄청 부드러웠다. 왜 바다의 &lt;strong&gt;푸아그라&lt;/strong&gt;라고 불리는지 깨닿게 해주는 맛이었다. 아귀간의 고소함, 셰프가 곁들인 오렌지 향과 맛이 느껴지는 소스는 감탄을 자아냈다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;셰프님께서는 먹는 동안에 바로 다음 음식을 준비하기 시작하셨다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-13-13-02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-13-13-20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“참돔입니다.~&lt;/strong&gt;라는 부드러운 말투와 함께 빛깔나는 초밥이 접시에 올려졌다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-13-13-37.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-13-14-37.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;회 자체는 당장 살아서 움직여도 이상하지 않을만큼 싱싱했다. 그렇게 초밥 한 점을 입에 넣는 순간..&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;del&gt;물론 그 전에 생강으로 입 한 번 싹 씻어 주ㄱ..:smile:&lt;/del&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;참돔의 단백함, 간장의 단맛과 와사비의 매운맛이 잘 어울러져 화려한 맛이 났다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;&lt;strong&gt;한 점밖에 안 줘서 너무 속상ㅎ…..:cry:&lt;/strong&gt;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;다음 초밥은 무엇인지 상상하기 쉬웠다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-13-23-43.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-13-23-58.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-13-24-19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;내가 제일 좋아하는 새우 초밥이었다. 정확히 말하면 &lt;strong&gt;단새우 초밥&lt;/strong&gt;이었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;여기서 내가 급한 나머지 실수를 좀 했다…:pensive: 빨리 입안에 넣고 싶어서 젓가락으로 너무 쎄게 집은 탓에 초밥이 반으로 쪼개진 것이다…&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;&lt;strong&gt;하여간 성격 급한 건 알아줘야 ㅎ:confused:..&lt;/strong&gt;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;셰프님이 살살 집어야 된다고 말씀해주셨다.&lt;/p&gt;

&lt;p&gt;나는 어쩔 수 없이 다른 접시에 두동강 난 초밥을 반반씩 쪼개 먹었다… 그래도 맛은 일품이었는데 새우를 씹으면 그 새우 살이 터지는 식감과 입안에 퍼지는 새우향이 매우 좋았다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;다음 초밥은 살살 집자….&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그 다음 초밥은 &lt;strong&gt;전갱이&lt;/strong&gt; 초밥이었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-13-29-08.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 초밥은 무엇보다 색감이 예술이었다. 일단 눈으로 보는 맛이 있었는데 위에 뭐가 올라간 것인지 궁금했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-13-30-41.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;맛은 약간 비릿하면서 부드러워서 입 안에서 잘 흩어졌고 감칠 맛이 탁월한 초밥이었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;우리가 초밥을 음미하고 있는 동안 셰프님께서는 핏기를 싹 뺀 참치를 준비하고 계셨다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-13-33-13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“자연산 참치 xxx 입니다~.”&lt;/strong&gt;(부위가 어딘지 잘 듣지 못했다 ㅎㅎ)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-13-33-33.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;보는 순간 사랑에 빠져버렸다..&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;&lt;strong&gt;뭐지 이 RGB #FF0000 같은 색은…&lt;/strong&gt;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 &lt;strong&gt;붉은 보석&lt;/strong&gt;은 먹기에 너무 아까웠다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-13-36-24.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;&lt;strong&gt;이런 보석을 먹을 땐 더더욱 많은 생강으로 입안을 행거줘야ㅈ…:satisfied:&lt;/strong&gt;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;정말 신기한 건 회에서 소고기 육회 비슷한 맛이 난다는 것이다. 누군가를 데려다놓고 소고기 육회 초밥이라고 해도 속을만큼 겉의 이미지와 맛은 너무나도 비슷했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“크.. 행복하다… 이게 자본주의의 맛인가?..ㅋㅋㅋ”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;돈을 많이 벌어야 할 이유가 생기는 시점이었다..&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그렇게 이어진 참치쇼&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“자연산 참치 뱃살 주도로 입니다.”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-13-47-40.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-13-48-05.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 초밥이 아마 내가 오늘 먹었던 초밥 중에 가장 신박한 초밥이었을 것이다. 지금까지 초밥을 먹으면서 회 위에 소금을 뿌려주는 것은 처음 봤기 때문이다. 조금 짜지 않을까? 예상하고 입에 넣는 순간 생각은 180도 달라졌다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;짠맛은 커녕 오히려 소금이 달았다. 그리고 그 단맛과 회의 고소하고 단백한 맛이 어울러져 목으로 넘기기 아깝다는 생각까지 들게 만들었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;&lt;strong&gt;응, 1초만에 넘겨버렸ㅇ..&lt;/strong&gt;&lt;/del&gt;~&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그렇게 계속해서 다음 접시를 준비하기 위해서 칼질을 하는 셰프의 칼놀림은 우리의 시선을 앗아갔다. 그렇게해서 나온 다음 접시.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-13-58-22.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;황돔&lt;/strong&gt;이다. 섬세하게 낸 칼집은 이 셰프님이 얼마나 많은 훈련과 경험을 거쳤는지 새삼느끼게 해주셨다. 그 속으로 밴 간장은 회를 맛있게 양념시켜 주었다. 황돔은 수분이 많은 편이라서 육질은 약간 무르고 고소했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-14-05-05.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그리고 그 다음 접시는 제일 내가 뭔지 궁금했던 접시였다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-14-05-45.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;주황무스름한 건데 처음엔 뭔지 알 수 없었다&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;del&gt;주황무스름이라는 단어가 뭔ㄷ….:confused:&lt;/del&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/DailyLife/Omakase/2021-07-01-14-06-38.png&quot; alt=&quot;&quot; /&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“국내산 성게알입니다~”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-14-08-20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-14-08-33.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/DailyLife/Omakase/2021-07-01-14-08-47.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;약간?.. 뭔가 핸드폰 화면으로 사진 찍을 때 대충 보면 불고기처럼 생겨서 신기했다.:laughing:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But…&lt;/strong&gt; &lt;strong&gt;not my type…&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그냥 내 취향문제인데 조금 별로였다. 맛은 그다지 인상 깊진 않았고 그냥 김이 맛있었는데? ㅋㅋㅋㅋㅋ&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;또다시 분주하게 손이 움직이는 우리 셰프님…&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-14-11-48.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-14-12-05.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이번엔 무슨 초밥을 주실 지 기다리고 있는 와중에 미소국이 나왔다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-14-12-51.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;미소국을 많이 좋아해서 어떤 맛일지 기대하고 마셔봤지만 미소 향은 많이 나는데 예상과 다르게 맹탕?에 가까웠다. 내가 &lt;strong&gt;MSG&lt;/strong&gt;가 엄청 들어간 것에 맛들린 건가 아니면 이게 오리지널 미소국인가는 알 수 없었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;&lt;strong&gt;근데 이 왜 이게 중간에 나올ㄲ?…&lt;/strong&gt;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;&lt;strong&gt;첨에 주는 거 까먹은 건ㄱ?:stuck_out_tongue_closed_eyes: ㅋㅋ&lt;/strong&gt;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그리하여 나온 또 하나의 예술..&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-14-15-01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;청어&lt;/strong&gt; 초밥이다. 칼집을 엄청 깊게 낸 것도 인상적이었지만 저 위에 얻어진 2가지의 다진 채소???가 일정한 비율로 &lt;strong&gt;50%&lt;/strong&gt;씩 나란히 붙어있는 게 신기했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;유명한 일식 집 셰프는 초밥을 만들 때마다 뭉치는 밥알 수가 일정하다지 ㄷㄷㄷ&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;맛은 뭐… 논할 필요가 없었다. 청어는 옛날에는 잔가시가 많아서 많이 꺼렸다고 들었다. 먹기가 불편하고 목에 잘 걸려서 어린 아이들에게 먹이기에는 적절치 않다고 들었다. 하지만 이제는 이야기가 다르다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;없어서 못 먹는다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;탄력있는 살은 씹는 재미를 주었고 깊게 파여진 칼집은 혓바닥이 그 사이사이를 느껴지게 만들었다. 무슨 말이 더 필요할 지 모르겠다 그냥&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;lt;h2&amp;gt;맛있다..:blush:&amp;lt;/h2&amp;gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;바로 이어진 다음 접시는 플레이팅이 너무 이뻤다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-14-32-49.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;소스로는 아귀간을 간 것이고 그 위 생선은 아귀 구이었던 걸로 기억한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;아마 그날 제일 미스터리어스한 접시가 아니었을까 생각된다. 왜냐면 한 입 먹으면서 &lt;strong&gt;“음~ 무슨 맛이지?”&lt;/strong&gt; 하면서 먹었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-14-36-42.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;또다시 한 입 먹으면서 &lt;strong&gt;“음~ 이게 뭐지?(좋은 의미로)”&lt;/strong&gt; 생각하면서 계속 맛의 정체를 파악하다가…&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-14-37-35.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;어느 순간 다먹어 버렸다..&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;결국 무슨 맛이었나 나에게 묻는다면…?..&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2&gt;모르겠다...&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그냥 맛있는데 뭐라고 표현해야 할지 모르는 맛?…&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;del&gt;그냥 니 국어 어휘가 딸리는 ㄱ..:rage:&lt;/del&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;또 무언가 열심히 만드는 셰프님&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-14-42-18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;참깨를 일정량 뿌려주는 기계를 쓰시는 셰프님&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-14-44-10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;오호, 좀 신기했다. 저런 것도 있구나하며 ㅋㅋ. 우리 엄마가 아주 좋아할만한 물건인 것 같다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;셰프님 신세대시네&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-14-44-59.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;넌 나중에 엄마 선물로 찜해 둔다.ㅋㅋ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그렇게 나온 고등어 초밥이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-14-46-17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-14-46-30.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-14-46-42.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;나는 그날 베스트 접시를 뽑으라고 한다면 바로 이 고등어 초밥이라고 할 것이다. 고등어의 꽉찬 살과 약간의 비릿함 그리고 그것을 김으로 감싼 맛은 어떤 단백함과 고소한 맛과는 비교가 안 될 정도로 맛있었다. 잠시동안 황홀감에 빠졌던 것 같다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;이게 사는 맛이지~:yum:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이제 코스의 끝무렾에 다다르기 시작했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-14-51-28.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-14-51-41.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;정력의 끝판왕 장어 초밥.. 보기만해도 꿈틀꿈틀 거릴 것만 같았다. 위에 발라져 있는 소스가 진짜 맛있었는데 그 달콤한 소스가 장어와 잘 어울러져서 맛있었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;힘이 나는 구나 ㅠㅠ&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;del&gt;그럼 뭐해 너 정력 쓸데 없잖ㅇ..&lt;/del&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;어허! 여기까지..&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-14-55-24.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그다음에 보이는 이 엄청나게 각진 회덩어리는 시선을 사로잡았다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-14-57-00.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그리고 그 옆에 놓여져 있는 칼이 너무나도 멋있어 보였다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-14-57-47.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;del&gt;칼 한자루만 주세ㅇㅠㅠ&lt;/del&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 칼로 썰면 진짜 무엇이든 벨 수 있을것만 같았다. 그리고 다음 음식을 기다리고 있었다. 각진 회덩어리를 부드럽게 잘라서 초밥을 만드셨다. 뭐지뭐지하고 이젠 무슨 초밥이지 하고 기다리는 순간..&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;우리 것이 아니었다 ㅎㅎ…..:sweat:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;del&gt;옆 테이블에 더 비싼 코스 시킨 분거 인듯?…ㅎㅎ&lt;/del&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그리고 나온 면요리&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-15-04-37.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-15-04-08.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;국물이 엄청 맑았다. 일단 면은 내가 한번에 &lt;strong&gt;후로록&lt;/strong&gt;하는 바람에 제대로 느끼진 못했다.:smile: 하지만, 국물이 좀 신기했는데 레몬맛이 나는 국물이었다. 이상할 것 같지만 생각보다 되게 잘 어울리고 목에 넘기고 마지막에 나는 시큼한 맛과 레몬 향이 아직까지도 생각하면 입에 침을 고이게 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이제 마지막 요리를 소개할 시간이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-15-19-38.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-15-09-04.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;처음에 보면서 이런 생각을 했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;아니 뭔놈의 카스테라를 저리 정성스럽게 썰지?..&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그리고 일식집에 카스테라라.. &lt;strong&gt;퓨전인가?..ㅋㅋ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 생각했지만..&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;카스테라가 아니었다..&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;생긴 것은 카스테라처럼 생겼을 지 몰라도 명색이&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;계란말이&lt;/strong&gt;이다. ㄷㄷㄷ:scream:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;정말 카스테라처럼 생겼는데 어떻게 저게 계란말이지? 하고 신기해서 먹기 전에 계속 쳐다봤다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-15-12-18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-15-12-49.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;진짜 신박함, 신기함, 참신함, 맛, 색 백점을 줬다.&lt;/p&gt;

&lt;p&gt;진짜 놀랐던 것은 맛이 &lt;strong&gt;카스테라&lt;/strong&gt;맛이 난다는 것이다!.:smile:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;입 안에 넣으면 부드러운 카스테라 빵처럼 잘 녹고 수분기가 많아서 목 넘김이 매우 쉬웠다. 무엇보다 입 안에 부스러기 하나 안 남겨지고 깔끔하게 넘어간다는 것이다. 거기에다가 기분좋음 달콤함까지..&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;del&gt;자퇴하고 이거 만드는 법이나 배우러 일본 가야겠ㄷ..&lt;/del&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;식사의 끝으로 나오는 디저트는 아이스크림이었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-15-18-20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;레몬맛이 나는 아이스크림이었는데 약간의 시큼함과 단 맛에 금방 접시를 비워버렸다..&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;우리는 그렇게 행복하게 식사를 마쳤다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;기분좋게 나오려고 식당 문을 열고 나가려는 순간 우리를 맞이해주는…&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-15-24-21.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1&gt;비 :umbrella: &lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;어휴… ㅋㅋㅋㅋ 우산도 안 들고 왔는데..&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;우리는 비를 맞으며 바로 편의점으로 뛰어가 우산을 집어들어 샀다..&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그렇게 우산을 쓰고 가던 중 10분 뒤..&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;언제 비가 왔냐는 듯이 날씨는 다시 화창해졌다…&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;del&gt;우산 부러트려 버리고 싶ㄴ..:disappointed:&lt;/del&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그래도 맛난 것을 먹어서 기분 좋은 날에 화낼 순 없었다. 그리고 처음에 예상했던 것보다 다먹고 나서 매우 배불러서 놀랐다. 솔직히 가기 전에는 간에 기별도 안 갈거 같아서 미리 뭐 좀 먹고 가야하나 싶었는데 내가 어리석었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;살면서 이렇게 &lt;strong&gt;FLEX&lt;/strong&gt; 함 해보는 것도 나쁘지 않았다. 다음에 또 올 수 있는 기회가 있었으면 좋겠다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;그때는 더 비싼 코스에 사케까지 곁들여 먹을 것이다 ㅎㅎ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;압구정 로데오에서 바로 기숙사에 가긴 아쉬워서 우리는 압구정 로데오를 돌아다니며 쇼핑을 했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;쇼핑을 하던 중 신기한 신발도 목격했다.ㄷㄷ&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-17-11-22.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;del&gt;신발이 무슨 가위여?..&lt;/del&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;대체 이런 신발은 어떤 관종이 신을까?… 아마 신으려면 발가락 양말을 신어야 할 것이다.&lt;/p&gt;

&lt;p&gt;무시하면서 가격 태그를 보는 순간.. &lt;strong&gt;ㅎㅎ.. 사려야겠다..&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그 외에 많은 곳을 돌아다녔다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-17-13-41.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-17-14-04.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-17-14-18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그리고 옷을 구경하던 중 보이는 &lt;strong&gt;일베&lt;/strong&gt;들이 좋아할만한 브랜드..&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/Omakase/2021-07-01-17-15-02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;사실 뉴욕에 있는 유명 브랜드라고 한다 ㅎㅎ…. 한국에서 과연 사서 입는 사람이 있을까 싶다..&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그날 있었던 일이 엄청 많은데… 여기까지만 써야겠다.&lt;/p&gt;

&lt;p&gt;아침 9시부터 이 글을 쓰기 시작했는데 벌써 오후 5시가 넘어가고 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;&lt;strong&gt;시간 개빠르ㄴ..&lt;/strong&gt;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;공부해야 하는데 지친다 ㅠ..&lt;/strong&gt;&lt;/p&gt;
</description>
				<pubDate>Wed, 30 Jun 2021 10:00:00 +0900</pubDate>
				<link>/daily-life/2021/06/30/DailyLife-Omakase.html</link>
				<guid isPermaLink="true">/daily-life/2021/06/30/DailyLife-Omakase.html</guid>
			</item>
		
			<item>
				<title>시간은 돈이다?....</title>
				<description>&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;2주-동안-고민한-문제의-해결과-함께-밀려온-현타&quot;&gt;&lt;center&gt;2주 동안 고민한 문제의 해결과 함께 밀려온 현타...&lt;/center&gt;&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;참 많이 고민했다. 이 이야기를 과연 Daily Life 카테고리에 적어야 할지 아니면 그냥 프로그래밍 관련 카테고리에 적어야 할지..&lt;/p&gt;

&lt;p&gt;프로그래밍 관련 카테고리에 적으려면 공부가 되는 글들이 있어야 하는데 이건 도움이 된다기보다는 그냥 엿 같은 일이기 때문이다. ㅋㅋㅋ…..:disappointed:&lt;/p&gt;

&lt;p&gt;결국 그냥 Daily Life 카테고리에 적기로 했다.&lt;/p&gt;

&lt;p&gt;2주 전쯤 일이다.&lt;/p&gt;

&lt;p&gt;졸업작품이 순조롭게 진행되던 중 이제 어느 정도 웹이 완성돼서 AWS EC2에 올리고 테스트를 해보던 중 문제가 발생했다.&lt;/p&gt;

&lt;p&gt;이해를 못 하는 사람들을 위해 AWS가 무엇인지 그리고 EC2가 무엇인지 이해하기 쉽게 설명해 보겠다.&lt;/p&gt;

&lt;p&gt;AWS는 아마존 회사에서 제공하는 일종의 클라우드 컴퓨팅 자원을 제공하는 회사다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/AWS/2021-06-02-13-08-29.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;누군가에게 이런 이야기를 하면 이런 질문들을 많이 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;“아니 아마존은 물건이나 옷 그런 거 파는 곳이잖아!”&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;맞다. 아마존이 처음엔 그렇게 시작해서 이제는 사업을 확장해서 클라우드 자원을 제공하는 서비스까지로 나아간 것이다. &lt;strong&gt;클라우드 서비스&lt;/strong&gt;라는 게 뭘까?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;어려운 설명을 하기보다는 우리가 현재 자주 쓰고 있는 것으로 예를 들어보겠다. 그것은 바로&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/AWS/2021-06-02-13-12-48.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/AWS/2021-06-02-13-13-11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;N드라이브와 구글 드라이브&lt;/strong&gt;를 예로 들 수 있다.&lt;/p&gt;

&lt;p&gt;이 두 리소스는 우리에게 편리함을 제공하고 돈을 아낄 수 있게 해줬다. 우리는 용량이 많이 나가는 동영상이나 수많은 사진을 우리 핸드폰이나 컴퓨터에 저장할 필요가 없어졌다. 바로 이 두 개의 서비스 때문이다. 우리가 네이버나 구글 아이디가 하나 있다면 우리는 이 서비스를 무료로 이용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;우리가 여기에 어떤 것을 저장한다고 해서 우리 컴퓨터나 핸드폰에 용량이 줄어드는 것이 아니다. 이는 네이버나 구글에서 따로 장비들을 어느 지역에 큰 건물 안에 배치해놓고 그 장비들의 자원을 우리에게 제공해주는 것이다. 일반인들은 잘 모르겠지만 네이버는 사실 엄청 넓은 부지에 이런 데이터 센터를 갖추고 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;네이버 데이터 센터&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/AWS/2021-06-02-13-20-14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;데이터 센터 내부&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/AWS/2021-06-02-13-31-01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;del&gt;방 하나만 내주세ㅇ:frowning:…&lt;/del&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;정말 어마무시하지 않은가…??..&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;우리는 사실 이런 곳에서 저장소를 빌려 사용하는 것이다. 그래서 네이버는 개인당 &lt;strong&gt;30GB&lt;/strong&gt;를 무료로 저장할 수 있는 클라우드 저장소를 우리에게 제공하는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;del&gt;네이버 행님… 인사 한번 박습니ㄷ…&lt;/del&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;물론 그 용량을 초과할 경우 우리는 비용을 내야 한다. 당연한 말이다. 이런 시설을 구축하고 유지하는 데는 우리가 상상도 못 할 만큼의 돈이 들어간다. 거기에 보안까지 신경 쓰고 매일 24시간 가동되어야 하는 것을 생각해 봤을 때 얼마나 관리가 힘든지 대충 감이 올 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;del&gt;그래서 원래 전산직이나 서버 관리직은 인간이 아니라는 소문ㅇ…&lt;/del&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이야기가 너무 한쪽으로 빠졌다. 그래서 클라우드 자원이란 이런 것이다. 그중 &lt;strong&gt;AWS&lt;/strong&gt;는 전 세계적으로 분포한 데이터 센터에서 200개가 넘는 완벽한 기능의 서비스를 제공하는, 세계적으로 가장 포괄적이며, 널리 채택되고 있는 클라우드 플랫폼이다. 즉 &lt;strong&gt;AWS&lt;/strong&gt; 자체도 세계적으로 위에 나왔던 &lt;strong&gt;네이버 데이터 센터처럼&lt;/strong&gt; 구축을 해놓은 것이다. 우리나라에는 서울에 AWS가 하나 지어놨다고 들었던 것 같다. 어쨌든&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;우리 졸업작품으로 제출할 웹을 실제 인터넷으로 접속할 수 있는 사이트로 배포하기 위해서는 &lt;strong&gt;AWS에서 제공하는 EC2라는 것이 필요하다&lt;/strong&gt; 정도만 알고 있으면 될 것 같다. &lt;strong&gt;EC2&lt;/strong&gt;는 우리 웹이 인터넷상에서 사람들이 접속할 수 있게 해주는 자원이라고 생각하면 된다. 근데 이 &lt;strong&gt;EC2&lt;/strong&gt; 자식이 자꾸 &lt;strong&gt;한 시간&lt;/strong&gt;만 지나면 &lt;strong&gt;오류를 내뿜으면서 꺼지는 것이다…:weary:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EC2의 오류 화면이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/AWS/2021-06-02-13-37-35.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;솔직히 처음 이 오류를 봤을 때 별로 걱정을 안 했다. 무언가 설정을 잘못했나 보네 라고 생각하고 해결책을 찾기 위해서 &lt;strong&gt;구글링&lt;/strong&gt;을 했다. 다행히 나와 같은 오류로 고통받는 사람들이 많아서 여러 게시물을 찾아 들어가봤다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;정말 많은 게시물 글들을 읽었고 똑같은 게시물들을 수십번 본 것 같다…:confounded:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;del&gt;이제는 url만 읽어도 어떤 게시물인지 짐작이 ㄱ…&lt;/del&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;거기서 제시하는 해결책을 해봤지만, 도저히 해결되지 않았다. 더 중요한 문제는 어떤 설정을 수정하고 또 오류가 나는지 테스팅해보려면 &lt;strong&gt;1시간&lt;/strong&gt;을 기다려야 한다는 것이다…:fearful:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이게 진짜 욕 나올 일이다.&lt;/strong&gt; 해보고 싶은 설정 수정은 많은데 수정하고 시도해볼 때마다 1시간을 기다려야 하니.. 오래 걸릴 수밖에 없다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;del&gt;컴터 부수고 싶ㄷ…&lt;/del&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;일주일 동안 &lt;strong&gt;EC2&lt;/strong&gt;를 붙잡고 수정하고 테스트하고 수정하고 테스트하고를 반복했다… 도저히 해결될 기미가 보이지 않았다. 오류 내용이 나오긴 하는데 전혀 그것과 관련 없는 내용인 것 같았다. 내용은 아래와 같다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/AWS/2021-06-02-13-43-50.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;머리가 아팠다면 ㅈㅅ…&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;del&gt;나도 머리가 아파 죽겠ㄷ..&lt;/del&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;어쨌든.. 중요한 것은 도저히 내 힘으로 어떻게 해볼 수 없었다는 것이다. 그래서 마지막 방법은 이 &lt;strong&gt;EC2&lt;/strong&gt;를 제공하는 &lt;strong&gt;AWS&lt;/strong&gt; 사에 직접 질문하는 수밖에 없었다…&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;AWS은 따로 자유롭게 &lt;strong&gt;Q&amp;amp;A&lt;/strong&gt;를 받는 창이 없다. 하지만 &lt;strong&gt;Support(지원)&lt;/strong&gt;이라고 해서 실제 &lt;strong&gt;AWS&lt;/strong&gt;에 근무하고 있는 직원한테 직접 &lt;strong&gt;1:1&lt;/strong&gt;로 질문을 하고 그 직원이 답을 해주는 형식이다. 하지만 문제는 이게 &lt;strong&gt;유료&lt;/strong&gt;라는 것이다.. &lt;strong&gt;싸지도 않다..&lt;/strong&gt; 질문 한 번 할 때마다 우리나라 돈으로 한 &lt;strong&gt;7천원&lt;/strong&gt;정도 든다..&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;del&gt;돈 벌기 참 쉬워:worried:&lt;/del&gt;~&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;“그래 이렇게 시간 죽이고 해결도 못하는 것보다는 그냥 돈 내고 질문하고 해결하는 게 백번천번 낫지!!!!”&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;나는 바로 &lt;strong&gt;Support(지원)&lt;/strong&gt; 창에 들어갔다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/AWS/2021-06-02-13-53-43.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;아니 그런데 다른 건 다 한국어 지원하면서 여긴 무슨 죄다 &lt;strong&gt;영어&lt;/strong&gt;로 되어 있냐…&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;“아.. 질문도 설마 영어로 해야 되나?”&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그래도 내가 언어 따질 때가 아니었다. 일단 해결은 해야 하니까 부족한 영어 실력으로 끄적이기 시작했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/AWS/2021-06-02-13-55-59.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;으… 영어로 하니까 내가 하고 싶은 말이 제대로 전달됐는지 모르겠네..&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그렇게 난 답변을 기다렸다….&lt;/p&gt;

&lt;p&gt;오 그래도 돈 주고 질문하는 거라서 그런지 답변 달리는 시간이 매우 빨랐고 내용의 퀄리티는 정말 좋았다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;del&gt;역시 돈이 조아…?:laughing:&lt;/del&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;답변을 읽는 것은 추천하지 않는다.. 길뿐더러 이해가 잘 안 될 것이다. 밑에 내가 요약을 써놨다&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/AWS/2021-06-02-14-00-10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/AWS/2021-06-02-14-00-23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/AWS/2021-06-02-14-00-39.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/AWS/2021-06-02-14-01-01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/AWS/2021-06-02-14-01-16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;어우 ㅋㅋㅋㅋ 뭐야 한글 지원하네?…:blush: 영어로 되어 있어서 안 하는지 알았지 뭐야~ 그래도 우리 엔지니어 김익수씨 센스 있게 내 프로필 정보가 한국인거 보고 답변 한글로 해주셨네 ㅋㅋ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;일단 대충 이 사람이 제기한 해결책을 쉽게 요약하면&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;내가 현재 사용하고 있는 &lt;strong&gt;EC2&lt;/strong&gt;의 타입, 즉 그냥 &lt;strong&gt;사양&lt;/strong&gt;(&lt;strong&gt;컴퓨터 사양의 그 사양이다&lt;/strong&gt;)이라고 생각하자. 그 타입이 리소스(자원)를 작게 제공해주는 타입인데 내 웹이 잡아 먹는 리소스가 그 타입의 것보다 크니까 더 큰 타입의 &lt;strong&gt;EC2로&lt;/strong&gt; 업그레이드 시키라는 것이였다. 당연히 업그레이드를 하려면 돈이 필요하고 더 많은 리소스를 잡아먹기 때문에 돈이 더 든다.&lt;/p&gt;

&lt;p&gt;짧은 결론&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;del&gt;돈 더 내놔&lt;/del&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그 답변을 보고 순간 내 가슴이 뻥 뚫리는 기분이었다. 드디어 해결했다는 생각에 돈이 더 들든 말든 바로 타입을 더 좋은 것으로 업그레이드시켰다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;그렇게 난 해결 된지 알고 테스팅을 해보지 않았었다… 그로부터 일주일 후..:clock130:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;웹에서 기능을 하나 수정하고 싶어서 수정하고 테스팅을 해보던 차에 1시간 뒤에 또 &lt;strong&gt;보기 싫은 녀석&lt;/strong&gt;이 나와버렸다…&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/AWS/2021-06-02-14-12-25.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;그만해!!!!!!!!!!:scream:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;정말 이 메시지를 보자마자 온몸에 소름이 돋기 시작하면서 기운이 다 빠져나갔다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;그게 해결책이 아니었다니…:disappointed:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;돈 내고 질문까지 해서 얻어낸 답변인데..&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;나는 바로 다시 &lt;strong&gt;Support&lt;/strong&gt; 창으로 돌아가 처음 질문했던 창으로 들어가 질문을 이어갔다.&lt;/p&gt;

&lt;p&gt;참고로 질문을 이어가는 것은 새로운 질문 게시물을 다는 것이 아니라 &lt;strong&gt;기존 질문에 추가하는 식이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/AWS/2021-06-02-14-15-27.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;역시나 답변이 매우 빨리 달려졌다.ㄷㄷ&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;이번에도 읽는 거 추천하지 않는다.. 요약은 밑에 해놨다.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/AWS/2021-06-02-14-16-07.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/AWS/2021-06-02-14-16-23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/AWS/2021-06-02-14-16-40.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;다시 답변을 요약하자면 내가 &lt;strong&gt;EC2&lt;/strong&gt;의 타입을 더 큰 것으로 바꿔서 이제 리소스가 부족한 문제는 없어졌지만 더 정확한 분석을 위해서 오류 내용을 정리해서 달라는 것이었다. 아무래도 &lt;strong&gt;AWS&lt;/strong&gt;의 사내 정책에 따라 고객의 프로그램을 직접적으로 접근할 수 없나 보다. 그래서 나는 바로 오류 내용을 정리해서 글을 달았다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/AWS/2021-06-02-14-18-54.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;그리고 또다시 달린 빠른 답변&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/AWS/2021-06-02-14-20-00.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/AWS/2021-06-02-14-20-14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;요약하자면 리소스의 이용률을 분석할 수 있게 프로그램을 하나 소개해주셨고 그것을 사용해서 이용률을 추적해보라는 것이다. 그리고 나는 항상 &lt;strong&gt;EC2&lt;/strong&gt;에서 오류가 나면 다시 쓸 수 없어서 다시 접속하려면 껐다 켜는 수밖에 없었는데 그것을 끄지 말고 자신이 들여다볼 수 있게 놔두라는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;나는 하라는데로 프로그램을 깔고 테스팅하는 내내 모니터를 1시간 동안 들여다보면서 분석하기 시작했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/AWS/2021-06-02-14-24-34.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그리고 시작한 지 거의 1시간 뒤 나를 &lt;strong&gt;반갑다고 반겨주는&lt;/strong&gt; 우리 &lt;strong&gt;에러..&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/AWS/2021-06-02-14-26-32.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;화가 치밀어 오르기 시작했다…&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;del&gt;뭐가 문제인 거야!!!~ㅇㄹㄴㅇㄹ24@#$@#$ㄴㅇㄹ:rage:&lt;/del&gt;~&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;다시 질문을 달았다…&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/AWS/2021-06-02-14-27-09.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/AWS/2021-06-02-14-27-25.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;그로부터 온 답변…&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/AWS/2021-06-02-14-28-20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/AWS/2021-06-02-14-28-38.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;솔직히 이 답변을 보자마자 조금 화났다.. 왜냐면 내가 분명히 처음 영어로 질문할 때 &lt;strong&gt;어떠어떠한 것을 시도해봤는데 그래도 안 됐다는 식으로 말했었는데..&lt;/strong&gt; 그때 시도한 해결책을 똑같이 또 제시하고 있는 것이다…&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;&lt;strong&gt;안 된다니ㄲ!!!:rage:&lt;/strong&gt;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그렇게 다시 올린 질문…&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/AWS/2021-06-02-14-31-47.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;내가 조금 흥분한 것을 알았는지 답변이 조심스럽게 왔다…&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;&lt;strong&gt;좀 ㅈㅅ…&lt;/strong&gt;…&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;&lt;strong&gt;이 문제 때문에 잠도 제대로 못자서 예민ㅎ..&lt;/strong&gt;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/AWS/2021-06-02-14-33-23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/AWS/2021-06-02-14-33-45.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/AWS/2021-06-02-14-33-59.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;연락처를 남기면 자세하게 설명을 해주겠다는데 왠지 느낌이 전화해도 해결될 거 같아 보이지 않았다…&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그렇게 망연자실하면서 하루를 보내고 있었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EC2&lt;/strong&gt;에서 웹 서버를 실행시킬 때 내 졸업작품 팀원 중 한 명이 만든 것이 하나 있었다. 그냥 단순한 프로그램인데 이 프로그램은 &lt;strong&gt;EC2&lt;/strong&gt;를 실행하면 자동으로 웹을 인터넷에 배포시키게 하는 프로그램인데 편리하니까 이 프로그램을 자주 사용했었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2&gt;그런데..&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;어젯밤 그 프로그램을 사용 안 하고 수동으로 &lt;strong&gt;EC2&lt;/strong&gt;에 웹을 배포 시켜 봤다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;그냥 아무 생각 없이 무지성으로 시도한 일이었다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;그랬더니 1시간 이상을 에러 없이 동작하는 것이다!!!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;흥분한 나머지 계속 에러가 나올 때까지 지켜봤다..&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;제발.. 제발.. 젭랄..ㄹ.ㄹ….&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3시간 이상을 켜놔도 에러가 발생하지 않았다!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2&gt;할..렐..루..야&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;&lt;strong&gt;아멘…&lt;/strong&gt;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;문제는 바로 그 팀원이 만든 프로그램이었던 것이다..&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;del&gt;진짜 니새ㄲ는 만들기만 하지 테스팅할 지 모르는 구난ㄹㅇㄹㄴㅇㄹㄴ!!&lt;/del&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;del&gt;항상 버그는 내가 고치네 ㅡㅡ&lt;/del&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;사랑해요 ㅎㅎ:purple_heart:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그래도 해결돼서 다행이지… 안 됐으면 몇 날 며칠을 스트레스받으면서 살았을 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;정말 기쁘면서도 한편으로는 현타가 쓰나미 오듯 내 마음을 덮쳤다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;하.. 정말 나는 내 실수인가?.. 내가 뭐 건드렸나?… 하면서 소중한 시간 2주와 돈도 버리면서 해결하려고 온갖 애를 다 썼는데..&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그래도 마음이 조금 진정되는 듯 싶었으나…
앞에서도 말했지만 &lt;strong&gt;AWS&lt;/strong&gt;에 질문하는 것은 무료가 아니다. 한국 돈으로 한 7천원 쯤으로 알고 있는데 매달 말 쯤에 결제를 한다. 금액은 대충 알지만 궁금해서 결제 예상 금액을 보는 창으로 들어가 보았다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/DailyLife/AWS/2021-06-02-14-52-40.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;&lt;strong&gt;이런 씹ㅍ…:dizzy_face:&lt;/strong&gt;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;아니…. 뭐야… 뭔데!!!!!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2&gt;$40.67????&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;뭐지?? 나는 바로 어디서 돈이 그렇게 많이 들었는지 상세 내역을 봤다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;99%&lt;/strong&gt; 다 &lt;strong&gt;Support&lt;/strong&gt;(&lt;strong&gt;지원&lt;/strong&gt;)에서 나온 금액이었다… 즉.. 내가 질문하고 답변받고 했던 것이 저만큼 나온 것이다. 내가 앞에서 질문하는데 한국 돈으로 7천원 정도 든다고 했었는데… 알고보니 답변의 개수 당 얼마로 계산하는 것이었다…&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;워매….&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;del&gt;무슨 비트코인이여??&lt;/del&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;아니 도움 1도 안된 답변들이 4만 5천원이나 된다고? &lt;strong&gt;ㅡ.ㅡ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;현타 쓰나미 두 번째 &lt;strong&gt;Wave&lt;/strong&gt;가 내 몸을 휩쓸고 갔다….&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;AWS 이 완전 양아치놈들… 아니 안 그래도 리소스 쓰는데도 돈 내는데 고객들 질문받는데도 돈을 받네… 7천원은 그래도 어느 정도 이해는 했다만.. 답변 개수로 계산하는 건 좀…&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;선 넘네…&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;정말 웃지도 울지도 못하는 하루다…&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;:sob::sob::sob::sob::sob::sob::sob::sob::sob::sob:&lt;/p&gt;
</description>
				<pubDate>Wed, 02 Jun 2021 12:00:00 +0900</pubDate>
				<link>/daily-life/2021/06/02/DailyLife-AWS.html</link>
				<guid isPermaLink="true">/daily-life/2021/06/02/DailyLife-AWS.html</guid>
			</item>
		
			<item>
				<title>Lambda의 사용과 정렬 조건 주기</title>
				<description>&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;lambda&quot;&gt;&lt;center&gt;Lambda&lt;/center&gt;&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;파이썬에서는 &lt;strong&gt;‘lambda’&lt;/strong&gt;라는 매우 편리한 &lt;strong&gt;익명 함수&lt;/strong&gt;가 존재한다. 파이썬에서 이 &lt;strong&gt;lambda&lt;/strong&gt;는 &lt;strong&gt;filter(), map(), reduce()&lt;/strong&gt;와 같은 전형적인 기능 개념과 함께 사용되는 매우 강력하고 편리한 기능이다.&lt;/p&gt;

&lt;p&gt;긴 설명보다 예를 보는 것이 더 나을 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;출력: 64&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;출력: 10&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;예들이 쉬워서 보면 어떤 느낌인지 알 것이다. 람다에서는 반환값을 만드는 표현식이 있는데 함수가 사용될 수 있는 곳에는 어디라도 람다 정의를 넣을 수 있으며 위의 예처럼 변수에 할당하여 사용할 필요는 없다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이제 정렬을 할 때 람다를 사용하는 방법에 대해서 알아보자. 일반적으로 우리가 정렬을 할 때 사용하는 두 가지 방법은 sorted()와 .sort()가 있다. 예를 보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# a=[2,2,4,4,6,7]
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 인자없이 그냥 sorted()만 쓰면, 리스트 아이템의 각 요소 순서대로 정렬을 한다.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# b = [(3, 1), (0, 2), (3, 4), (6, 0), (1, 2)]
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# key 인자에 함수를 넘겨주면 해당 함수의 반환값을 비교하여 순서대로 정렬한다.
# 첫 번째 요소로 오름차순 정렬을 한다.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# c = [(0, 2), (1, 2), (3, 1), (3, 4), (6, 0)]
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#두 번째 요소로 오름차순 정렬을 수행한다.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# d = [(6, 0), (3, 1), (0, 2), (1, 2), (3, 4)]
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 아이템 첫 번째 요소를 기준으로 오름차순으로 먼저 정렬하고,
# 그리고 그 안에서 다음 두 번째 요소를 기준으로 내림차순으로 정렬하게 하려면, 다음과 같이 할 수 있다.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# f = [(0, 3), (0, 1), (1, 5), (1, 4), (1, 3), (2, 4)]
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;정리&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;sorted()의 key 인자로, 내가 커스텀할 비교 함수를 넣어준다.&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;비교 함수는 비교할 아이템의 요소를 반환한다.&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;비교 함수는 익명 함수(lambda)도 가능하고, 별도로 정의 가능하다.&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;비교할 아이템의 요소가 복수 개일 경우, 튜플로 그 순서를 내보내주면 된다.&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;-를 붙이면, 현재 정렬차순과 반대로 하게 된다.&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Mon, 31 May 2021 09:00:00 +0900</pubDate>
				<link>/python/2021/05/31/Python-lambda.html</link>
				<guid isPermaLink="true">/python/2021/05/31/Python-lambda.html</guid>
			</item>
		
	</channel>
</rss>
